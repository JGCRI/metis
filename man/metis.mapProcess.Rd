% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metis.mapsProcess.R
\name{metis.mapProcess}
\alias{metis.mapProcess}
\title{metis.mapProcess}
\usage{
metis.mapProcess(polygonDataTables = NULL, gridDataTables = NULL,
  dirOutputs = paste(getwd(), "/outputs", sep = ""),
  mapsOutFolderName = "mapOutputs", xRange = "All", labels = F,
  labelsSize = 1.2, subRegShape = NULL, subRegShpFolder = NULL,
  subRegShpFile = NULL, subRegCol = NULL, subRegType = "subRegType",
  dirNameAppend = "", nameAppend = "", legendOutsideSingle = F,
  legendOutsidePosition = NULL, legendPosition = NULL,
  legendFixedBreaks = 5, legendTitleSizeO = 2, legendTextSizeO = 1,
  legendTitleSizeI = 1.5, legendTextSizeI = 1, animateOn = T,
  delay = 100, scenRef = NULL, extension = F,
  boundaryRegShape = NULL, boundaryRegShpFolder = NULL,
  boundaryRegShpFile = NULL, boundaryRegCol = NULL,
  boundaryRegionsSelect = NULL, fillcolorNA = NULL,
  extendedLabels = T, extendedFillColor = "grey75",
  extendedBGColor = "lightblue1", extendedHighLightColor = "cornsilk1",
  extendedLabelsColor = "grey30", extdendedLabelSize = 0.7,
  extendedShape = NULL, extendedShapeCol = NULL, expandPercent = 3,
  projX = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0",
  figWidth = 6, figHeight = 7, scaleRange = NULL,
  paramsSelect = "All", indvScenarios = "All", GCMRCPSSPPol = F,
  multiFacetCols = "scenarioRCP", multiFacetRows = "scenarioGCM",
  legendOutsideMulti = T, legendPositionMulti = NULL,
  legendTitleSizeMulti = NULL, legendTextSizeAnim = NULL,
  legendTextSizeMulti = NULL, refGCM = NULL, refRCP = NULL,
  chosenRefMeanYears = NULL, mapTitleSize = 0.5,
  facetLabelSizeMulti = 3, numeric2Cat_list = NULL, diffOn = F)
}
\arguments{
\item{polygonDataTables}{Default = NULL,}

\item{gridDataTables}{Default = NULL,}

\item{dirOutputs}{Default = paste(getwd(),"/outputs",sep=""),}

\item{mapsOutFolderName}{Default="mapOutputs",}

\item{xRange}{Default ="All",}

\item{labels}{Default = F,}

\item{labelsSize}{Default = 1.2,}

\item{subRegShape}{Default = NULL,}

\item{subRegShpFolder}{Default = paste(getwd(),"/dataFiles/gis/admin_gadm36",sep=""),}

\item{subRegShpFile}{Default = paste("gadm36_1",sep=""),}

\item{subRegCol}{Default ="NAME_1",}

\item{subRegType}{Default ="subRegType",}

\item{dirNameAppend}{Default =""}

\item{nameAppend}{Default =""}

\item{legendOutsideSingle}{Default =F, Single plots by default have legends inside. This can be moved out if wanted.}

\item{legendOutsidePosition}{Default = NULL, # "right","left","top","bottom", "center"}

\item{legendPosition}{Default = NULL, # c("RIGHT','top') - RIGHT LEFT TOP BOTTOM}

\item{legendFixedBreaks}{Default = "5",}

\item{legendTitleSizeO}{Default = 2,}

\item{legendTextSizeO}{Default =1,}

\item{legendTitleSizeI}{Default = 1,}

\item{legendTextSizeI}{Default =0.5,}

\item{animateOn}{Default = T,}

\item{delay}{Default = 100,}

\item{scenRef}{Default = NULL}

\item{extension}{Default =F,}

\item{boundaryRegShape}{Default = NULL,}

\item{boundaryRegShpFolder}{Default= NULL . Suggested paste(getwd(),"/dataFiles/gis/naturalEarth",sep  Default="")}

\item{boundaryRegShpFile}{Default=NULL . Suggested paste("ne_10m_admin_0_countries",sep  Default=""),}

\item{boundaryRegCol}{Default=NULL. Suggested "NAME_0",}

\item{boundaryRegionsSelect}{Default = NULL,}

\item{fillcolorNA}{Default = NULL}

\item{extendedLabels}{Default = T}

\item{extendedFillColor}{Default ="grey75",}

\item{extendedBGColor}{Default ="lightblue1",}

\item{extendedHighLightColor}{Default ="cornsilk1",}

\item{extendedLabelsColor}{Default ="grey30",}

\item{extdendedLabelSize}{Default =0.7,}

\item{extendedShape}{Default =NULL,}

\item{extendedShapeCol}{Default =NULL,}

\item{expandPercent}{Default =2}

\item{projX}{Default = projX="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"}

\item{figWidth}{Default =9}

\item{figHeight}{Default =7}

\item{scaleRange}{Default NULL. Dataframe with columns param, maxScale, minScale to indicate maximum and minumum values for a parameter scale.}

\item{paramsSelect}{Default ="All"}

\item{indvScenarios}{Default ="All",}

\item{GCMRCPSSPPol}{Default = F,}

\item{multiFacetCols}{Default ="scenarioRCP",}

\item{multiFacetRows}{Default ="scenarioGCM",}

\item{legendOutsideMulti}{Default = NULL,}

\item{legendPositionMulti}{Default = NULL,}

\item{legendTitleSizeMulti}{Default = NULL,}

\item{legendTextSizeAnim}{Default = NULL,}

\item{legendTextSizeMulti}{Default = NULL,}

\item{refGCM}{Default = NULL , eg. "gfdl-esm2m"}

\item{refRCP}{Default = NULL , eg. "rcp2p6"}

\item{chosenRefMeanYears}{Default=NULL}

\item{mapTitleSize}{Default=0.5}

\item{facetLabelSizeMulti}{Default =3}

\item{numeric2Cat_list}{Default=NULL,}

\item{diffOn}{Default = F. Whether to calculate diff values between scenarios.}
}
\value{
Returns the formatted data used to produce chart
}
\description{
This function produce different kinds of maps for the metis package.
Each figure is accompanied with a csv table.
}
\examples{
  #------------------------------
  # Mapping (metis.mapsProcess.R)
  #------------------------------

  # Simple Example. See example csv tables provided for ideal column names needed.
  exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
  examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
  gridTable=read.csv(exampleGridTable_i);head(gridTable)
  polyTable=read.csv(examplePolygonTable_i);head(polyTable)

  subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
  subRegShpFile_i <- paste("bermejo3Cropped",sep="")
  subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
  head(subRegShp_i@data)
  subRegCol_i = "SUB_NAME"
  metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)

  metis.mapProcess(polygonDataTables=examplePolygonTable_i,
             gridDataTables=exampleGridTable_i,
             xRange=c(2005,2010,2020),
             mapsOutFolderName="BermejoExample",
             subRegShape=NULL,
             subRegShpFolder=examplePolyFolder_i,
             subRegShpFile=examplePolyFile_i,
             subRegCol=subRegCol_i,
             subRegType="subBasin",
             nameAppend="_exampleSubRegionMap",
             legendPosition=c("RIGHT","top"),
             animateOn=T,
             delay=100,
             scenRef="Eg1",
             #expandPercent = 2,
             extension=F)

  # Extended Map showing the subregion within a wider boudnary region

  boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
  boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
  boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
  head(boundaryRegShp_i@data)
  boundaryRegCol_i = "NAME"
  metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
  # Pick country names from the list of countries in the natural earth shapefile.
  unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
  boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp

  metis.mapProcess(polygonDataTables=examplePolygonTable_i,
             gridDataTables=exampleGridTable_i,
             xRange=c(2005,2010,2020),
             mapsOutFolderName="BermejoExampleExtended",
             boundaryRegionsSelect=boundaryRegionsSelect_i,
             boundaryRegShpFolder = boundaryRegShpFolder_i,
             boundaryRegShpFile = boundaryRegShpFile_i,
             boundaryRegCol = boundaryRegCol_i,
             subRegShape=NULL,
             subRegShpFolder=examplePolyFolder_i,
             subRegShpFile=examplePolyFile_i,
             subRegCol=subRegCol_i,
             subRegType="subBasin",
             nameAppend="_exampleSubRegionMapExtended",
             legendPosition=c("RIGHT","top"),
             animateOn=T,
             delay=100,
             scenRef="Eg1",
             expandPercent = 10,
             extension=T)


  #--------------------------------------------------
  # Mapping (metis.mapsProcess.R) - Extensive Example
  #--------------------------------------------------
  # Steps
  # Read in the boundary Shapefile to crop underlying data to.
  # Choose the boundary region name or names to subset the boundary shapefile.
  # Read in sub-region shape file (Example the GCAM Basins shapefile)
  # Run metis.boundaries.R to crop the sub-region shapefile to the boudnary region selected.
  # Read in polygon data table with data per sub-regions of interest
  # Runs metis.mapsProcess.R


  # Read in Boundary Region
  # Read in the GCAM 32 regions shapefile which comes with metis.
  boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
  boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
  boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
  head(boundaryRegShp_i@data)
  boundaryRegCol_i = "region"
  metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)

  # Choose GCAM region
  # Full list: USA, Africa_Eastern, Africa_Northern, Africa_Southern, Africa_Western,
  # Australia_NZ, Brazil, Canada Central America and Caribbean, Central Asia, China, EU-12,
  # EU-15, Europe_Eastern, Europe_Non_EU, European Free Trade Association, India, Indonesia, Japan,
  # Mexico, Middle East, Pakistan, Russia, South Africa, South America_Northern, South America_Southern,
  # South Asia, South Korea, Southeast Asia,

  # A similar analysis can be done using the country shapefile for any country.
   # Uncomment the following lines of code and choose and appropriate region to crop to.
  # boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
  # boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
  # boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
  # head(boundaryRegShp_i@data)
  # boundaryRegCol_i = "NAME"
  # metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
  # Pick country names from the list of countries in the natural earth shapefile.
  # unique(boundaryRegShp_i@data[[boundaryRegCol_i]])

  boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp


  # Read in subregion shapefile
  # Read in the  SubBasin GCAM Basins shapefile which comes with metis.
  subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
  subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
  subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
  head(subRegShp_i@data)
  subRegCol_i = "basin_name"
  metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)

  # Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
  boundaries<- metis.boundaries(
    boundaryRegShape=boundaryRegShp_i,
    boundaryRegCol=boundaryRegCol_i,
    boundaryRegionsSelect=boundaryRegionsSelect_i,
    subRegShape=subRegShp_i,
    subRegCol=subRegCol_i,
    subRegType="GCAMBasin",
    nameAppend="",
    expandPercent=2,
    #overlapShpFile="Global235_CLM_final_5arcmin_multipart",
    #overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
    extension = T,
    cropSubShape2Bound = T)

  # The subregion shapefile created by boundaries can now be selected to be used for mapping values.
  subRegShp_i_Crop = boundaries$subRegShape
  head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
  metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
  # Sometimes the cropping results in slivers of regions left around boundaries
  # when the boundary and subregion shape don't line up.
  # The extra regions can be removed as follows.
  # Choose regions from the list of regions printed above.
  # Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
  regions_to_remove =c("Amu_Darya")
  subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] \%in\% regions_to_remove) &
                                      !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
  subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
  head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
  metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)


  # Read in the datatable with values by subRegion
   examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
  polyTable=read.csv(examplePolygonTable_i);head(polyTable)
  unique(polyTable$x); # check available number of years.

  # Make sure shapefile subRegions and PolygonTable subregions match
  unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])

  metis.mapProcess(polygonDataTables=examplePolygonTable_i,
             #gridDataTables=exampleGridTable_i,
             xRange=c(2010,2020,2100),
             mapsOutFolderName=boundaryRegionsSelect_i,
             boundaryRegionsSelect=boundaryRegionsSelect_i,
             boundaryRegShape=boundaryRegShp_i,
             subRegShape=subRegShp_i_Crop,
             subRegCol=subRegCol_i,
             subRegType="GCAMBasin",
             nameAppend="",
             animateOn=T,
             delay=100,
             scenRef="SSP2_Ref",
             extension=F,
             diffOn = F)


  # Improved map using available parameters.
  # Shift legend outside and change the scale_range to get conistent scale across scenarios.

  # Set scale ranges across scenarios to be the same.
  # Check range of data for each param
  for(param_i in unique(polyTable$param)){
    print(paste("param: ", param_i, sep=""));print("Range is:")
    print(range((polyTable\%>\%dplyr::filter(param==param_i))$value))}

  scaleRange_i = tibble::tribble(
    ~param,~minScale, ~maxScale,
    "waterConsumption", 0, 10)

  metis.mapProcess(polygonDataTables=examplePolygonTable_i,
             #gridDataTables=exampleGridTable_i,
             xRange=c(2010,2020,2100),
             mapsOutFolderName=paste(boundaryRegionsSelect_i,"_Edited",sep=""),
             boundaryRegionsSelect=boundaryRegionsSelect_i,
             boundaryRegShape=boundaryRegShp_i,
             subRegShape=subRegShp_i_Crop,
             subRegCol=subRegCol_i,
             subRegType="GCAMBasin",
             nameAppend="_improvedFig",
             legendPosition=c("LEFT","bottom"),
             animateOn=T,
             delay=100,
             scenRef="SSP2_Ref",
             extension=F,
             diffOn = F,
             legendOutsideSingle = T,
             scaleRange = scaleRange_i)
}
\keyword{charts,}
\keyword{diffplots}
