<<<<<<< HEAD
writeOGR(obj=countryLocalBasin, dsn=paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""), layer=paste(countryName,"LocalBasin",sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
metis.map(dataPolygon=countryLocalBasin,fillColumn = localBasinsShapeFileColName,printFig=F, facetsON = F, labels=T)
# dataPolygon=countryLocalBasin
# fillColumn = localBasinsShapeFileColName
# printFig=F
# facetsON = F
# labels=T
# legendStyle = "cat"
# fillPalette = eval(parse(text=paste(b[1,2])))
#-----------
# Boundaries
#-------------
# Plot NE admin boundaries 1
boundaryRegShape_i = NE0
#boundaryRegShpFolder_i=paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
#boundaryRegShpFile_i=paste("ne_10m_admin_0_countries",sep="")
boundaryRegCol_i="NAME"
boundaryRegionsSelect_i=countryName
subRegShape_i = countryNE1
#subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep = "")
#subRegShpFile_i = paste("countryNE1",sep= "")
subRegCol_i = "name"
subRegType_i = "state"
nameAppend_i = "_NE"
expandPercent_i = 2
overlapShape_i = countryGCAMBasin
#overlapShpFile_i = "Global235_CLM_final_5arcmin_multipart"
#overlapShpFolder_i = paste(getwd(),"/dataFiles/gis/basin_gcam",sep= "")
extension_i =  T
cropSubShape2Bound_i = T
boundariesX<- metis.boundaries(
#fillPalette = c("Accent"),
boundaryRegShape=boundaryRegShape_i,
#boundaryRegShpFolder=boundaryRegShpFolder_i,
#boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
#subRegShpFolder=subRegShpFolder_i,
#subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
expandPercent=expandPercent_i,
overlapShape = overlapShape_i,
#overlapShpFile=overlapShpFile_i,
#overlapShpFolder=overlapShpFolder_i,
extension = extension_i,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep="")),
cropSubShape2Bound=cropSubShape2Bound_i
)
# Plot GCAM Basin boundaries
subRegShape_i = countryGCAMBasin
subRegCol_i = "basin_name"
subRegType_i = "GCAMBasin"
nameAppend_i = "_GCAMBasin"
overlapShape_i = countryNE1
boundariesX<- metis.boundaries(
boundaryRegShape=boundaryRegShape_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
expandPercent=expandPercent_i,
overlapShape = overlapShape_i,
extension = extension_i,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep="")),
cropSubShape2Bound=cropSubShape2Bound_i)
# Plot SubRegion Basin boundaries
subRegShape_i = countryLocalBasin
subRegCol_i = localBasinsShapeFileColName
subRegType_i = "subBasin"
nameAppend_i = "_localSubBasin"
overlapShape_i = countryNE1
boundariesX<- metis.boundaries(
boundaryRegShape=boundaryRegShape_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
expandPercent=expandPercent_i,
overlapShape = overlapShape_i,
extension = extension_i,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep="")),
cropSubShape2Bound=cropSubShape2Bound_i)
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=0
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
#"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisPeru.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetisPeru.sqlite", sep = "")
gridMetis<-metis.prepGrid(
reReadData=reReadData,
demeterFolder=demeterFolder,
demeterScenario=demeterScenario,
demeterTimesteps=demeterTimesteps,
demeterUnits=demeterUnits,
tethysFolder=tethysFolder,
tethysScenario=tethysScenario,
copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
tethysFiles=tethysFiles,
tethysUnits=tethysUnits,
xanthosFolder=xanthosFolder,
xanthosFiles=xanthosFiles,
xanthosCoordinatesPath=xanthosCoordinatesPath,
xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
spanLowess=spanLowess,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=0
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
#"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisPeru.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
# Natural Earth admin1 boundaries
boundaryRegionsSelect_i=countryName
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep = "")
subRegShpFile_i = paste(countryName,"NE1",sep= "")
subRegCol_i = "name"
subRegType_i = "state"
nameAppend_i = "_NE"
aggType_i = NULL
paramsSelect_i= "All" #"demeterLandUse"
sqliteUSE_i = T
sqliteDBNamePath_i = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
#grid_i=gridMetis
grid2polyX<-metis.grid2poly(
#grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i,
sqliteUSE = sqliteUSE_i,
sqliteDBNamePath = sqliteDBNamePath_i)
#grid_i=gridMetis
#grid_i=paste(getwd(),"/outputs/Grids/gridMetisXanthos.RData",sep = "")
boundaryRegionsSelect_i=countryName
subRegShpFolder_i = localBasinShapeFileFolder # paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep = "")
subRegShpFile_i = localBasinShapeFile # paste("colombiaLocalBasin",sep= "")
subRegCol_i = localBasinsShapeFileColName  #
subRegType_i = "subBasin"
nameAppend_i = "_local"
aggType_i = NULL
paramsSelect_i= "All" #"demeterLandUse"
sqliteUSE_i = T
sqliteDBNamePath_i = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
grid2polyX<-metis.grid2poly(#grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i,
sqliteUSE = sqliteUSE_i,
sqliteDBNamePath = sqliteDBNamePath_i)
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=1
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
#"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetis.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
gridMetis<-metis.prepGrid(
reReadData=reReadData,
# demeterFolder=demeterFolder,
# demeterScenario=demeterScenario,
# demeterTimesteps=demeterTimesteps,
# demeterUnits=demeterUnits,
# tethysFolder=tethysFolder,
# tethysScenario=tethysScenario,
# copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
# tethysFiles=tethysFiles,
# tethysUnits=tethysUnits,
# xanthosFolder=xanthosFolder,
# xanthosFiles=xanthosFiles,
# xanthosCoordinatesPath=xanthosCoordinatesPath,
# xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
# spanLowess=spanLowess,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
#-----------------------------
# Over all steps
#-----------------------------
# 1. Read GCAM Data
# 2. Create Charts
# 3. Prepare Polygon Data (Check and fix shapefiles as needed)
# 4. Plots Boudnaries
# 5. Prep grids
# 6. Grid to polygons
# 7. Produce Maps
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
if("tools" %in% rownames(installed.packages()) == F){install.packages("tools")}
library(tools)
#----------------------------
countryName= "Peru"
localBasinShapeFileFolder = paste(getwd(),"/dataFiles/gis/shapefiles_Peru",sep="")
localBasinShapeFile = "UH"
#countryLocalBasin<-readOGR(dsn=localBasinShapeFileFolder,layer=localBasinShapeFile,use_iconv=T,encoding='UTF-8')
#countryLocalBasin; head(countryLocalBasin@data);
localBasinsShapeFileColName = "FID" # Will need to load the file to see which name this would be
countryName <- tools::toTitleCase(countryName); countryName
# Create directory for country
if (!dir.exists(paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""))){
dir.create(paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""))}
# View default metis country shapefile (Natural Earth maps)
NE0<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_0_countries",use_iconv=T,encoding='UTF-8')
if(!countryName %in% unique(NE0@data$NAME)){stop(print(paste(countryName, " not in NE0 countries. Please check data.", sep="")))}
countryNE0<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_0_countries",use_iconv=T,encoding='UTF-8')
countryNE0<-countryNE0[(countryNE0$NAME==countryName),]
head(countryNE0@data)
plot(countryNE0)
projX<-proj4string(countryNE0)
# Natural earth level 1 admin boundaries
NE1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_1_states_provinces",use_iconv=T,encoding='UTF-8')
if(!countryName %in% unique(NE1@data$admin)){stop(print(paste(countryName, " not in NE1 countries. Please check data.", sep="")))}
countryNE1<-NE1[(NE1$admin==countryName),]
# subset any islands or regions not wanted
countryNE1<-countryNE1[(!countryNE1$name %in% "San Andrés y Providencia") & !is.na(countryNE1$name),]
head(countryNE1@data)
plot(countryNE1)
countryNE1<-spTransform(countryNE1,CRS(projX))
writeOGR(obj=countryNE1, dsn=paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""), layer=paste(countryName,"NE1",sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
metis.map(dataPolygon=countryNE1,fillColumn = "name",printFig=F, facetsON = F, labels=T, legendStyle = "cat")
# GCAM Basins
GCAMBasin<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/basin_GCAM",sep=""),
layer="Global235_CLM_final_5arcmin_multipart",use_iconv=T,encoding='UTF-8')
GCAMBasin<-spTransform(GCAMBasin,CRS(projX))
countryGCAMBasin<-raster::crop(GCAMBasin,countryNE1)
countryLocalBasin@data <- droplevels(countryLocalBasin@data)
head(countryGCAMBasin@data)
plot(countryGCAMBasin)
writeOGR(obj=countryGCAMBasin, dsn=paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""), layer=paste(countryName,"GCAMBasin",sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
metis.map(dataPolygon=countryGCAMBasin,fillColumn = "basin_name",printFig=F,facetsON = F, labels=T, legendStyle = "cat")
# Local basin Shapefiles
countryLocalBasin<-readOGR(dsn=localBasinShapeFileFolder,
layer=localBasinShapeFile,use_iconv=T,encoding='UTF-8')
countryLocalBasin<-spTransform(countryLocalBasin,CRS(projX))
countryLocalBasin<-raster::crop(countryLocalBasin,countryNE1)
countryLocalBasin@data <- droplevels(countryLocalBasin@data)
head(countryLocalBasin@data)
plot(countryLocalBasin)
writeOGR(obj=countryLocalBasin, dsn=paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep=""), layer=paste(countryName,"LocalBasin",sep=""), driver="ESRI Shapefile", overwrite_layer=TRUE)
metis.map(dataPolygon=countryLocalBasin,fillColumn = localBasinsShapeFileColName,printFig=F, facetsON = F, labels=T)
# dataPolygon=countryLocalBasin
# fillColumn = localBasinsShapeFileColName
# printFig=F
# facetsON = F
# labels=T
# legendStyle = "cat"
# fillPalette = eval(parse(text=paste(b[1,2])))
#-----------
#------------------------
# Prepare Grids
#------------------------
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=1
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
#"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetis.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
gridMetis<-metis.prepGrid(
reReadData=reReadData,
# demeterFolder=demeterFolder,
# demeterScenario=demeterScenario,
# demeterTimesteps=demeterTimesteps,
# demeterUnits=demeterUnits,
# tethysFolder=tethysFolder,
# tethysScenario=tethysScenario,
# copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
# tethysFiles=tethysFiles,
# tethysUnits=tethysUnits,
# xanthosFolder=xanthosFolder,
# xanthosFiles=xanthosFiles,
# xanthosCoordinatesPath=xanthosCoordinatesPath,
# xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
# spanLowess=spanLowess,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
# reReadData=reReadData
# Natural Earth admin1 boundaries
boundaryRegionsSelect_i=countryName
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/shapefiles_",countryName,sep = "")
subRegShpFile_i = paste(countryName,"NE1",sep= "")
subRegCol_i = "name"
subRegType_i = "state"
nameAppend_i = "_NE"
aggType_i = NULL
paramsSelect_i= "All" #"demeterLandUse"
sqliteUSE_i = T
sqliteDBNamePath_i = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
#grid_i=gridMetis
grid2polyX<-metis.grid2poly(
#grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i,
sqliteUSE = sqliteUSE_i,
sqliteDBNamePath = sqliteDBNamePath_i)
=======
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*PRETTY.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*KMEANS.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*FREESCALE.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
#unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
}# if(nrow(datax)>1){
} # close Params
} # Close subRegType loop
} # Close policy loop
} #Close ssp loop
} # Check for multiple GCM and RCPS
} # Close if(GCMRCPSSPPol==T){
if(!is.null(indvScenarios)){
if(any(indvScenarios=="All")){
print(paste("indvScenarios set to 'All', running for all scenarios.",sep=""))
scenarios <- unique(shapeTbl$scenario)
} else {
if(all(indvScenarios %in% unique(shapeTbl$scenario))){
print(paste("Running for selected indvScenarios: ", paste(indvScenarios,collapse=", "),sep=""))
scenarios <- unique((shapeTbl%>%dplyr::filter(scenario %in% indvScenarios))$scenario)
} else {if(!all(indvScenarios %in% unique(shapeTbl$scenario))){
print(paste("Running for indvScenarios: ", paste(indvScenarios,collapse=", "), " available in unique shapeTbl scenarios : ",
paste(indvScenarios[indvScenarios %in% unique(shapeTbl$scenario)],collapse=", "),sep=""))
scenarios <- unique((shapeTbl%>%dplyr::filter(scenario %in% indvScenarios[indvScenarios %in% unique(shapeTbl$scenario)]))$scenario)
}
}
}
for (scenario_i in scenarios){
for (subRegType_i in unique(shapeTbl$subRegType)){
for (param_i in unique(shapeTbl$param)){
if(nrow(shapeTbl%>%dplyr::filter(subRegType==subRegType_i,scenario==scenario_i,param==param_i))>0){
animScalePoly<-(shapeTbl%>%dplyr::filter(subRegType==subRegType_i,scenario==scenario_i,param==param_i))$value
if(!is.null(scaleRange) & grepl(param_i,unique(scaleRange$param))){
if(max(animScalePoly) < (scaleRange %>% dplyr::filter(param==param_i))$maxScale){
animScalePoly<-c(animScalePoly,(scaleRange %>% dplyr::filter(param==param_i))$maxScale)}
if(min(animScalePoly) > (scaleRange %>% dplyr::filter(param==param_i))$minScale){
animScalePoly<-c(animScalePoly,(scaleRange %>% dplyr::filter(param==param_i))$minScale)}
}
animPrettyBreaksPoly<-scales::pretty_breaks(n=legendFixedBreaks)(animScalePoly)
animKmeanBreaksPoly<-sort(as.vector((stats::kmeans(animScalePoly,centers=(legendFixedBreaks-2)))$centers[,1]))
animKmeanBreaksPoly <- sort(c(min(animScalePoly),animKmeanBreaksPoly,max(animScalePoly)))
if((max(range(animScalePoly))-min(range(animScalePoly)))<1E-10 &
(max(range(animScalePoly))-min(range(animScalePoly)))>-1E-10){animScalePolyRange=min(animScalePoly)}else{
animScalePolyRange=range(animScalePoly)
}
if(mean(animScalePolyRange,na.rm = T)<0.01 & mean(animScalePolyRange,na.rm = T)>(-0.01)){animLegendDigits<-4}else{
if(mean(animScalePolyRange,na.rm = T)<0.1 & mean(animScalePolyRange,na.rm = T)>(-0.1)){animLegendDigits<-3}else{
if(mean(animScalePolyRange,na.rm = T)<1 & mean(animScalePolyRange,na.rm = T)>(-1)){animLegendDigits<-2}else{
if(mean(animScalePolyRange,na.rm = T)<10 & mean(animScalePolyRange,na.rm = T)>(-10)){animLegendDigits<-1}else{animLegendDigits<-0}}}}
# Figure 1 : each param: If class > 1 { (Map x Class) x Selected Years}
shapeTblx<-shapeTbl%>%dplyr::filter(scenario==scenario_i,subRegType==subRegType_i,
param==param_i)
if(boundaryRegionsSelect %in% unique(shapeTblx$region)){
shapeTblx <- shapeTblx %>% dplyr::filter(region==boundaryRegionsSelect)
}
for (x_i in unique(shapeTbl$x)){
datax<-shapeTblx%>%dplyr::filter(x==x_i)
if(nrow(datax)>1){
legendTitle<-unique(datax$units)
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,class,value)%>%
dplyr::distinct(subRegion,class,.keep_all = TRUE) %>%
tidyr::spread(key=class,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)
legendAnimatedPosition=legendPositionS
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS
legendBreaksAnim = animKmeanBreaksPoly
legendStyleAnim="fixed"}else{
legendStyleAnim="fixed"
legendBreaksAnim = animKmeanBreaksPoly
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
legendAnimatedPosition=legendPositionS
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS
}
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendTitle =legendTitleAnimated,
legendStyle=legendStyleAnim,
legendBreaks = animKmeanBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
# numeric2Cat_list=numeric2Cat_list
# catParam=param_i
# panelLabel=panelLabelAnimated
# underLayer=underLayer
# dataPolygon=mapx
# fillColumn = names(mapx@data%>%dplyr::select(-subRegion))
# legendShow = T
# legendOutside = legendOutsideAnimated
# facetFreeScale = F
# frameShow = T
# labels=labels
# labelsSize = labelsSize
# legendTitleSize = legendTitleSizeAnim
# legendTextSize = legendTextSizeAnim
# legendTitle =legendTitleAnimated
# legendStyle=legendStyleAnim
# legendBreaks = animKmeanBreaksPoly
# legendFixedBreaks=legendFixedBreaks
# legendDigits = animLegendDigits
# legendOutsidePosition = legendOutsidePosition
# legendPosition = legendAnimatedPosition
# fillPalette = fillPalette
# bgColor = bgColorChosen
# figWidth=figWidth
# figHeight=figHeight
# fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS",sep="")
# dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = "")
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendBreaksAnim = animPrettyBreaksPoly
legendStyleAnim="fixed"}else{
legendStyleAnim="fixed"
legendBreaksAnim = animPrettyBreaksPoly
}
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle=legendStyleAnim,
legendBreaks = animPrettyBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
# panelLabel=panelLabelAnimated
# underLayer=underLayer
# dataPolygon=mapx
# fillColumn = names(mapx@data%>%dplyr::select(-subRegion))
# legendShow = T
# legendOutside = legendOutsideAnimated
# facetFreeScale = F
# frameShow = T
# labels=labels
# labelsSize = labelsSize
# legendTitle =legendTitleAnimated
# legendTitleSize = legendTitleSizeAnim
# legendTextSize = legendTextSizeAnim
# legendStyle=legendStyleAnim
# legendBreaks = animPrettyBreaksPoly
# legendFixedBreaks=legendFixedBreaks
# legendDigits = animLegendDigits
# legendOutsidePosition = legendOutsidePosition
# legendPosition = legendAnimatedPosition
# fillPalette = fillPalette
# bgColor = bgColorChosen
# figWidth=figWidth
# figHeight=figHeight
# fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY",sep="")
# dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = "")
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=legendOutsideSingle
legendAnimatedPosition
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendAnimatedPosition=legendPosition
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, panelLabel= panelLabelAnimated,underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
}# if(nrow(datax)>1){
}# Close years loop
# Animate 1 : each param: If class > 1 { (Map x Class) x Anim Years}
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*PRETTY.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*KMEANS.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*FREESCALE.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
#unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
#------------------------------
# Figure 2 : each param: If class ==1 { Map x years}
#-----------------------------
checkTbl<-shapeTbl%>%dplyr::filter(scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(boundaryRegionsSelect %in% unique(checkTbl$region)){
checkTbl <- checkTbl %>% dplyr::filter(region==boundaryRegionsSelect)
}
checkTbl<-droplevels(checkTbl)
if(length(unique(checkTbl$class))==1){
rm(checkTbl)
datax<-shapeTbl%>%dplyr::filter(scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(boundaryRegionsSelect %in% unique(datax$region)){
datax <- datax %>% dplyr::filter(region==boundaryRegionsSelect)
}
if(nrow(datax)>1){
legendTitle<-paste(unique(datax$units),sep="")
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,x,value)%>%
dplyr::distinct(subRegion,x,.keep_all = TRUE) %>%
tidyr::spread(key=x,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
if(length(names(mapx@data))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
# Calculate Mean
datax<-shapeTbl%>%dplyr::filter(scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(boundaryRegionsSelect %in% unique(datax$region)){
datax <- datax %>% dplyr::filter(region==boundaryRegionsSelect)
}
if(nrow(datax)>1){
legendTitle<-paste(unique(datax$units),sep="")
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,x,value)%>%
dplyr::group_by(subRegion)%>%
dplyr::summarize(!!paste("Mean_",min(xRange),"to",max(xRange),sep=""):=mean(value))%>%
dplyr::ungroup()
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
if(length(names(mapx@data))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(numeric2Cat_list=numeric2Cat_list, catParam=param_i, underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
}  #if(nrow(datax)>1){
}  #if(nrow(datax)>1){
} # If number of classes == 1
} # If nrow greater than 0
} # close Params
} # Close subRegType loop
} # Close scenario loop
} # Close if(indvScenarios=T)
} # Close if shapeTbl is NUll
} # close function
library(metis)
GCMRCPSSPPol_i=F
metis.mapProcess(polygonDataTables=polygonDataTables_i,
#gridDataTables=gridDataTables_i,
xRange=xRange_i,
# boundaryRegShape=boundaryRegShape_i,
# boundaryRegShpFolder=boundaryRegShpFolder_i,
# boundaryRegShpFile=boundaryRegShpFile_i,
# boundaryRegCol=boundaryRegCol_i,
# boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendOutsideSingle=legendOutsideSingle_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 3,
figWidth=6,
figHeight=7,
paramsSelect = paramsSelect_i,
scaleRange = scaleRange_i,
indvScenarios=indvScenarios_i,
GCMRCPSSPPol=GCMRCPSSPPol_i,
multiFacetCols="scenarioRCP",
multiFacetRows="scenarioGCM",
legendOutsideMulti=T,
legendPositionMulti=NULL,
legendTitleSizeMulti=NULL,
legendTextSizeAnim=NULL,
legendTextSizeMulti=NULL,
refGCM="gfdl-esm2m",
refRCP="rcp2p6",
chosenRefMeanYears=c(2000:2050),
numeric2Cat_list=numeric2Cat_list)
devtools::check()
devtools::check()
>>>>>>> 17c60c8e57ba00152665d8faa40cd0318e73b7c0
