fillPalette = "white",alpha=0,facetsON=F,
labels=T,printFig=F),facetsON=F)
print("Printing Grid overlay with Labels...")
metis.map(labelsSize=labelsSize, dataPolygon=rcropPx,fileName = paste(boundaryRegionsSelect,"_",subRegType,"_map_GridSize",nameAppend,sep=""),
dirOutputs = dir,
overLayer = metis.map(labelsSize=labelsSize, dataPolygon=shape,fillColumn = subRegCol,
fillPalette = "white",alpha=0,facetsON=F,
labels=F,printFig = F),facetsON=F)
}
gridPolyLoop=1; # To prevent gridded map being produced multiple times
if(aggType_i=="depth"){
print(paste("Aggregating depth for parameter ", param_i,"...",sep=""))
rcropPx@data$area<-raster::area(rcropPx)
s1<-shape
s1$subRegAreaSum<-raster::area(shape);
s1<-s1@data%>%dplyr::select( subRegCol,subRegAreaSum);
rcropPx@data<-dplyr::left_join(rcropPx@data,s1,by= subRegCol)
rcropPx@data$areaPrcnt<-rcropPx@data$area/rcropPx@data$subRegAreaSum;
x<-data.frame(mapply(`*`,rcropPx@data%>%
dplyr::select(names(rcropPx@data)[!names(rcropPx@data) %in% c(
names(shape),"lat","lon","area","subRegAreaSum","areaPrcnt")]),
rcropPx@data%>%dplyr::select(areaPrcnt),SIMPLIFY=FALSE))%>%
dplyr::bind_cols(rcropPx@data%>%dplyr::select( subRegCol))%>%tibble::as_tibble();
polyDatax<-x%>%dplyr::group_by(.dots = list( subRegCol))%>% dplyr::summarise_all(dplyr::funs(round(sum(.,na.rm=T),2)))
}
if(aggType_i=="vol"){
print(paste("Aggregating volume for parameter ", param_i,"...",sep=""))
w <- raster::extract(r,shape, method="simple",weights=T, normalizeWeights=F);
dfx<-data.frame()
for (i in seq(w)){
if(!is.null(w[[i]]))
x<-as.data.frame(w[[i]])
x$ID<-shape@data[[ subRegCol]][[i]]
x1<-data.frame(mapply(`*`,x%>%
dplyr::select(names(r)[!names(r) %in% c("lat","lon")]),x%>%
dplyr::select(weight),SIMPLIFY=FALSE))%>%
dplyr::bind_cols(x%>%dplyr::select(ID));
#assign(paste0("df", i), x)
dfx<-rbind.data.frame(dfx,x1)
}
names(dfx)[names(dfx)=="ID"]<- subRegCol;
polyDatax<-dfx%>%dplyr::group_by(.dots = list( subRegCol))%>% dplyr::summarise_all(dplyr::funs(round(sum(.,na.rm=T),2)))%>%tibble::as_tibble()
}
polyData<-tidyr::gather(polyDatax,key=key,value=value,-(subRegCol))%>%
tidyr::separate(col="key",into=names(grid)[!names(grid) %in% c("lat","lon","value")],sep="_")
for(colx in names(polyData)){
if(is.character(polyData[[colx]])){
polyData[[colx]]<-gsub("XSPACEX"," ",polyData[[colx]])
polyData[[colx]]<-gsub("XLPARENTHX","\\(",polyData[[colx]])
polyData[[colx]]<-gsub("XRLPARENTHX","\\)",polyData[[colx]])
polyData[[colx]]<-gsub("XPALUNDERX","pal\\_",polyData[[colx]])
}
}
polyData<-polyData%>%dplyr::mutate(subRegType=subRegType)
polyx<-shape
polyx@data<-dplyr::left_join(polyx@data,polyData)
polyx@data<-polyx@data%>%
dplyr::rename(subRegion:= !!paste(subRegCol))%>%
dplyr::mutate(region=boundaryRegionsSelect)%>%
dplyr::filter(!is.na(x))
poly<-dplyr::bind_rows(poly,polyx@data)
} # Close loop for aggType
} # Close loop for param_i
}else{print("No grid provided.")}
# Save Cropped Grid
if(!is.null(grid)){
if(nrow(gridCropped)>0){
gridCropped<-tidyr::gather(gridCropped,key=key,value=value,-c(lat,lon))%>%
tidyr::separate(col="key",into=names(grid)[!names(grid) %in% c("lat","lon","value")],sep="_")%>%
unique()
for(colx in names(gridCropped)){
if(is.character(gridCropped[[colx]])){
gridCropped[[colx]]<-gsub("XSPACEX"," ",gridCropped[[colx]])
gridCropped[[colx]]<-gsub("XLPARENTHX","\\(",gridCropped[[colx]])
gridCropped[[colx]]<-gsub("XRLPARENTHX","\\)",gridCropped[[colx]])
gridCropped[[colx]]<-gsub("XPALUNDERX","pal\\_",gridCropped[[colx]])
}
}
polyType=subRegType
if (!dir.exists(paste(dirOutputs, "/Grids", sep = ""))){dir.create(paste(dirOutputs, "/Grids", sep = ""))}
utils::write.csv(gridCropped%>%dplyr::mutate(region=boundaryRegionsSelect,polyType=polyType),
file = paste(dirOutputs, "/Grids/gridCropped_",boundaryRegionsSelect,"_",polyType,nameAppend,".csv", sep = ""),row.names = F)
}} # If null grid
#----------------
# Save template, csv and .RDATA
#---------------
if(nrow(poly)>0){
if (!dir.exists(paste(getwd(),"/dataFiles", sep = ""))){
dir.create(paste(getwd(),"/dataFiles", sep = ""))}  # dataFiles directory (should already exist)
if (!dir.exists(paste(getwd(),"/dataFiles/mapping", sep = ""))){
dir.create(paste(getwd(),"/dataFiles/mapping", sep = ""))}  # mapping directory
utils::write.csv(poly %>% dplyr::filter(region == boundaryRegionsSelect) %>%
dplyr::select(param,units,class,classPalette),
file = paste(getwd(),"/dataFiles/mapping/template_subRegional_mapping.csv", sep = ""),row.names = F)
for (boundaryRegionsSelect in boundaryRegionsSelect[(boundaryRegionsSelect %in% unique(poly$region))]) {
utils::write.csv(poly %>% dplyr::filter(region == boundaryRegionsSelect) %>%
dplyr::select(scenario,param,units,class,value,x,subRegion,subRegType,region)%>%
dplyr::mutate(value=0,x=2015)%>%unique,
file = paste(dirOutputs, "/Maps/Tables/subReg_",boundaryRegionsSelect,"_",subRegType,"_template",nameAppend,".csv", sep = ""),row.names = F)
utils::write.csv(poly %>% dplyr::filter(region == boundaryRegionsSelect) %>%
dplyr::select(scenario,param,units,class,value,x,subRegion,subRegType,region,classPalette),
file = paste(dirOutputs, "/Maps/Tables/subReg_origData_byClass_",boundaryRegionsSelect,"_",subRegType,"_origDownscaled",nameAppend,".csv", sep = ""),row.names = F)
}
print(paste("Subregional Polygon template .csv files written to: ",dirOutputs, "/Maps/Tables/subReg_",boundaryRegionsSelect,"_template",nameAppend,".csv", sep = ""))
print(paste("Subregional Polygon data .csv files written to: ",dirOutputs, "/Maps/Tables/subReg_origData_byClass_",boundaryRegionsSelect,"_",subRegType,"_origDownscaled",nameAppend,".csv", sep = ""))
}else{print("Polygon data has 0 rows")}
return(poly)
} # Close Function
grid2polyX<-metis.grid2poly(grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i)
polygonDataTables_i=paste(getwd(),"/outputs/Maps/Tables/subReg_origData_byClass_India_state_origDownscaled_indiaLocal.csv",sep="")
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario)
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario); unique(a$param)
?metis.mapProcess
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario); unique(a$param); unique(a$x)
polygonDataTables_i=paste(getwd(),"/outputs/Maps/Tables/subReg_origData_byClass_India_state_origDownscaled_indiaLocal.csv",sep="")
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario); unique(a$param); unique(a$x)
gridDataTables_i=paste(getwd(),"/outputs/Grids/gridCropped_India_state_indiaLocal.csv",sep="")
xRange_i= c(2005,2010,2020,2030,2050)
legendPosition_i=c("RIGHT","top")
animateOn_i=T
delay_i=100
scenRef_i="Eg1"
boundaryRegShape_i = NULL
boundaryRegShpFolder_i=paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i=paste("ne_10m_admin_0_countries",sep="")
boundaryRegCol_i="NAME"
boundaryRegionsSelect_i="India"
subRegShape_i = NULL
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/admin_India",sep = "")
subRegShpFile_i = paste("indiaLocal1",sep= "")
subRegCol_i = "NAME_1"
subRegType_i = "state"
nameAppend_i = "_indiaLocal"
metis.mapProcess(polygonDataTables=polygonDataTables_i,
gridDataTables=gridDataTables_i,
xRange=xRange_i,
boundaryRegShape=boundaryRegShape_i,
boundaryRegShpFolder=boundaryRegShpFolder_i,
boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 6
)
metis.colors("pal_hot")
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/metis.pdf",sep=""))){unlink(paste(getwd(),"/metis.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
devtools::check()
#' library(dplyr)
#' tbl <- tribble (
#' ~x,     ~value,
#' 2010,   15,
#' 2020,   20,
#' 2030,   30
#' )
#' metis.chart(data=tbl,xData="x",yData="value",chartType = "line")
#' metis.chart(data=tbl,xData="x",yData="value",chartType = "bar")
#'
library(tibble)
library(dplyr)
tbl <- tribble (
~x,     ~value,
2010,   15,
2020,   20,
2030,   30
)
metis.chart(data=tbl,xData="x",yData="value",chartType = "line")
metis.colors()[1]
metis.colors <- function(palx=NULL) {
NULL->pie
# GCAM Color Palettes
# HDDCDD Palette for Cooling and Heating
pal_HDDCDD<-c("CDD"="cornflowerblue","HDD"="coral2")
# General purpose color scheme where sequentail colors do not clash too much
pal_16 <- rep(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#333333", "#FFCC00", "#CC6600", "#006600", "#3333CC", "#CC0033", "#0099CC", "#999966"),100)
# Color scheme for electricity generation by aggregate fuel
elec_tech_colors <- c(`a Coal` = "#a0237c", `b Coal w/CCS` = "#dab4c7", `c Gas` = "#25a9e0", `d Gas w/CCS` = "#84e7f9",
`e Oil` = "#d01c2a", `f Oil w/CCS` = "#f7988f", `g Biomass` = "#00931d", `h Biomass w/CCS` = "#88c892",
`i Nuclear` = "#ef8e27", `j Geothermal` = "#ad440c", `k Hydro` = "#fdfa28", `l Wind` = "#3d86f9",
`m Solar` = "#fdd67b", `n CHP` = "#507fab", `o Battery` = "#92a75d", `energy reduction` = "grey")
elec_renew_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
nuclear = "#ef8e27", hydro = "#fdfa28", `wind w/ backup` = "#3e85fd", `wind w/ storage` = "#9ec1fd",
`csp w/ backup` = "#ec931a", `csp w/ storage` = "#f5c88c", `pv w/ backup` = "#ffd125", `pv w/ storage` = "#ffe791",
`rooftop solar` = "#ff7a17", geothermal = "#aa440a", cogen = "#507fab", battery = "#92a75d",
`energy reduction` = "grey")
# Buildings colors by fuel
building_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
electricity = "#ef8e27", `trad biomass` = "#11d081")
# Transportation colors by fuel
trn_fuel_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
electricity = "#ef8e27", hydrogen = "#fffbac")
# Generic end-use color scheme by numbered fuel
enduse_fuel_numbered <- c(`1 liquids` = "#d01c2a", `2 gas` = "#25a9e0", `3 coal` = "#a0237c",
`4 biomass` = "#00931d", `5 electricity` = "#ef8e27", `6 hydrogen` = "#fffbac", `7 trad biomass` = "#11d081",
`8 district heat` = "#b14d38", feedstocks = "#ff7467", `energy reduction` = "grey")
# Color scheme for the aggregate final demands
enduse_colors <- c(building = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7", `energy reduction` = "grey")
# Primary energy colors including CCS
pal_pri_ene <- c(`a oil` = "#d01c2a", `a oil CCS` = "#f7988f", `b natural gas` = "#25a9e0", `b natural gas CCS` = "#84e7f9",
`c coal` = "#a0237c", `c coal CCS` = "#dab4c7", `d biomass` = "#00931d", `d biomass CCS` = "#88c892",
`e nuclear` = "#ef8e27", `f hydro` = "#fdfa28", `g wind` = "#3d86f9", `h solar` = "#fdd67b",
`i geothermal` = "#ad440c", `j traditional biomass` = "#11d081", `energy reduction` = "grey")
# Color scheme for primary fuel costs
pal_pri_fuelcost <- c(`regional oil` = "#d01c2a", `regional natural gas` = "#25a9e0", `regional coal` = "#a0237c",
`regional biomass` = "#00931d", nuclearFuelGenIII = "#ef8e27")
# Colors for emissions by aggregate sector
pal_emiss_sector <- c(`liquid systems` = "#d01c2a", `gas systems` = "#25a9e0", coal = "#a0237c",
`biomass systems` = "#00931d", electricity = "#ef8e27", hydrogen = "#fffbac", `N fertilizer` = "#11d081",
`district heat` = "#b14d38", building = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7")
# Aggregated (more that usual) land use
pal_landuse <- c(urban = "#000000", crops = "#ffd125", `pasture (grazed)` = "#aacf22", `forest (managed)` = "#41a67a",
biomass = "#00f629", `forest (unmanaged)` = "#938e15", shrubs = "#b14d00", `grass/other pasture` = "#ffd081",
desert = "#a7a7a7")
# And hydrogen even
pal_hydrogen <- c(gas = "#25a9e0", `gas w/CCS` = "#84e7f9", coal = "#a0237c", `coal w/CCS` = "#dab4c7",
biomass = "#00931d", `biomass w/CCS` = "#88c892", nuclear = "#ef8e27", `bulk electricity` = "#fdfa28",
wind = "#3d86f9", solar = "#fdd67b", `energy reduction` = "grey")
# Refined liquids
pal_refliq <- c(`conventional oil` = "#ab4500", `unconventional oil` = "#ff9593", coal = "#ff2600",
`coal w/CCS` = "#ff8d78", biomass = "#00931d", `biomass w/CCS` = "#728f72", gas = "#1633ff",
`energy reduction` = "grey")
# Color scheme for emissions by aggregate sector
emiss_by_enduse_colors <- c(buildings = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7",
electricity = "#ea9219", cement = "#ff230e")
# Color scheme for biomass consumption by use
biouse_colors <- c(`direct buildings` = "#a8d8fe", industry = "#0080d4", electricity = "#ec931a",
refining = "#aa4a79", hydrogen = "#fffbac", `synthetic gas` = "#ff230e", `energy reduction` = "grey")
#------------------------------------------
# New Metis Color Schemes
#-------------------------------------------
# Creating Colors getcol = colorRampPalette(brewer.pal(9, 'RdGy')) values=getcol(9); values
# library(colorspace) pal<-choose_palette() pal(9)
# pie(rep(1,length(colx1)),label=names(colx1),col=colx1)
# Basic Colors
pal_Basic <- rep(c("red", "green3", "blue", "black", "magenta", "yellow", "cyan", "gray"),100)
# Gas Colors
pal_Gas <- c(`gas (CC CCS)` = "black", `gas (CT)` = "red", `gas (steam)` = "green3", `gas (CC)` = "blue",
"cyan", "magenta", "yellow", "gray")
pal_hot <- c('#ffffcc','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026','black')
pal_wet <- c('#f7fbff','#deebf7','#c6dbef','#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b','black')
pal_green <- c('#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529','black')
pal_div <- c('#67001f','#b2182b','#d6604d','#f4a582','#fddbc7','#ffffff','#e0e0e0','#bababa','#878787','#4d4d4d','#1a1a1a')
pal_seq <- c('lemonchiffon1','burlywood1','orange1','red1','purple4','black')
# Color scheme for electricity generation by aggregate fuel
pal_elec_subsec <- c(coal = "#a0237c", gas = "#25a9e0", oil = "#d01c2a", biomass = "#00931d",
nuclear = "#ef8e27", geothermal = "#ad440c", hydro = "#fdfa28", wind = "#0000ff", solar = "#fdd67b",
`refined liquids` = "#000000", electricity = "lavender", other = "grey70", `gas (CC CCS)` = "#25c9e0",
`gas (CC)` = "#25a9e0", `gas (CT)` = "#25e9e0", `gas (steam)` = "greenyellow")
# Color scheme for final energy by fuel
pal_elec_finalNrgFuel <- c(`3 coal` = "#a0237c", `2 gas` = "#25a9e0", `4 biomass` = "#00931d",
`1 liquids` = "#000000", `5 electricity` = "lavender", `6 hydrogen` = "orange", "grey60")
pal_elec_techs <- c(nuclear = "#af8e27", Gen_III = "#af8e27", Gen_II_LWR = "#ef8e27", CSP = "#cdd67b",
PV = "#fdd67b", `biomass (IGCC CCS)` = "#00a31d", `biomass (IGCC)` = "#00c31d", `biomass (conv CCS)` = "#00e31d",
`biomass (conv)` = "#00f31d", `coal (IGCC CCS)` = "#c0237c", `coal (IGCC)` = "#f0237c", `coal (conv pul CCS)` = "#e0237c",
`coal (conv pul)` = "#a0237c", `gas (CC CCS)` = "#25c9e0", `gas (CC)` = "#25a9e0", `gas (CT)` = "#25e9e0",
`gas (steam)` = "greenyellow", hydro = "#fdfa28", `refined liquids` = "#000000", `refined liquids (CC CCS)` = "#000000",
`refined liquids (CC)` = "#000000", `refined liquids (CT)` = "#000000", `refined liquids (steam)` = "#000000",
wind = "#0000ff", "red", "green", geothermal = "gray40")
pal_elec_sec <- c(elect_td_bld = "#ff230e", elect_td_ind = "darkolivegreen4", elect_td_trn = "dodgerblue",
electricity = "#ea9219")
pal_finalNrg_sec <- c(building = "#facda4", `comm non-building` = "#ff230e", industry = "#cef4d1",
transportation = "#d0f6f7", trn_pass_road_bus = "purple",buildings = "#facda4", electricity="lightcoral",
`LUC Emission`="grey30",`LUC Absorption`="darkolivegreen4")
# Modified Original GCAM color scheme for Primary energy consumption Modified the 'Primary energy
# colors including CCS - pal_pri_ene' color scheme from color_scheme.R Changed hydro to current
# wind color(blue), switched solar to current hydro color(yellow) switched wind to current solar
# color (biege), switched gas & gas CCS too a lighter blue because hydro and gas were too similar
pal_pri_ene <- c(`a oil` = "#d01c2a", `a oil CCS` = "#f7988f", `b natural gas` = "darkslategray1",
`b natural gas CCS` = "darkslategray4", `c coal` = "gray60", `c coal CCS` = "gray20", `d biomass` = "#00931d",
`d biomass CCS` = "#88c892", `e nuclear` = "#ef8e27", `f hydro` = "#3d86f9", `g wind` = "#fdd67b",
`h solar` = "#fdfa28", `i geothermal` = "#ad440c", `j traditional biomass` = "#11d081", `energy reduction` = "black")
# Modified color scheme for elec Modified the 'Primary energy colors including CCS - pal_pri_ene'
# color scheme from color_scheme.R Changed hydro to current wind color(blue), switched solar to
# current hydro color(yellow) switched wind to current solar color (biege), switched gas & gas CCS
# too a lighter blue because hydro and gas were too similar switched coal to grays and changed
# energy reduction to black
pal_elec_tech_colors <- c(`a Coal` = "gray60", `b Coal w/CCS` = "gray20", `c Gas` = "darkslategray1",
`d Gas w/CCS` = "darkslategray4", `e Oil` = "#d01c2a", `f Oil w/CCS` = "#f7988f", `g Biomass` = "#00931d",
`h Biomass w/CCS` = "#88c892", `i Nuclear` = "#ef8e27", `j Geothermal` = "#ad440c", `k Hydro` = "#3d86f9",
`l Wind` = "#fdd67b", `m Solar` = "#fdfa28", `n CHP` = "#507fab", `o Battery` = "#92a75d",
`energy reduction` = "grey", Total = "black", Other = "black")
# Agriculture Production Type
pal_ag_type <- c(Forest = "darkgreen" , NonFoodDemand_Forest = "darkolivegreen1",
biomass = "grey50", Corn = "gold3" ,
FiberCrop = "gold4",  MiscCrop = "darkorange4", OilCrop = "gray20",
OtherGrain  = "indianred2",
PalmFruit = "firebrick3" ,  Rice = "steelblue2", Root_Tuber  = "lightslateblue", SugarCrop = "yellow2",
Wheat  = "burlywood", FodderGrass = "darkseagreen1",
FodderHerb = "darkseagreen4", Pasture = "goldenrod1",
UnmanagedLand = "black")
# Water Demand Sectors
pal_wat_dem <- c(municipal = "dodgerblue", mining = "grey75", livestock = "darkseagreen3",
industry = "gold2", electricity = "darkorange", agriculture = "darkolivegreen4")
pal_lu_type <- c(urban="indianred2",tundra="antiquewhite1",shrubs="lightslateblue",`rock and desert`="black",
pasture="goldenrod1",otherarable="darkorange4",grass="darkolivegreen1",forest="darkgreen",
crops="yellow2",biomass="grey50")
if(!is.null(palx)){
if(length(get(palx))>1){
a<-get(palx)
if(palx=="pal_Basic" | palx=="pal_16"){a<-a[1:(length(a)/100)]}
pie(rep(1,length(a)),label=names(a),col=a)
}}
print(palx)
invisible(list(pal_lu_type=pal_lu_type,pal_ag_type=pal_ag_type,pal_wat_dem=pal_wat_dem,pal_HDDCDD=pal_HDDCDD, pal_16 = pal_16, elec_tech_colors = elec_tech_colors, elec_renew_colors = elec_renew_colors,
building_colors = building_colors, trn_fuel_colors = trn_fuel_colors, enduse_fuel_numbered = enduse_fuel_numbered,
enduse_colors = enduse_colors, pal_pri_ene = pal_pri_ene, pal_pri_fuelcost = pal_pri_fuelcost,
pal_emiss_sector = pal_emiss_sector, pal_landuse = pal_landuse, pal_hydrogen = pal_hydrogen,
pal_refliq = pal_refliq, emiss_by_enduse_colors = emiss_by_enduse_colors, biouse_colors = biouse_colors,
pal_Basic = pal_Basic, pal_Gas = pal_Gas, pal_elec_subsec = pal_elec_subsec,
pal_elec_finalNrgFuel = pal_elec_finalNrgFuel, pal_elec_techs = pal_elec_techs, pal_elec_sec = pal_elec_sec,
pal_finalNrg_sec = pal_finalNrg_sec, pal_pri_ene = pal_pri_ene, pal_elec_tech_colors = pal_elec_tech_colors,
pal_hot = pal_hot,pal_wet=pal_wet, pal_div=pal_div,pal_green=pal_green))
}
metis.colors()[1]
metis.colors()[2]
metis.colors()
metis.colors("pal_hot")
metis.colors <- function(palx=NULL) {
NULL->pie
# GCAM Color Palettes
# HDDCDD Palette for Cooling and Heating
pal_HDDCDD<-c("CDD"="cornflowerblue","HDD"="coral2")
# General purpose color scheme where sequentail colors do not clash too much
pal_16 <- rep(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#333333", "#FFCC00", "#CC6600", "#006600", "#3333CC", "#CC0033", "#0099CC", "#999966"),100)
# Color scheme for electricity generation by aggregate fuel
elec_tech_colors <- c(`a Coal` = "#a0237c", `b Coal w/CCS` = "#dab4c7", `c Gas` = "#25a9e0", `d Gas w/CCS` = "#84e7f9",
`e Oil` = "#d01c2a", `f Oil w/CCS` = "#f7988f", `g Biomass` = "#00931d", `h Biomass w/CCS` = "#88c892",
`i Nuclear` = "#ef8e27", `j Geothermal` = "#ad440c", `k Hydro` = "#fdfa28", `l Wind` = "#3d86f9",
`m Solar` = "#fdd67b", `n CHP` = "#507fab", `o Battery` = "#92a75d", `energy reduction` = "grey")
elec_renew_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
nuclear = "#ef8e27", hydro = "#fdfa28", `wind w/ backup` = "#3e85fd", `wind w/ storage` = "#9ec1fd",
`csp w/ backup` = "#ec931a", `csp w/ storage` = "#f5c88c", `pv w/ backup` = "#ffd125", `pv w/ storage` = "#ffe791",
`rooftop solar` = "#ff7a17", geothermal = "#aa440a", cogen = "#507fab", battery = "#92a75d",
`energy reduction` = "grey")
# Buildings colors by fuel
building_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
electricity = "#ef8e27", `trad biomass` = "#11d081")
# Transportation colors by fuel
trn_fuel_colors <- c(liquids = "#d01c2a", gas = "#25a9e0", coal = "#a0237c", biomass = "#00931d",
electricity = "#ef8e27", hydrogen = "#fffbac")
# Generic end-use color scheme by numbered fuel
enduse_fuel_numbered <- c(`1 liquids` = "#d01c2a", `2 gas` = "#25a9e0", `3 coal` = "#a0237c",
`4 biomass` = "#00931d", `5 electricity` = "#ef8e27", `6 hydrogen` = "#fffbac", `7 trad biomass` = "#11d081",
`8 district heat` = "#b14d38", feedstocks = "#ff7467", `energy reduction` = "grey")
# Color scheme for the aggregate final demands
enduse_colors <- c(building = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7", `energy reduction` = "grey")
# Primary energy colors including CCS
pal_pri_ene <- c(`a oil` = "#d01c2a", `a oil CCS` = "#f7988f", `b natural gas` = "#25a9e0", `b natural gas CCS` = "#84e7f9",
`c coal` = "#a0237c", `c coal CCS` = "#dab4c7", `d biomass` = "#00931d", `d biomass CCS` = "#88c892",
`e nuclear` = "#ef8e27", `f hydro` = "#fdfa28", `g wind` = "#3d86f9", `h solar` = "#fdd67b",
`i geothermal` = "#ad440c", `j traditional biomass` = "#11d081", `energy reduction` = "grey")
# Color scheme for primary fuel costs
pal_pri_fuelcost <- c(`regional oil` = "#d01c2a", `regional natural gas` = "#25a9e0", `regional coal` = "#a0237c",
`regional biomass` = "#00931d", nuclearFuelGenIII = "#ef8e27")
# Colors for emissions by aggregate sector
pal_emiss_sector <- c(`liquid systems` = "#d01c2a", `gas systems` = "#25a9e0", coal = "#a0237c",
`biomass systems` = "#00931d", electricity = "#ef8e27", hydrogen = "#fffbac", `N fertilizer` = "#11d081",
`district heat` = "#b14d38", building = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7")
# Aggregated (more that usual) land use
pal_landuse <- c(urban = "#000000", crops = "#ffd125", `pasture (grazed)` = "#aacf22", `forest (managed)` = "#41a67a",
biomass = "#00f629", `forest (unmanaged)` = "#938e15", shrubs = "#b14d00", `grass/other pasture` = "#ffd081",
desert = "#a7a7a7")
# And hydrogen even
pal_hydrogen <- c(gas = "#25a9e0", `gas w/CCS` = "#84e7f9", coal = "#a0237c", `coal w/CCS` = "#dab4c7",
biomass = "#00931d", `biomass w/CCS` = "#88c892", nuclear = "#ef8e27", `bulk electricity` = "#fdfa28",
wind = "#3d86f9", solar = "#fdd67b", `energy reduction` = "grey")
# Refined liquids
pal_refliq <- c(`conventional oil` = "#ab4500", `unconventional oil` = "#ff9593", coal = "#ff2600",
`coal w/CCS` = "#ff8d78", biomass = "#00931d", `biomass w/CCS` = "#728f72", gas = "#1633ff",
`energy reduction` = "grey")
# Color scheme for emissions by aggregate sector
emiss_by_enduse_colors <- c(buildings = "#facda4", industry = "#cef4d1", transportation = "#d0f6f7",
electricity = "#ea9219", cement = "#ff230e")
# Color scheme for biomass consumption by use
biouse_colors <- c(`direct buildings` = "#a8d8fe", industry = "#0080d4", electricity = "#ec931a",
refining = "#aa4a79", hydrogen = "#fffbac", `synthetic gas` = "#ff230e", `energy reduction` = "grey")
#------------------------------------------
# New Metis Color Schemes
#-------------------------------------------
# Creating Colors getcol = colorRampPalette(brewer.pal(9, 'RdGy')) values=getcol(9); values
# library(colorspace) pal<-choose_palette() pal(9)
# pie(rep(1,length(colx1)),label=names(colx1),col=colx1)
# Basic Colors
pal_Basic <- rep(c("red", "green3", "blue", "black", "magenta", "yellow", "cyan", "gray"),100)
# Gas Colors
pal_Gas <- c(`gas (CC CCS)` = "black", `gas (CT)` = "red", `gas (steam)` = "green3", `gas (CC)` = "blue",
"cyan", "magenta", "yellow", "gray")
pal_hot <- c('#ffffcc','#ffeda0','#fed976','#feb24c','#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026','black')
pal_wet <- c('#f7fbff','#deebf7','#c6dbef','#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b','black')
pal_green <- c('#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529','black')
pal_div <- c('#67001f','#b2182b','#d6604d','#f4a582','#fddbc7','#ffffff','#e0e0e0','#bababa','#878787','#4d4d4d','#1a1a1a')
pal_seq <- c('lemonchiffon1','burlywood1','orange1','red1','purple4','black')
# Color scheme for electricity generation by aggregate fuel
pal_elec_subsec <- c(coal = "#a0237c", gas = "#25a9e0", oil = "#d01c2a", biomass = "#00931d",
nuclear = "#ef8e27", geothermal = "#ad440c", hydro = "#fdfa28", wind = "#0000ff", solar = "#fdd67b",
`refined liquids` = "#000000", electricity = "lavender", other = "grey70", `gas (CC CCS)` = "#25c9e0",
`gas (CC)` = "#25a9e0", `gas (CT)` = "#25e9e0", `gas (steam)` = "greenyellow")
# Color scheme for final energy by fuel
pal_elec_finalNrgFuel <- c(`3 coal` = "#a0237c", `2 gas` = "#25a9e0", `4 biomass` = "#00931d",
`1 liquids` = "#000000", `5 electricity` = "lavender", `6 hydrogen` = "orange", "grey60")
pal_elec_techs <- c(nuclear = "#af8e27", Gen_III = "#af8e27", Gen_II_LWR = "#ef8e27", CSP = "#cdd67b",
PV = "#fdd67b", `biomass (IGCC CCS)` = "#00a31d", `biomass (IGCC)` = "#00c31d", `biomass (conv CCS)` = "#00e31d",
`biomass (conv)` = "#00f31d", `coal (IGCC CCS)` = "#c0237c", `coal (IGCC)` = "#f0237c", `coal (conv pul CCS)` = "#e0237c",
`coal (conv pul)` = "#a0237c", `gas (CC CCS)` = "#25c9e0", `gas (CC)` = "#25a9e0", `gas (CT)` = "#25e9e0",
`gas (steam)` = "greenyellow", hydro = "#fdfa28", `refined liquids` = "#000000", `refined liquids (CC CCS)` = "#000000",
`refined liquids (CC)` = "#000000", `refined liquids (CT)` = "#000000", `refined liquids (steam)` = "#000000",
wind = "#0000ff", "red", "green", geothermal = "gray40")
pal_elec_sec <- c(elect_td_bld = "#ff230e", elect_td_ind = "darkolivegreen4", elect_td_trn = "dodgerblue",
electricity = "#ea9219")
pal_finalNrg_sec <- c(building = "#facda4", `comm non-building` = "#ff230e", industry = "#cef4d1",
transportation = "#d0f6f7", trn_pass_road_bus = "purple",buildings = "#facda4", electricity="lightcoral",
`LUC Emission`="grey30",`LUC Absorption`="darkolivegreen4")
# Modified Original GCAM color scheme for Primary energy consumption Modified the 'Primary energy
# colors including CCS - pal_pri_ene' color scheme from color_scheme.R Changed hydro to current
# wind color(blue), switched solar to current hydro color(yellow) switched wind to current solar
# color (biege), switched gas & gas CCS too a lighter blue because hydro and gas were too similar
pal_pri_ene <- c(`a oil` = "#d01c2a", `a oil CCS` = "#f7988f", `b natural gas` = "darkslategray1",
`b natural gas CCS` = "darkslategray4", `c coal` = "gray60", `c coal CCS` = "gray20", `d biomass` = "#00931d",
`d biomass CCS` = "#88c892", `e nuclear` = "#ef8e27", `f hydro` = "#3d86f9", `g wind` = "#fdd67b",
`h solar` = "#fdfa28", `i geothermal` = "#ad440c", `j traditional biomass` = "#11d081", `energy reduction` = "black")
# Modified color scheme for elec Modified the 'Primary energy colors including CCS - pal_pri_ene'
# color scheme from color_scheme.R Changed hydro to current wind color(blue), switched solar to
# current hydro color(yellow) switched wind to current solar color (biege), switched gas & gas CCS
# too a lighter blue because hydro and gas were too similar switched coal to grays and changed
# energy reduction to black
pal_elec_tech_colors <- c(`a Coal` = "gray60", `b Coal w/CCS` = "gray20", `c Gas` = "darkslategray1",
`d Gas w/CCS` = "darkslategray4", `e Oil` = "#d01c2a", `f Oil w/CCS` = "#f7988f", `g Biomass` = "#00931d",
`h Biomass w/CCS` = "#88c892", `i Nuclear` = "#ef8e27", `j Geothermal` = "#ad440c", `k Hydro` = "#3d86f9",
`l Wind` = "#fdd67b", `m Solar` = "#fdfa28", `n CHP` = "#507fab", `o Battery` = "#92a75d",
`energy reduction` = "grey", Total = "black", Other = "black")
# Agriculture Production Type
pal_ag_type <- c(Forest = "darkgreen" , NonFoodDemand_Forest = "darkolivegreen1",
biomass = "grey50", Corn = "gold3" ,
FiberCrop = "gold4",  MiscCrop = "darkorange4", OilCrop = "gray20",
OtherGrain  = "indianred2",
PalmFruit = "firebrick3" ,  Rice = "steelblue2", Root_Tuber  = "lightslateblue", SugarCrop = "yellow2",
Wheat  = "burlywood", FodderGrass = "darkseagreen1",
FodderHerb = "darkseagreen4", Pasture = "goldenrod1",
UnmanagedLand = "black")
# Water Demand Sectors
pal_wat_dem <- c(municipal = "dodgerblue", mining = "grey75", livestock = "darkseagreen3",
industry = "gold2", electricity = "darkorange", agriculture = "darkolivegreen4")
pal_lu_type <- c(urban="indianred2",tundra="antiquewhite1",shrubs="lightslateblue",`rock and desert`="black",
pasture="goldenrod1",otherarable="darkorange4",grass="darkolivegreen1",forest="darkgreen",
crops="yellow2",biomass="grey50")
if(!is.null(palx)){
if(length(get(palx))>1){
a<-get(palx)
if(palx=="pal_Basic" | palx=="pal_16"){a<-a[1:(length(a)/100)]}
pie(rep(1,length(a)),label=names(a),col=a)
print(a)
}}
invisible(list(pal_lu_type=pal_lu_type,pal_ag_type=pal_ag_type,pal_wat_dem=pal_wat_dem,pal_HDDCDD=pal_HDDCDD, pal_16 = pal_16, elec_tech_colors = elec_tech_colors, elec_renew_colors = elec_renew_colors,
building_colors = building_colors, trn_fuel_colors = trn_fuel_colors, enduse_fuel_numbered = enduse_fuel_numbered,
enduse_colors = enduse_colors, pal_pri_ene = pal_pri_ene, pal_pri_fuelcost = pal_pri_fuelcost,
pal_emiss_sector = pal_emiss_sector, pal_landuse = pal_landuse, pal_hydrogen = pal_hydrogen,
pal_refliq = pal_refliq, emiss_by_enduse_colors = emiss_by_enduse_colors, biouse_colors = biouse_colors,
pal_Basic = pal_Basic, pal_Gas = pal_Gas, pal_elec_subsec = pal_elec_subsec,
pal_elec_finalNrgFuel = pal_elec_finalNrgFuel, pal_elec_techs = pal_elec_techs, pal_elec_sec = pal_elec_sec,
pal_finalNrg_sec = pal_finalNrg_sec, pal_pri_ene = pal_pri_ene, pal_elec_tech_colors = pal_elec_tech_colors,
pal_hot = pal_hot,pal_wet=pal_wet, pal_div=pal_div,pal_green=pal_green))
}
metis.colors("pal_hot")
metis.colors()
library(tibble)
library(dplyr)
tbl <- tribble (
~x,     ~value,
2010,   15,
2020,   20,
2030,   30
)
metis.chart(data=tbl,xData="x",yData="value",chartType = "line")
library(metis)
library(tibble)
library(dplyr)
tbl <- tribble (
~x,     ~value,
2010,   15,
2020,   20,
2030,   30
)
metis.chart(data=tbl,xData="x",yData="value",chartType = "line")
dev.tools::check()
devtools::check()
