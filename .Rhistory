rcropPx@data%>%dplyr::select(areaPrcnt),SIMPLIFY=FALSE))%>%
dplyr::bind_cols(rcropPx@data%>%dplyr::select( subRegCol))%>%tibble::as_tibble();
head(x)
range(x)
polyDatax<-x%>%dplyr::group_by(.dots = list( subRegCol))%>% dplyr::summarise_all(dplyr::funs(round(sum(.,na.rm=T),2)))
head(polyDatax)
x[1:5,1:5]
names(x)[1]
nrow(x)
head(subRegCol)
x$NOM_ZH
x[1:5,1:5]
range(x[,1])
y<-x[,c(1,ncol(x))]
head(y)
y%>%arrange(names(y)[1])
y[order(y$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
y[order(-y$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
gridCropped
y1<-gridCropped[,3]
head(y1)
order(-y1)
y1[order(-y1),]
y[order(-y$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
polyDatax
y2<-polyDatax[,c(1,ncol(polyDatax))]
y2
y2<-polyDatax[,c(1,2)]
y2[order(-y2$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
y[order(-y$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
x<-data.frame(mapply(`*`,rcropPx@data%>%
dplyr::select(names(rcropPx@data)[!names(rcropPx@data) %in% c(
names(shape),"lat","lon","area","subRegAreaSum","areaPrcnt")]),
rcropPx@data%>%dplyr::select(areaPrcnt),SIMPLIFY=FALSE))%>%
dplyr::bind_cols(rcropPx@data%>%dplyr::select( subRegCol))%>%tibble::as_tibble();
polyDatax<-x%>%dplyr::group_by(.dots = list( subRegCol))%>% dplyr::summarise_all(dplyr::funs(round(mean(.,na.rm=T),2)))
y2<-polyDatax[,c(1,2)]
y2[order(-y2$gfdlXDASHXesm2m_rcp2p6_NA_NA_gfdlXDASHXesm2mXUNDERXrcp2p6XUNDERXNAXUNDERXNA_xanthosRunoff_RunoffXSPACEXXLPARENTHXmmXRLPARENTHX_depth_1950_palXUNDERXwet_Runoff),]
#grid_i=gridMetis
#grid_i=paste(getwd(),"/outputs/Grids/gridMetisXanthos.RData",sep = "")
boundaryRegionsSelect_i="Colombia"
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = "")
subRegShpFile_i = paste("colombiaLocalBasin",sep= "")
subRegCol_i = "NOM_ZH"
subRegType_i = "subBasin"
nameAppend_i = "_local"
aggType_i = NULL
paramsSelect_i= "All" #"demeterLandUse"
sqliteUSE_i = T
sqliteDBNamePath_i = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
grid2polyX<-metis.grid2poly(#grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i,
sqliteUSE = sqliteUSE_i,
sqliteDBNamePath = sqliteDBNamePath_i)
#gridCroppedCompiled <- tibble()
grid_fnameComp<-paste(dirOutputs, "/Grids/gridCropped_",boundaryRegionsSelect,"_",subRegType,nameAppend,".csv", sep = "")
grid_fnameComp
list.files(paste(dirOutputs, "/Grids/temp", sep = ""))
for (file_i in list.files(paste(dirOutputs, "/Grids/temp", sep = ""))){
print(paste("Compiling grid file",file_i,"...",sep=""))
gridTemp <- data.table::fread(paste(dirOutputs, "/Grids/temp/",file_i, sep = ""))
data.table::fwrite(gridTemp,
file = grid_fnameComp,row.names = F, append=T)
print(paste("Subregional grid data files written to: ",grid_fnameComp, sep = ""))
}
print(paste("Subregional grid data files written to: ",grid_fnameComp, sep = ""))
polygonDataTables_i=paste(getwd(),"/outputs/Maps/Tables/subReg_origData_byClass_Colombia_subBasin_origDownscaled_local.csv",sep="")
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario); unique(a$param); unique(a$x)
for(param_i in unique(a$param)){print(param_i);print(unique((a%>%dplyr::filter(param==param_i))$x))}
gridDataTables_i=paste(getwd(),"/outputs/Grids/gridCropped_Colombia_subBasin_local.csv",sep="")
b<-read.csv(gridDataTables_i); head(b); unique(b$scenario); unique(b$param); unique(b$x)
for(param_i in unique(b$param)){print(param_i);print(unique((b%>%dplyr::filter(param==param_i))$x))}
xRange_i= seq(from=2000,to=2020,by=5)
legendPosition_i=c("LEFT","bottom")
legendOutsideSingle_i=T
animateOn_i=T
delay_i=100
scenRef_i="Eg1"
scaleRange_i=data.frame(param=c("griddedScarcity"),
maxScale=c(1),
minScale=c(0))
paramsSelect_i = c("All")
indvScenarios_i = "Eg1_NA_NA"
boundaryRegShape_i = NULL
boundaryRegShpFolder_i=paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i=paste("ne_10m_admin_0_countries",sep="")
boundaryRegCol_i="NAME"
boundaryRegionsSelect_i="Colombia"
subRegShape_i = NULL
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = "")
subRegShpFile_i = paste("colombiaLocalBasin",sep= "")
subRegCol_i = "NOM_ZH"
subRegType_i = "subBasin"
nameAppend_i = "_local"
c1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = ""),
layer="colombiaLocalBasin",use_iconv=T,encoding='UTF-8')
metis.mapProcess(polygonDataTables=polygonDataTables_i,
#gridDataTables=gridDataTables_i,
xRange=xRange_i,
boundaryRegShape=boundaryRegShape_i,
boundaryRegShpFolder=boundaryRegShpFolder_i,
boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendOutsideSingle=legendOutsideSingle_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 3,
figWidth=6,
figHeight=7,
paramsSelect = paramsSelect_i,
scaleRange = scaleRange_i,
indvScenarios=indvScenarios_i,
GCMRCPSSPPol=T,
multiFacetCols="scenarioRCP",
multiFacetRows="scenarioGCM",
legendOutsideMulti=T,
legendPositionMulti=NULL,
legendTitleSizeMulti=NULL,
legendTextSizeAnim=NULL,
legendTextSizeMulti=NULL,
refGCM="gfdl-esm2m",
refRCP="rcp2p6",
chosenRefMeanYears=c(2000:2020),
facetLabelSizeMulti=3)
tethysScenarios<-character()
tethysGCMRCPs<-tibble()
tethysYears<-numeric()
tethysFiles
tethysFile_i
tethysFiles->tethysFiles[1]
tethysFiles_i->tethysFiles[1]
tethysFile_i<-tethysFiles[1]
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(tethysScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridx<-gridx%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class),
param=dplyr::case_when(grepl("nonag",class)~paste(param,"_nonAg",sep=""),
grepl("total",class)~paste(param,"_total",sep=""),
TRUE~param))
head(gridx)
unique(gridx$param)
tethysFile_i<-"total"
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
tethysFile_i
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
tethysFolder
gridx<-data.table::fread(paste(tethysFolder,tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
tethysFiles
tethysFile_i<-"wdtotal"
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(tethysScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridx<-gridx%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class),
param=dplyr::case_when(grepl("nonag",class)~paste(param,"_nonAg",sep=""),
grepl("total",class)~paste(param,"_total",sep=""),
TRUE~param))
head(gridx)
unique(gridx$param)
gridx<-gridx%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class),
param=dplyr::case_when(grepl("nonag",class)~paste(param,"_nonAg",sep=""),
grepl("Total",class)~paste(param,"_total",sep=""),
TRUE~param))
unique(gridx$param)
?grepl
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(tethysScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridx<-gridx%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class,ignore.case = T)~"Domestic",
grepl("elec",class,ignore.case = T)~"Electric",
grepl("irr",class,ignore.case = T)~"Irrigation",
grepl("liv",class,ignore.case = T)~"Livestock",
grepl("mfg",class,ignore.case = T)~"Manufacturing",
grepl("min",class,ignore.case = T)~"Mining",
grepl("nonag",class,ignore.case = T)~"Non Agriculture",
grepl("total",class,ignore.case = T)~"Total",
TRUE~class),
param=dplyr::case_when(grepl("nonag",class,ignore.case = T)~paste(param,"_nonAg",sep=""),
grepl("total",class,ignore.case = T)~paste(param,"_total",sep=""),
TRUE~param))
unique(gridx$param)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
for(package_i in c("tibble","dplyr","rgdal","tmap")){
if(package_i %in% rownames(installed.packages()) == F){install.packages(package_i)}
library(package_i,character.only = TRUE)}
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=1
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisXanthos.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
gridMetis<-metis.prepGrid(
reReadData=reReadData,
demeterFolder=demeterFolder,
demeterScenario=demeterScenario,
demeterTimesteps=demeterTimesteps,
demeterUnits=demeterUnits,
tethysFolder=tethysFolder,
tethysScenario=tethysScenario,
copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
tethysFiles=tethysFiles,
tethysUnits=tethysUnits,
xanthosFolder=xanthosFolder,
xanthosFiles=xanthosFiles,
xanthosCoordinatesPath=xanthosCoordinatesPath,
xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
spanLowess=spanLowess,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
#grid_i=gridMetis
#grid_i=paste(getwd(),"/outputs/Grids/gridMetisXanthos.RData",sep = "")
boundaryRegionsSelect_i="Colombia"
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = "")
subRegShpFile_i = paste("colombiaLocalBasin",sep= "")
subRegCol_i = "NOM_ZH"
subRegType_i = "subBasin"
nameAppend_i = "_local"
aggType_i = NULL
paramsSelect_i= "All" #"demeterLandUse"
sqliteUSE_i = T
sqliteDBNamePath_i = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
grid2polyX<-metis.grid2poly(#grid=grid_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType = subRegType_i,
aggType=aggType_i,
nameAppend=nameAppend_i,
paramsSelect = paramsSelect_i,
sqliteUSE = sqliteUSE_i,
sqliteDBNamePath = sqliteDBNamePath_i)
polygonDataTables_i=paste(getwd(),"/outputs/Maps/Tables/subReg_origData_byClass_Colombia_subBasin_origDownscaled_local.csv",sep="")
a<-read.csv(polygonDataTables_i); head(a); unique(a$scenario); unique(a$param); unique(a$x)
for(param_i in unique(a$param)){print(param_i);print(unique((a%>%dplyr::filter(param==param_i))$x))}
gridDataTables_i=paste(getwd(),"/outputs/Grids/gridCropped_Colombia_subBasin_local.csv",sep="")
b<-read.csv(gridDataTables_i); head(b); unique(b$scenario); unique(b$param); unique(b$x)
for(param_i in unique(b$param)){print(param_i);print(unique((b%>%dplyr::filter(param==param_i))$x))}
xRange_i= seq(from=2000,to=2020,by=5)
legendPosition_i=c("LEFT","bottom")
legendOutsideSingle_i=T
animateOn_i=T
delay_i=100
scenRef_i="Eg1"
scaleRange_i=data.frame(param=c("griddedScarcity"),
maxScale=c(1),
minScale=c(0))
paramsSelect_i = c("All")
indvScenarios_i = "Eg1_NA_NA"
boundaryRegShape_i = NULL
boundaryRegShpFolder_i=paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i=paste("ne_10m_admin_0_countries",sep="")
boundaryRegCol_i="NAME"
boundaryRegionsSelect_i="Colombia"
subRegShape_i = NULL
subRegShpFolder_i = paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = "")
subRegShpFile_i = paste("colombiaLocalBasin",sep= "")
subRegCol_i = "NOM_ZH"
subRegType_i = "subBasin"
nameAppend_i = "_local"
c1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/admin_Colombia",sep = ""),
layer="colombiaLocalBasin",use_iconv=T,encoding='UTF-8')
metis.mapProcess(polygonDataTables=polygonDataTables_i,
#gridDataTables=gridDataTables_i,
xRange=xRange_i,
boundaryRegShape=boundaryRegShape_i,
boundaryRegShpFolder=boundaryRegShpFolder_i,
boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendOutsideSingle=legendOutsideSingle_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 3,
figWidth=6,
figHeight=7,
paramsSelect = paramsSelect_i,
scaleRange = scaleRange_i,
indvScenarios=indvScenarios_i,
GCMRCPSSPPol=T,
multiFacetCols="scenarioRCP",
multiFacetRows="scenarioGCM",
legendOutsideMulti=T,
legendPositionMulti=NULL,
legendTitleSizeMulti=NULL,
legendTextSizeAnim=NULL,
legendTextSizeMulti=NULL,
refGCM="gfdl-esm2m",
refRCP="rcp2p6",
chosenRefMeanYears=c(2000:2020),
facetLabelSizeMulti=3)
metis.mapProcess(polygonDataTables=polygonDataTables_i,
#gridDataTables=gridDataTables_i,
xRange=xRange_i,
boundaryRegShape=boundaryRegShape_i,
boundaryRegShpFolder=boundaryRegShpFolder_i,
boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendOutsideSingle=legendOutsideSingle_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 3,
figWidth=6,
figHeight=7,
paramsSelect = paramsSelect_i,
scaleRange = scaleRange_i,
#indvScenarios=indvScenarios_i,
GCMRCPSSPPol=T,
multiFacetCols="scenarioRCP",
multiFacetRows="scenarioGCM",
legendOutsideMulti=T,
legendPositionMulti=NULL,
legendTitleSizeMulti=NULL,
legendTextSizeAnim=NULL,
legendTextSizeMulti=NULL,
refGCM="gfdl-esm2m",
refRCP="rcp2p6",
chosenRefMeanYears=c(2000:2020),
facetLabelSizeMulti=1.5)
library(metis)
devtools::check()
devtools::check()
library(metis)
library(metis)
devtools::check()
