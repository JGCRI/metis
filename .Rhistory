fname = paste(scenario_i,"_solOrig1_absolute_sankey",nameAppend,sep="")
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(fname)+theme_bw();g
printf(figure=g,fileName = fname, dir=dir)
#-------- Aggregated Demands
solFlows <- sol %>%
dplyr::select(!!c("sector",names(sol)[names(sol) %in% c("totalDemands",addedColumns)]))
df <- solFlows;df
dfx <- df %>%
tidyr::gather(-c("sector",addedColumns[addedColumns %in% names(df_Mn)]),key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::filter(value>0) %>%
unique() %>%
dplyr::arrange(sectorFrom); dfx
fname = paste(scenario_i,"_solOrig1_absolute_sankey_AggDemands",nameAppend,sep="")
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(fname)+theme_bw();g
printf(figure=g,fileName = fname, dir=dir)
#---------------------
# sol_Calibrated1
#---------------------
if(nrow(sol_Calibrated1)>0){
# ioTable normalized
sol<-sol_list$ioTblImports_Calibrated1 %>%
dplyr::filter(scenario==scenario_i)
df_Mn<-sol %>%
#dplyr::select (-processed,processed) %>% # to place processed last for following function
dplyr::mutate_at(vars(-c("sector",addedColumns[addedColumns %in% names(sol)])),dplyr::funs(./totalDemands)); df_Mn
solx <- sol %>%
tidyr::gather(-c("sector",addedColumns[addedColumns %in% names(df_Mn)]),key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom)  %>%
dplyr::filter(!is.nan(value),value!=0, !is.na(value));
df_Mnx <- df_Mn %>%
tidyr::gather(-c("sector",addedColumns[addedColumns %in% names(df_Mn)]),key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom) %>%
dplyr::filter(!is.nan(value),value!=0, !is.na(value)); df_Mnx
# ioTable normalized bubbles
fname = paste(scenario_i,"_solCalibrated1_norm_bubble",nameAppend,sep="")
ga <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=fname) +
geom_point(aes(col=value, size=value)) +
geom_text(aes(label=round(value,2)),col="red") +
coord_fixed(ratio = 1) +
scale_x_discrete(limits = c(unique(c(df_Mnx$sectorTo))[!unique(c(df_Mnx$sectorTo)) %in% "totalDemands"],"totalDemands"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(x~subRegion); ga
printf(figure=ga,fileName = fname, dir=dir)
# ioTable normalized values
fname = paste(scenario_i,"_solCalibrated1_norm_values",nameAppend,sep="")
gb <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title = fname) +
scale_x_discrete(limits = c(unique(c(df_Mnx$sectorTo))[!unique(c(df_Mnx$sectorTo)) %in% "totalDemands"],"totalDemands"), expand = c(0.1,0.1)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gb
printf(figure=gb,fileName = fname, dir=dir)
# ioTable absolute values
fname = paste(scenario_i,"_solCalibrated1_absolute_values",nameAppend,sep="")
gc <- ggplot(solx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle = "test",
title = fname) +
scale_x_discrete(limits = c(unique(c(df_Mnx$sectorTo))[!unique(c(df_Mnx$sectorTo)) %in% "totalDemands"],"totalDemands"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gc
printf(figure=gc,fileName = fname, dir=dir)
#-----------------
# Sankey
#--------------
solFlows <- sol %>%
dplyr::select(-!!names(sol)[names(sol) %in% c("totalDemands","localTotal","otherTotal")])
df <- solFlows;df
dfx <- df %>%
tidyr::gather(-c("sector",addedColumns[addedColumns %in% names(df_Mn)]),key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::filter(value>0) %>%
unique() %>%
dplyr::arrange(sectorFrom); dfx
fname = paste(scenario_i,"_solCalibrated1_absolute_sankey",nameAppend,sep="")
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(fname)+theme_bw();g
printf(figure=g,fileName = fname, dir=dir)
#-------- Aggregated Demands
solFlows <- sol %>%
dplyr::select(!!c("sector",names(sol)[names(sol) %in% c("totalDemands",addedColumns)]))
df <- solFlows;df
dfx <- df %>%
tidyr::gather(-c("sector",addedColumns[addedColumns %in% names(df_Mn)]),key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::filter(value>0) %>%
unique() %>%
dplyr::arrange(sectorFrom); dfx
fname = paste(scenario_i,"_solOrig1_absolute_sankey_AggDemands",nameAppend,sep="")
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(fname)+theme_bw();g
printf(figure=g,fileName = fname, dir=dir)
} # If sol_Calibrated1 is null
} # For Scenario i
return(sol_list)
} # Close Function
io1<-metis.io(A0=A0,D0=D0, Cap0=Cap0, Import0=Import0,nameAppend = "_smallEg1"); io1$sol_Orig1
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
if("ggplot2" %in% rownames(installed.packages()) == F){install.packages("ggplot2")}
library(ggplot2)
#-------------
# Workflow for Metis I/O Analysis
# Small Example
Z0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           50,
"E"     ,    20,          0);Z0
# Small Example
ZPartial=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           50,
"E"     ,    40,          0);ZPartial
A0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.23,
"E"     ,    0.13,          0);A0
D0=tibble::tribble( # Initial total demand
~sector, ~other, ~industry, ~domestic,
"W",    50,     25, 25,
"E",    100, 50, 50
);D0
Cap0=tibble::tribble( # Initial total demand
~sector, ~cap,
"W",    100,
"E",    50
);Cap0
Import0=tibble::tribble( # Initial total demand
~sector, ~import,
"W",    10,
"E",    0
);Import0
X0=tibble::tribble( # Initial total demand
~sector, ~processed,
"W",    140,
"E",    220
);X0
DNew=tibble::tribble( # Initial processed demand
~sector, ~other,
"W",    150,
"E",    250
);DNew
ANew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.4,
"E"     ,    0.2,          0);ANew
ZNew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           500,
"E"     ,    20,          0);ZNew
XNew=tibble::tribble( # Initial processed demand
~sector, ~processed,
"W",    300,
"E",    500
);XNew
io1<-metis.io(A0=A0,D0=D0, Cap0=Cap0, Import0=Import0,nameAppend = "_smallEg1"); io1$sol_Orig1
library(alluvium)
library(ggalluvium)
ggalluvium
library("ggalluvium")
if("ggalluvial" %in% rownames(installed.packages()) == F){install.packages("ggaaluvial")}
library(ggalluvial)
io1<-metis.io(A0=A0,D0=D0, Cap0=Cap0, Import0=Import0,nameAppend = "_smallEg1"); io1$sol_Orig1
?tmap
library(tmap)
?tmap
?tm_fill
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#---------------
#  Polygons
#----------------
NE0<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_0_countries",use_iconv=T,encoding='UTF-8')
data(World)
NE1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_1_states_provinces",use_iconv=T,encoding='UTF-8')
hydrobasinsLev3<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/subbasin_hydrobasin",sep=""),
layer="hydrobasins_level_3",use_iconv=T,encoding='UTF-8')
GCAMBasins<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/basin_GCAM",sep=""),
layer="Global235_CLM_final_5arcmin_multipart",use_iconv=T,encoding='UTF-8')
#metis.map(GCAMBasins,fillColumn = "basin_name",facetsON = F,printFig = F)
projX<-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
NE0<-spTransform(NE0,CRS(projX))
NE1<-spTransform(NE1,CRS(projX))
hydrobasinsLev3<-spTransform(hydrobasinsLev3,CRS(projX))
GCAMBasins<-spTransform(GCAMBasins,CRS(projX))
# Check Maps
NE0crop<-NE0[NE0$NAME=="Argentina",]
NE0crop@data<-droplevels(NE0crop@data)
plot(NE0crop)
hydrobasinsLev3Crop<-raster::crop(hydrobasinsLev3,NE0crop)
hydrobasinsLev3Crop@data<-droplevels(hydrobasinsLev3Crop@data)
head(hydrobasinsLev3Crop@data)
Argentina2Basins<-hydrobasinsLev3Crop[hydrobasinsLev3Crop$HYBAS_ID %in% c(6050933820,6050018850,6050808660),]
Argentina2Basins@data<-droplevels(Argentina2Basins@data)
qtm(Argentina2Basins,fill="HYBAS_ID",labels=T)
# Check Bermejo
ProvinciasCoirco<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefiles",sep=""),
layer="ProvinciasCoirco",use_iconv=T,encoding='UTF-8')
head(ProvinciasCoirco@data)
head(ProvinciasCoirco@data); names(ProvinciasCoirco@data)
qtm(ProvinciasCoirco,fill="JURISDICCI",labels=T)
plot(ProvinciasCoirco)
qtm(ProvinciasCoirco,fill="JURISDICCI",labels=T)
?qtm
qtm(ProvinciasCoirco,fill="JURISDICCI",text= "JURISDICCI")
Subcuencas<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefiles",sep=""),
layer="Subcuencas",use_iconv=T,encoding='UTF-8')
head(Subcuencas@data); names(Subcuencas@data)
qtm(Subcuencas,fill="JURISDICCI",text= "JURISDICCI")
qtm(Subcuencas,fill="cuenca")
plot(Subcuencas)
qtm(Subcuencas,fill="cuenca")
projX<-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
ProvinciasCoirco<-spTransform(ProvinciasCoirco,CRS(projX))
Subcuencas<-spTransform(Subcuencas,CRS(projX))
qtm(ProvinciasCoirco,line="JURISDICCI",lin.col= "red") +
qtm(Subcuencas,line="cuenca",lin.col= "blue")
qtm(ProvinciasCoirco,lines.col= "red") +
qtm(Subcuencas,lines.col= "blue")
themeMain <- tm_shape(ProvinciasCoirco) +
tm_borders("grey10") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02)) +
tm_polygons("grey95") + tm_layout(frame=F)
themeMain
tmA<-  themeMain + tm_shape(Subcuencas) + tm_polygons("yellow"); tmA
tmAL <- tmA +    tm_text(colName, size=labelTextSize, col="black"); tmAL
labelTextSize = 2
colName="cuenca"
tmA<-  themeMain + tm_shape(Subcuencas) + tm_polygons("yellow"); tmA
tmAL <- tmA +    tm_text(colName, size=labelTextSize, col="black"); tmAL
themeMain <- tm_shape(ProvinciasCoirco) +
tm_borders("grey10") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02)) +
tm_polygons("grey95") + tm_layout(frame=F) +
tm_text("JURISDICCI", size=0.7, col="grey10"); themeMain
tmA<-  themeMain + tm_shape(Subcuencas) + tm_polygons("yellow", alpha=0.5); tmA
tmA<-  themeMain + tm_shape(Subcuencas) + tm_polygons("yellow", alpha=0.2); tmA
tmA<-  themeMain + tm_shape(Subcuencas) + tm_polygons("yellow", alpha=0.2) +
tm_borders("red"); tmA
tmA<-  themeMain +
tm_shape(Subcuencas) +
tm_polygons("yellow", alpha=0.2, col="red"); tmA
?tm_polygon
library(tmap)
?tm_polygons
tmA<-  themeMain +
tm_shape(Subcuencas) +
tm_borders("red")
tmA<-  themeMain +
tm_shape(Subcuencas) +
tm_borders("red") +
tm_polygons("yellow", alpha=0.2); tmA
tmAL <- tmA +    tm_text(colName, size=1.5, col="red"); tmAL
tmAL <- tmA +    tm_text(colName, size=0.5, col="red"); tmAL
coircoProvinceCropped <- raster::crop(Subcuencas, ProvinciasCoirco)
coircoProvinceCropped <- raster::crop(ProvinciasCoirco,Subcuencas)
plot(coircoProvinceCropped)
head(coircoProvinceCropped@data)
coircoProvinceCropped <- raster::mask(ProvinciasCoirco,Subcuencas); coircoProvinceCropped; plot(coircoProvinceCropped)
coircoProvinceCropped <- raster::clip(ProvinciasCoirco,Subcuencas); coircoProvinceCropped; plot(coircoProvinceCropped)
coircoProvinceCropped <- raster::intersect(ProvinciasCoirco,Subcuencas); coircoProvinceCropped; plot(coircoProvinceCropped)
coircoProvinceCropped <- intersect(ProvinciasCoirco,Subcuencas); coircoProvinceCropped; plot(coircoProvinceCropped)
coircoProvinceCropped <- intersect(Subcuencas,ProvinciasCoirco); coircoProvinceCropped; plot(coircoProvinceCropped)
coircoProvinceCropped <- raster::crop(ProvinciasCoirco,Subcuencas); coircoProvinceCropped; plot(coircoProvinceCropped)
head(coircoProvinceCropped@data); plot(coircoProvinceCropped)
tmAL
coircoProvinceCropped <- raster::crop(ProvinciasCoirco,Subcuencas);
head(coircoProvinceCropped@data); plot(coircoProvinceCropped)
tmAL
coircoProvinceCropped <- raster::intersect(ProvinciasCoirco,Subcuencas);
coircoProvinceCropped <- gIntersects(ProvinciasCoirco,Subcuencas, byid = T);
head(coircoProvinceCropped@data); plot(coircoProvinceCropped)
coircoProvinceCropped
coircoProvinceCropped <- raster::intersect(ProvinciasCoirco,Subcuencas, byid = T);
coircoProvinceCropped <- raster::intersect(ProvinciasCoirco,Subcuencas);
foldername="COIRCOSubCuencas"
widthX = 13; heightX = 10
tmap_save(tmA, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/ArgentinaBermejoColorado.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmA, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/ArgentinaBermejoColorado.png", sep = ""),width = widthX, height = heightX, units = "in")
dirOutputs=paste(getwd(),"/outputs",sep="")
dirOutputs
foldername="COIRCOSubCuencas"
widthX = 13; heightX = 10
tmap_save(tmA, filename = paste(getwd(), "/Maps/Boundaries/",folderName,"/ArgentinaBermejoColorado.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmA, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/ArgentinaBermejoColorado.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmAL, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/ArgentinaBermejoColorado_Labels.png", sep = ""),width = widthX, height = heightX, units = "in")
dirOutputs=paste(getwd(),"/outputs",sep="")
folderName="COIRCOSubCuencas"
widthX = 13; heightX = 10
tmap_save(themeMain, filename = paste(getwd(), "/Maps/Boundaries/",folderName,"/ProvinciasCoirco.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmA, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/Subcuencas.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmAL, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/SubcuencasLabels.png", sep = ""),width = widthX, height = heightX, units = "in")
themeMain
dirOutputs=paste(getwd(),"/outputs",sep="")
folderName="COIRCOSubCuencas"
if (!dir.exists(dirOutputs)){dir.create(dirOutputs)}
if (!dir.exists(paste(dirOutputs, "/Maps", sep = ""))){dir.create(paste(dirOutputs, "/Maps", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Maps/Boundaries", sep = ""))){dir.create(paste(dirOutputs, "/Maps/Boundaries", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Maps/Boundaries/",folderName, sep = ""))){dir.create(paste(dirOutputs, "/Maps/Boundaries/",folderName,sep = ""))}
widthX = 13; heightX = 10
tmap_save(themeMain, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/ProvinciasCoirco.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmA, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/Subcuencas.png", sep = ""),width = widthX, height = heightX, units = "in")
tmap_save(tmAL, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/SubcuencasLabels.png", sep = ""),width = widthX, height = heightX, units = "in")
themeMain <- tm_shape(ProvinciasCoirco) +
tm_borders("grey10") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02)) +
tm_polygons("grey95") + tm_layout(frame=F) +
tm_text("JURISDICCI", size=0.7, col="grey10"); themeMain
tmA<-  themeMain +
tm_shape(Subcuencas) +
tm_borders("red") +
tm_polygons("yellow", alpha=0.2); tmA
tmAL <- tmA +    tm_text(colName, size=0.7, col="red");
tmAL
dirOutputs=paste(getwd(),"/outputs",sep="")
folderName="COIRCOSubCuencas"
if (!dir.exists(dirOutputs)){dir.create(dirOutputs)}
if (!dir.exists(paste(dirOutputs, "/Maps", sep = ""))){dir.create(paste(dirOutputs, "/Maps", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Maps/Boundaries", sep = ""))){dir.create(paste(dirOutputs, "/Maps/Boundaries", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Maps/Boundaries/",folderName, sep = ""))){dir.create(paste(dirOutputs, "/Maps/Boundaries/",folderName,sep = ""))}
widthX = 13; heightX = 10
tmap_save(tmAL, filename = paste(dirOutputs, "/Maps/Boundaries/",folderName,"/SubcuencasLabels.png", sep = ""),width = widthX, height = heightX, units = "in")
DEPARTAMENTOS-COREBE<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefilesCOREBE",sep=""),
layer="DEPARTAMENTOS-COREBE",use_iconv=T,encoding='UTF-8')
head(DEPARTAMENTOS-COREBE@data); names(DEPARTAMENTOS-COREBE@data)
DEPARTAMENTOS_COREBE<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefilesCOREBE",sep=""),
layer="DEPARTAMENTOS_COREBE",use_iconv=T,encoding='UTF_8')
Cuenca_Bermejo_Total<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefilesCOREBE",sep=""),
layer="Cuenca_Bermejo_Total",use_iconv=T,encoding='UTF-8')
DEPARTAMENTOS_COREBE<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefilesCOREBE",sep=""),
layer="DEPARTAMENTOS_COREBE",use_iconv=T)
head(DEPARTAMENTOS_COREBE@data); names(DEPARTAMENTOS_COREBE@data)
qtm(DEPARTAMENTOS_COREBE,fill="FNA",text= "JURISDICCI")
qtm(DEPARTAMENTOS_COREBE,fill="FNA")
plot(DEPARTAMENTOS_COREBE)
Cuenca_Bermejo_Total<-readOGR(dsn=paste("D:/Projects/003b_IDBLAC_Argentina/Data/shapefilesCOREBE",sep=""),
layer="Cuenca_Bermejo_Total",use_iconv=T,encoding='UTF-8')
head(Cuenca_Bermejo_Total@data); names(Cuenca_Bermejo_Total@data)
qtm(Cuenca_Bermejo_Total,fill="Descriptio")
plot(Cuenca_Bermejo_Total)
tmA<-  themeMain +
tm_shape(Cuenca_Bermejo_Total) +
tm_borders("red") +
tm_polygons("yellow", alpha=0.2); tmA
tmAL <- tmA +    tm_text("Descriptio", size=0.7, col="red");
themeMain <- tm_shape(DEPARTAMENTOS_COREBE) +
tm_borders("grey10") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02)) +
tm_polygons("grey95") + tm_layout(frame=F) +
tm_text("FNA", size=0.7, col="grey10"); themeMain
tmA<-  themeMain +
tm_shape(Cuenca_Bermejo_Total) +
tm_borders("red") +
tm_polygons("yellow", alpha=0.2); tmA
tmAL <- tmA +    tm_text("Descriptio", size=0.7, col="red");
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
if("ggplot2" %in% rownames(installed.packages()) == F){install.packages("ggplot2")}
library(ggplot2)
if("ggalluvial" %in% rownames(installed.packages()) == F){install.packages("ggaaluvial")}
library(ggalluvial)
#-------------
# Workflow for Metis I/O Analysis
# Small Example
Z0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           50,
"E"     ,    20,          0);Z0
# Small Example
ZPartial=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           50,
"E"     ,    40,          0);ZPartial
A0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.23,
"E"     ,    0.13,          0);A0
D0=tibble::tribble( # Initial total demand
~sector, ~other, ~industry, ~domestic,
"W",    50,     25, 25,
"E",    100, 50, 50
);D0
Cap0=tibble::tribble( # Initial total demand
~sector, ~cap,
"W",    100,
"E",    50
);Cap0
Import0=tibble::tribble( # Initial total demand
~sector, ~import,
"W",    10,
"E",    0
);Import0
X0=tibble::tribble( # Initial total demand
~sector, ~processed,
"W",    140,
"E",    220
);X0
DNew=tibble::tribble( # Initial processed demand
~sector, ~other,
"W",    150,
"E",    250
);DNew
ANew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.4,
"E"     ,    0.2,          0);ANew
ZNew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           500,
"E"     ,    20,          0);ZNew
XNew=tibble::tribble( # Initial processed demand
~sector, ~processed,
"W",    300,
"E",    500
);XNew
io1<-metis.io(A0=A0,D0=D0, Cap0=Cap0, Import0=Import0,nameAppend = "_smallEg1"); io1$sol_Orig1
library(metis)
