<<<<<<< HEAD
# China Production and Land Allocation
read.csv("~/China_landalloc.csv") -> ChLand
read.csv("~/China_agprod.csv") -> ChProd
read.csv("~/basinnames.csv") -> basins
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
df %>% separate(x, c(NA, "B"))
df
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df
df %>% separate(x, c(NA, "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c(, "B"))
df %>% separate(x, c('', "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df <- data.frame(x = c("a", "a b", "a b c", NA))
df
df %>% separate(x, c("a", "b"))
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, "stock", "price", -time)
stocks %>% gather("stock", "price", -time)
mini_iris <- iris[c(1, 51, 101), ]
mini_iris
gather(mini_iris, key = "flower_att", value = "measurement", -Species)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("/test.csv") -> waterdata
read.csv("./test.csv") -> waterdata
./
/
pwd
read.csv("./test.csv") -> waterdata
read.csv("./test.csv") -> waterdata
read.csv("test.csv") -> waterdata
getwd()
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
head(countryNE0@data)
head(countryGCAMBasin@data)
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("test.csv") -> test
read.csv("test.csv") -> test
read.csv("test.csv") -> test
library(metis)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("test.csv") -> test
read.csv("~/basinnames.csv") -> basins
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
getwd()
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "test5.csv")
write.csv(test3, "~/test5.csv")
test2
head(test2)
head(test)
test %>% left_join(basins, by="input") %>% select(-input) -> test2
head(test2)
test %>% left_join(basins, by="input")
test %>% left_join(basins, by="input") %>% select(-input)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% inner_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% inner_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
source('E:/Projects/NewAmerica/FromChris/test.R')
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>%  test2
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>%  test2
head(test2)
Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE)  -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(metis)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
polygonDataTablesCustom_i = c(paste(getwd(),"~/test5.csv",sep="")) #need defintion in help
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
head(test3)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
warnings()
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
getwd
getwd()
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/Withdrawal_bySource_all3.csv")
=====================================================================================
# China Production and Land Allocation
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/Withdrawal_bySource_all3.csv")
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
getwd()
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
head(test)
?write.csv
write.csv(test3, "~/Withdrawal_bySource_all3.csv",row.names=F)
write.csv(test3, "E:/Projects/metis/outputs/Withdrawal_bySource_all3.csv",row.names=F)
test4 <- test3 %>%
dplyr::mutate(x = gsub("X",""));
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",.));
test3
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3[["x"]]));
head(test4)
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3$x));
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test %>%
left_join(basins, by="input",keep=TRUE) %>% select(-input) %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
# China Production and Land Allocation
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
write.csv(test4, "E:/Projects/metis/outputs/Withdrawal_bySource_all3.csv",row.names=F)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
ttest
test2
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
head(test)
test %>% left_join(basins, by="input",keep=TRUE)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/MapsTables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/Maps_Tables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/Maps_Tables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
write.csv(test4, "E:/projects/NewAmerica/Maps_Tables/Withdrawal_bySource_all3.csv",row.names=F)
scaleRange=data.frame(param=c("griddedScarcity"),
maxScale=c(1),
minScale=c(0))
scaleRange
scaleRange_i=data.frame(param=c("waterWithdraw"),
maxScale=c(51),
minScale=c(0))
scaleRange_i
x <-metis.runAll(
#--------------------------------------------
# MAIN CONFIG
#--------------------------------------------
run_readGCAM      = run_readGCAM_i,
# Must be GCAM regions
gcamcountryNames  = gcamcountryNames_i,
reReadDataGCAM    = reReadDataGCAM_i,
gcamdatabasePath  = gcamdatabasePath_i,
gcamdatabaseName  = gcamdatabaseName_i,
dataProjPath      = dataProjPath_i,
dataProj          = dataProj_i,
scenOrigNames     = scenOrigNames_i,
scenNewNames      = scenNewNames_i,
paramsSelect_GCAM = paramsSelect_GCAM_i,
#----------------------------------------
# CHARTS
#----------------------------------------
dataTablesLocal     = dataTablesLocal_i,
run_charts          = run_charts_i,
# Default is NULL
scenRef             = scenRef_i,
# Default is "0"
regionCompareOnly   = regionCompareOnly_i,
# Default is "0"
scenarioCompareOnly = scenarioCompareOnly_i,
#************************************************************ JE - what is xcompare and xrange
xCompare            = c("2010","2030","2050", "2100"),
xRange              = c(2010,2030,2050, 2100),
paramsSelect_Chart  = paramsSelect_Chart_i,
#colOrder1 = c("GCAMOrig","GCAMRef","Local Data"),
#colOrderName1 = "scenario",
#----------------------------------------
# BOUNDARIES
#----------------------------------------
run_boundaries        = run_boundaries_i,
# Country or Region Name
localcountryName      = localcountryName_i,
localShapeFileFolder  = localShapeFileFolder_i ,
localShapeFile        = localShapeFile_i,
# Make sure this is one of the names(tempShape@data)
localShapeFileColName = localShapeFileColName_i,
boundaryGridsOverlap  = NULL,
#----------------------------------------
# BIA
#----------------------------------------
run_bia               = run_bia_i,
# Choose between "totalOther" or "even"
subsectorNAdistribute = "totalOther", #************************************************************ JE - ?
#----------------------------------------
# PREP GRIDS
#----------------------------------------
run_prepGrids            = run_prepGrids_i,
reReadDataPrepGrids      = reReadDataPrepGrids_i,
sqliteUSE                = sqliteUSE_i,
sqliteDBNamePath         = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = ""), #************************************************************ JE - ?
gridMetisData            = paste(getwd(),"/outputs/Grids/gridMetis.RData", sep = ""),#************************************************************ JE - ?
# Grid2Poly
run_grid2poly            = run_grid2poly_i,
run_state_grid2poly      = run_state_grid2poly_i,
run_GCAMbasin_grid2poly  = run_GCAMbasin_grid2poly_i,
run_localShape_grid2poly = run_localShape_grid2poly_i,
# If sqliteUSE is T above it will use the SQL produced in
# If additional grids are to be run
grid                     = paste(getwd(),"/outputs/Grids/gridMetis.RData", sep = ""), #************************************************************ JE - ?
paramsSelect_grid2poly   = paramsSelect_grid2poly_i,
#--------------------------------------------
# MAPS
#--------------------------------------------
polygonDataTablesCustom     = polygonDataTablesCustom_i,
paramsSelect_Map            = paramsSelect_Map_i,
run_maps                    = run_maps_i,
scaleRange_i                = scaleRange_i,
xRangeMap                   = seq(from=2000,to=2020,by=10),
legendPosition              = c("LEFT","bottom"),
indvScenarios               = "All",
GCMRCPSSPPol                = F,
# Must be one of the GCM RCP scenario combinations
scenRefMap                  = "gfdl-esm2m_rcp2p6_NA_NA",
run_map_grid                = run_map_grid_i,
run_map_state               = run_map_state_i,
run_map_GCAMbasin           = run_map_GCAMbasin_i,
localSubRegDataTables       = localSubRegDataTables_i,
run_map_localShapeLocalData = run_map_localShapeLocalData_i,
run_map_localShapeGCAMData  = run_map_localShapeGCAMData_i,
run_map_localShapeGCAMGrid  = run_map_localShapeGCAMGrid_i,
#--------------------------------------------
# IO RUN
#--------------------------------------------
run_io = run_io_i
)
scaleRange_i
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
debugSource('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
View(test3)
View(scaleRange_i)
debugSource('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
=======
regionsSelect=regionsSelect_i, # Default is "All"
xCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
regionCompareOnly=1, # Default 0. If set to 1, will only run comparison plots and not individual
scenarioCompareOnly=1) # Default 0. If set to 1, will only run comparison plots and not individual
# Polygons. An example Shapefile is Provided with metis in ./metis/dataFiles/examples.
examplePolyFolder<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile<-paste("bermejo3Cropped",sep="")
# Read in the shape file and not the column name to use for fills and labels.
bermejo3Cropped=readOGR(dsn=examplePolyFolder,
layer=examplePolyFile,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # Choose the column name
# Categorical Shapefile
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_NAME",labels=T ,printFig=F,facetsON=F)
# Shapefile with values
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_AREA",labels=T ,printFig=F,facetsON=T,
legendShow = T, legendOutside = T, fillPalette = "Reds", labelsAutoPlace = F)
# Example Shape File. Provided with metis in ./metis/dataFiles/examples
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,
layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=bermejo3Cropped,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
bermejoBoundaries<- metis.boundaries(
boundaryRegShape=NULL,
boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),
boundaryRegCol="NAME",
boundaryRegionsSelect="Argentina",
subRegShape=bermejo3Cropped,
subRegCol=subRegCol_i,
subRegType="subRegType",
nameAppend="_test",
expandPercent=2,
overlapShpFile="Global235_CLM_final_5arcmin_multipart",
overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep="")))
# Example Grid File (csv with lats and lons that overlap the shapefile)
gridExample<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
# Polygons. An example Shapefile is Provided with metis in ./metis/dataFiles/examples.
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,
layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # TO choose subRegCol name
subRegCol_i = "SUB_NAME"
# Run metis.grid2poly
polyBermeo3Cropped<-metis.grid2poly(grid=gridExample,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
aggType="depth", # Aggregation type. Depth or volume. See docuemntation for further details.
nameAppend="_hydrobidBermeo3")
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
?metis.mapProcess
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleName",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=F)
dev.off()
dev.off()
dev.off()
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # TO choose subRegCol name
subRegCol_i = "SUB_NAME"
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
# Extended Map showing the subregion within the wider boudnary region
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("Pakistan") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol]]),]
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExampleExtended",
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
expandPercent = 10,
extension=T)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=paste(boundaryRegionsSelect_i,"_Edited",sep=""),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
devtools::check()
nchar(c"#'   exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
>>>>>>> master
