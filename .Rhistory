data=tbl_rspC1; xData=xData;yData=yData;xLabel=xLabel;yLabel=yLabel;sizeBarLines=sizeBarLines;useNewLabels=useNewLabels;sizeLines=sizeLines; chartType = "bar";
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = "");
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep="");pdfpng=pdfpng
# At the very least data, x and y are needed.
if(length(names(data))<2){stop("Need to provide a data object with at least x and y.
metis.chart(data = userData,xData ='x',yData ='y'")}
if(!"units"%in%names(data)){data<-data%>%dplyr::mutate(units="units")}
if(!"classPalette1"%in%names(data)){data<-data%>%dplyr::mutate(classPalette1="pal_16")}
if(!"class1"%in%names(data)){data<-data%>%dplyr::mutate(class1="class1")}
if(!"scenario"%in%names(data)){data<-data%>%dplyr::mutate(scenario="scenario")}
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
head(l1)
unique(l1[[classPalette]])
i
j
unique(tbl$region)[1]->i
unique(tbl$scenario)[1]->j
unique(tbl$param)[1]->k
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rsp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_rsp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_rspC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rspC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
unique(tbl$param)[3]->k
k
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rsp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_rsp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_rspC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rspC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
useNewLabels
data=tbl_rspC1; xData=xData;yData=yData;xLabel=xLabel;yLabel=yLabel;sizeBarLines=sizeBarLines;useNewLabels=useNewLabels;sizeLines=sizeLines; chartType = "bar";
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = "");
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep="");pdfpng=pdfpng
# At the very least data, x and y are needed.
if(length(names(data))<2){stop("Need to provide a data object with at least x and y.
metis.chart(data = userData,xData ='x',yData ='y'")}
if(!"units"%in%names(data)){data<-data%>%dplyr::mutate(units="units")}
if(!"classPalette1"%in%names(data)){data<-data%>%dplyr::mutate(classPalette1="pal_16")}
if(!"class1"%in%names(data)){data<-data%>%dplyr::mutate(class1="class1")}
if(!"scenario"%in%names(data)){data<-data%>%dplyr::mutate(scenario="scenario")}
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
l1[[class]]<-factor(l1[[class]],levels=unique(l1[[class]]))
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
paletteX
paletteX=a
a<-paletteX
!is.null(names(paletteX))
useNewLabels==1
tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
l1[[class]]
class
l1[[class1]]
l1[["class1"]]
l1
paletteX
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
library(ggplot2)
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
p
paletteX
l1
sort(l1[[class]])
sort(unique(l1[[class]]))
l1[[class]]<-factor( unique(l1[[class]]), levels= sort(l1[[class]]) )
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
p
paletteX
sort(paletteX)
class(paletteX)
paletteX[order(names(paletteX))]
paletteX <- paletteX[order(names(paletteX))]
paletteX
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
p
paletteX <- paletteX[-order(names(paletteX))]
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
paletteX
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
paletteX
paletteX <- paletteX[rev(order(names(paletteX)))]
paletteX
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
p
l1
l1$class1
l1<-l1%>%arrange(class)
l1%>%arrange(class)
class
l1<-l1[order(class)]
l1
l1<-l1[order(class),]
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
l1[[class]]<-factor(l1[[class]],levels=unique(l1[[class]]))
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
paletteX <- paletteX[rev(order(names(paletteX)))]}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1[[class]]<-factor( unique(l1[[class]]), levels= sort(l1[[class]]))
l1<-l1[order(class),]
l1
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
l1[[class]]<-factor(l1[[class]],levels=unique(l1[[class]]))
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
paletteX <- paletteX[rev(order(names(paletteX)))]}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1[[class]]<-factor( unique(l1[[class]]), levels= sort(l1[[class]]))
l1<-l1[,order(class)]
}
l1
useNewLabels=1
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
paletteX <- paletteX[rev(order(names(paletteX)))]}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1[[class]]<-factor( unique(l1[[class]]), levels= sort(l1[[class]]))
l1<-l1[,order(class)]
}
l1
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
l1[[class]]<-factor(l1[[class]],levels=unique(l1[[class]]))
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
l1
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1[sort("class1")]
l1[,sort("class1")]
l1[sort("class1"),]
l1[,sort("class1")]
l1%>%arrange(class1)
l1%>%arrange(class)
l1%>%arrange(c(class))
class
l1%>%arrange(c("class1"))
l1%>%arrange_(class)
l1%>%arrange(!!class)
l1%>%arrange(!! rlang::sym(class))
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
paletteX <- paletteX[rev(order(names(paletteX)))]}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1<-l1%>%arrange(!! rlang::sym(class))
}
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
p
metis.chart<-function(data,
chartType="bar",position="stack",
xData="x",yData="value",class="class1",group="scenario",
classPalette="classPalette1",classLabel="classLabel1",
xLabel="xLabel",yLabel="yLabel",
facet_rows="region",facet_columns="scenario",ncolrow=4,
scales="fixed",
useNewLabels=0,units="units",
xBreaksMaj=10, xBreaksMin=5,
yBreaksMajn=5, yBreaksMinn=10,
sizeBarLines=0.5,sizeLines=1.5,
printFig = T,
fileName = "chart",
dirOutputs=paste(getwd(),"/outputs",sep=""),
figWidth=13,
figHeight=9,
pdfpng="png")
{
# chartType="bar"
# position="stack"
# xData="x"
# yData="value"
# class="class1"
# group="scenario"
# classPalette="classPalette1"
# classLabel="classLabel1"
# xLabel="xLabel"
# yLabel="yLabel"
# facet_rows="region"
# facet_columns="scenario"
# ncolrow=4
# scales="fixed"
# useNewLabels=0
# units="units"
# xBreaksMaj=10
# xBreaksMin=5
# yBreaksMajn=5
# yBreaksMinn=10
# sizeBarLines=0.5
# sizeLines=1.5
# printFig = T
# fileName = "chart"
# dirOutputs=paste(getwd(),"/outputs",sep="")
# figWidth=13
# figHeight=9
# pdfpng="png"
#------------------
# Initialize variables to remove binding errors if needed
# -----------------
#------------------------------------------
# Format data to include any missing columns
#------------------------------------------
# At the very least data, x and y are needed.
if(length(names(data))<2){stop("Need to provide a data object with at least x and y.
metis.chart(data = userData,xData ='x',yData ='y'")}
if(!"units"%in%names(data)){data<-data%>%dplyr::mutate(units="units")}
if(!"classPalette1"%in%names(data)){data<-data%>%dplyr::mutate(classPalette1="pal_16")}
if(!"class1"%in%names(data)){data<-data%>%dplyr::mutate(class1="class1")}
if(!"scenario"%in%names(data)){data<-data%>%dplyr::mutate(scenario="scenario")}
l1 <- data
l1<-l1%>%dplyr::mutate(units=gsub(" ","~",units))
if(length(classPalette)>1){
paletteX<-classPalette}else{
if(classPalette %in% names(l1)){
paletteX<-metis.colors()[[unique(l1[[classPalette]])]]}else{
if(classPalette %in% names(metis.colors())){
paletteX<-metis.colors()[[classPalette]]} else {
paletteX<-classPalette
}
}
}
l1[[class]]<-factor(l1[[class]],levels=unique(l1[[class]]))
if(!is.null(names(paletteX))){
if(!all(levels(l1[[class]]) %in% names(paletteX))){
add_colors<-(metis.colors()$pal_Basic)[1:length(levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)])]
names(add_colors)<-levels(l1[[class]])[!levels(l1[[class]]) %in% names(paletteX)]
paletteX<-c(paletteX,add_colors)}}
if(useNewLabels==1){
if(!is.null(names(paletteX))){
names(paletteX)<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",names(paletteX)))
paletteX <- paletteX[rev(order(names(paletteX)))]}
l1[[class]]<-tools::toTitleCase(sub("\\b[a-zA-Z0-9]{1} \\b", "",l1[[class]]))
l1<-l1%>%arrange(!! rlang::sym(class))
}
p <- ggplot(l1,aes(x=get(xData),y=get(yData),group=get(group))) +
metis.chartsThemeLight()
# Chart Type
if(chartType=="bar"){
p <- p + geom_bar(aes(fill=get(class)),size=sizeBarLines,color="black", stat="identity",position=position) +
scale_fill_manual(values=paletteX) + guides(color=F)
if(!grepl("class",class)){
p = p + guides(fill = guide_legend(title=tools::toTitleCase(paste(class,sep="")),reverse = T))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_fill_manual(values="firebrick")
}else{
p = p + guides(fill = guide_legend(title=unique(l1[[classLabel]]),reverse = T))
}
}
}
if(chartType=="line"){
p <- p +  geom_line(aes(color=get(class),group=get(class)),size=sizeLines, stat="identity",position="identity") +
scale_color_manual(values=paletteX)
if(!grepl("class",class)){
p = p + guides(color = guide_legend(title=tools::toTitleCase(paste(class,sep=""))))}else{
if(length(unique(l1[[class]]))<2){
p = p + theme(legend.position="none") + scale_color_manual(values="firebrick")
}else{
p = p + guides(color = guide_legend(title=unique(l1[[classLabel]])))
}
}
}
if(!xLabel%in%names(l1)){
if(xLabel!="xLabel"){p<-p+xlab(xLabel)}else{
p<-p+xlab(NULL)}}else{
if(xLabel!="xLabel"){p<-p+xlab(unique(l1[[xLabel]]))}else{
p<-p+xlab(NULL)}}
if(!yLabel%in%names(l1)){p<-p+ylab(yLabel)}else{p<-p+ylab(eval(parse(text=paste(unique(l1[[yLabel]]),collapse="~"))))}
p <- p + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = yBreaksMajn), minor_breaks = waiver())
if(is.numeric(l1[[xData]])){p<- p + scale_x_continuous (breaks=(seq(min(range(l1[[xData]])),max(range(l1[[xData]])),by=xBreaksMaj)),
minor_breaks=(seq(min(range(l1[[xData]])),max(range(l1[[xData]])),by=xBreaksMin)),
expand=c(0,xBreaksMaj/2))}
# Faceting
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_grid(get(facet_rows)~get(facet_columns),scales=scales)
}else{
if(length(unique(l1[[facet_columns]])) > 1 & length(unique(l1[[facet_rows]])) < 2){
p <- p + facet_wrap(facet_columns,ncol=ncolrow,scales = scales)
}
if(length(unique(l1[[facet_columns]])) < 2 & length(unique(l1[[facet_rows]])) > 1){
p <- p + facet_wrap(facet_rows,nrow=ncolrow,scales = scales)
}
}
if(printFig!=F){
fname<-paste(fileName,sep="")
if(!dir.exists(dirOutputs)){
print(paste("dirOutputs provided: ",dirOutputs," does not exist. Saving to: ", getwd(),sep=""))
diroutputs=getwd()}else{
metis.printPdfPng(figure=p,
dir=dirOutputs,
filename=fname,
figWidth=figWidth,
figHeight=figHeight,
pdfpng=pdfpng)
print(paste("Figure saved as: ",fileName,".",pdfpng," in folder: ", paste(dirOutputs,sep=""),sep=""))
}}else{print("printFig set to F so no figure will be saved.")}
return(p)
}
# Bar Chart
metis.chart(tbl_rspC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
dirOutputs
library(metis)
charts<-metis.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2010","2015","2020","2030"), # Default is c("2015","2030","2050","2100")
scenRef="GCAMOrig", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=1,
xRange=c(2010,2015,2020,2025,2030,2035,2040,2045,2050) # Default is All
)
