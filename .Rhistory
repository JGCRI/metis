addMissing()
D = ioTbl %>%
dplyr::select(-c(internal,processed,cap,surplus,Z$sector))
}
# Calculate A and L
A<-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTbl$processed^-1*diag(nrow(Z)))
L<-solve(diag(nrow(A))-A);
} else { stop("No A0 or Z0 provided.")}
D_Orig <-D %>% dplyr::select(sector,domestic);
Z_Orig <-Z;
A_Orig <-A;
L_Orig <-L;
X_Orig <-X;
sol_Orig <- ioTbl %>% dplyr::select(c(sector,ioTbl$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
} # if A0 not provided loop.
#---------------------------------------
# Calibrated Solution Based on ZPartial
#---------------------------------------
if(!is.null(ZPartial)){
Z_Origl<-tidyr::gather(Z_Orig,-sector,key="To",value="value");Z_Origl
ZPartiall<-tidyr::gather(ZPartial,-sector,key="To",value="valueP");ZPartiall
Z_Calibl<-dplyr::left_join(Z_Origl,ZPartiall,by=c("sector","To")) %>%
dplyr::mutate(value=dplyr::case_when(!is.na(valueP)~as.numeric(valueP),
TRUE~as.numeric(value))) %>%
dplyr::select(-valueP);
Z_Calib <- tidyr::spread(Z_Calibl, key="To",value="value");Z_Calib
Z = Z_Calib
ioTblNew <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(X_Orig %>%
dplyr::select(processed,trade, cap, surplus,sector)) %>%
dplyr::mutate(local = processed - internal,
domestic = local + trade) %>%
addMissing()
A_ZPartial<-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTblNew$processed^-1*diag(nrow(Z)))
L_ZPartial<-solve(diag(nrow(A_ZPartial))-A_ZPartial);
D_ZPartial<-ioTblNew %>% dplyr::select(sector,domestic);
Z_ZPartial<- Z %>% dplyr::select(c(sector,Z$sector));
X_ZPartial<-ioTblNew %>% dplyr::select(sector,processed);
sol_ZPartial <- ioTblNew %>%
dplyr::select(c(sector,ioTblNew$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
}
#---------------------------------------
# New solutions based on DNew, XNew, ANew or ZNew
#---------------------------------------
#---------------------------------------
# DNew
# Will calculate new X, Z and ioTblNew based on existing A and L
#---------------------------------------
if(!is.null(DNew)){
D = tibble::as_tibble(DNew);
Z <- tibble::as_tibble(A_Orig%*%diag(x=(as.vector(L_Orig%*%as.matrix(D$domestic)))))
names(Z)=ioTbl$sector;
Z <- Z %>% dplyr::bind_cols(D %>% dplyr::select(sector))
X <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(D %>%
dplyr::select(domestic,sector)) %>%
dplyr::mutate(processed = domestic + internal) %>%
dplyr::left_join(Cap0%>%dplyr::select(sector,cap), by=c("sector")) %>%
dplyr::left_join(Trade0%>%dplyr::select(sector,trade), by=c("sector")) %>%
dplyr::mutate(cap = dplyr::case_when(cap<0~processed,
TRUE~cap),
trade = dplyr::case_when(processed>cap~(processed-cap)-trade,
TRUE~trade),
processed = dplyr::case_when(processed>cap~cap,
TRUE~processed),
surplus = cap-processed)
# Calculate ioTbl
ioTblNew <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::bind_cols(X %>%
dplyr::select(processed, cap, trade, surplus)) %>%
dplyr::mutate(local = processed - internal,
domestic = local + trade) %>%
addMissing()
A_DNew <-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTblNew$processed^-1*diag(nrow(Z)))
L_DNew <-solve(diag(nrow(A_DNew))-A_DNew);
D_DNew <-DNew %>% dplyr::select(sector,domestic);
Z_DNew <-Z %>% dplyr::select(c(sector,Z$sector));
X_DNew <-ioTblNew %>% dplyr::select(sector,processed);
sol_DNew <-ioTblNew %>%
dplyr::select(c(sector,ioTblNew$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
}
#---------------------------------------
# ANew
# Will calculate new L, Z, X and ioTblNew based on existing D
#---------------------------------------
if(!is.null(ANew)){
A1 <- as.matrix(ANew %>% dplyr::select(c(ioTbl$sector)))
L1 <- solve(diag(nrow(A1))-A1);
D <- D_Orig
Z <- tibble::as_tibble(A1%*%diag(x=(as.vector(L1%*%as.matrix(D$domestic)))))
names(Z)=ioTbl$sector;
Z <- Z %>% dplyr::bind_cols(D %>% dplyr::select(sector))
X <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(D %>%
dplyr::select(domestic,sector)) %>%
dplyr::mutate(processed = domestic + internal) %>%
dplyr::left_join(Cap0%>%dplyr::select(sector,cap), by=c("sector")) %>%
dplyr::left_join(Trade0%>%dplyr::select(sector,trade), by=c("sector")) %>%
dplyr::mutate(cap = dplyr::case_when(cap<0~processed,
TRUE~cap),
trade = dplyr::case_when(processed>cap~(processed-cap)-trade,
TRUE~trade),
processed = dplyr::case_when(processed>cap~cap,
TRUE~processed),
surplus = cap-processed)
# Calculate ioTbl
ioTblNew <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(X %>%
dplyr::select(processed, cap, trade, surplus,sector)) %>%
dplyr::mutate(local = processed - internal,
domestic = local + trade) %>%
addMissing()
A_ANew <-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTblNew$processed^-1*diag(nrow(Z)))
L_ANew <-solve(diag(nrow(A_ANew))-A_ANew);
D_ANew <-ioTblNew %>% dplyr::select(sector,domestic);
Z_ANew <-Z %>% dplyr::select(c(sector,Z$sector));
X_ANew <-ioTblNew %>% dplyr::select(sector,processed);
sol_ANew <- ioTblNew %>%
dplyr::select(c(sector,ioTblNew$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
}
#---------------------------------------
# ZNew
# Will calculate new A, L, Z, X and ioTblNew based on existing D
#---------------------------------------
if(!is.null(ZNew)){
Z = ZNew
X <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(D_Orig %>%
dplyr::select(domestic,sector)) %>%
dplyr::mutate(processed = domestic + internal) %>%
dplyr::left_join(Cap0%>%dplyr::select(sector,cap), by=c("sector")) %>%
dplyr::left_join(Trade0%>%dplyr::select(sector,trade), by=c("sector")) %>%
dplyr::mutate(cap = dplyr::case_when(cap<0~processed,
TRUE~cap),
trade = dplyr::case_when(processed>cap~(processed-cap)-trade,
TRUE~trade),
processed = dplyr::case_when(processed>cap~cap,
TRUE~processed),
surplus = cap-processed)
# Calculate ioTbl
ioTblNew <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(X %>%
dplyr::select(processed, cap, trade, surplus,sector)) %>%
dplyr::mutate(local = processed - internal,
domestic = local + trade) %>%
addMissing()
A_ZNew<-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTblNew$processed^-1*diag(nrow(Z)))
L_ZNew<-solve(diag(nrow(A_ZNew))-A_ZNew);
D_ZNew<-ioTblNew %>% dplyr::select(sector,domestic);
Z_ZNew<- Z %>% dplyr::select(c(sector,Z$sector));
X_ZNew<-ioTblNew %>% dplyr::select(sector,processed);
sol_ZNew <- ioTblNew %>%
dplyr::select(c(sector,ioTblNew$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
}
#---------------------------------------
# XNew
# Will calculate new Z, A, L and ioTblNew based on existing D, A and L
#---------------------------------------
if(!is.null(XNew)){
D = tibble::as_tibble(D_Orig);
Z <- (A_Orig %*% diag(as.vector(t(as.matrix(XNew$processed))))) %>% tibble::as_tibble()
names(Z)<-sol_Orig$sector
Z <- dplyr::bind_cols(sol_Orig%>%dplyr::select(sector),Z)
X <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(D_Orig %>%
dplyr::select(domestic,sector)) %>%
dplyr::mutate(processed = domestic + internal) %>%
dplyr::left_join(Cap0%>%dplyr::select(sector,cap), by=c("sector")) %>%
dplyr::left_join(Trade0%>%dplyr::select(sector,trade), by=c("sector")) %>%
dplyr::mutate(cap = dplyr::case_when(cap<0~processed,
TRUE~cap),
trade = dplyr::case_when(processed>cap~(processed-cap)-trade,
TRUE~trade),
processed = dplyr::case_when(processed>cap~cap,
TRUE~processed),
surplus = cap-processed)
# Calculate ioTbl
ioTblNew <- Z %>%
dplyr::mutate(internal= Z %>%
dplyr::select(c(Z$sector)) %>%
rowSums) %>%
dplyr::left_join(X %>%
dplyr::select(processed, cap, trade, surplus,sector)) %>%
dplyr::mutate(local = processed - internal,
domestic = local + trade) %>%
addMissing()
A_XNew <-as.matrix(Z%>%dplyr::select(c(Z$sector))) %*% as.matrix(ioTblNew$processed^-1*diag(nrow(Z)))
L_XNew <-solve(diag(nrow(A_XNew))-A_XNew);
D_XNew <-XNew %>% dplyr::select(sector,domestic);
Z_XNew <-Z %>% dplyr::select(c(sector,Z$sector));
X_XNew <-ioTblNew %>% dplyr::select(sector,processed);
sol_XNew <- ioTblNew %>%
dplyr::select(c(sector,ioTblNew$sector,internal,local, processed, cap, surplus, trade, domestic,
names(ioTblNew)[!names(ioTblNew) %in% c("sector",ioTblNew$sector,
internal,local, processed, cap, surplus, trade, domestic)]));
}
A_ANew1= A_ANew1 %>% dplyr::bind_rows(A_ANew1,A_ANew %>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_ANew1 = L_ANew1 %>% dplyr::bind_rows(L_ANew1,L_ANew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_ANew1 = sol_ANew1 %>% dplyr::bind_rows(sol_ANew1,sol_ANew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
A_DNew1 = A_DNew1 %>% dplyr::bind_rows(A_DNew1,A_DNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_DNew1 = L_DNew1 %>% dplyr::bind_rows(L_DNew1,A_DNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_DNew1 = sol_DNew1 %>% dplyr::bind_rows(sol_DNew1,sol_DNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
A_ZNew1 = A_ZNew1 %>% dplyr::bind_rows(A_ZNew1,A_ZNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_ZNew1 = L_ZNew1 %>% dplyr::bind_rows(L_ZNew1,L_ZNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_ZNew1 = sol_ZNew1 %>% dplyr::bind_rows(sol_ZNew1,sol_ZNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
A_XNew1 = A_XNew1 %>% dplyr::bind_rows(A_XNew1,A_XNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_XNew1 = L_XNew1 %>% dplyr::bind_rows(L_XNew1,L_XNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_XNew1 = sol_XNew1 %>% dplyr::bind_rows(sol_XNew1,sol_XNew%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
A_ZPartial1 = A_ZPartial1 %>% dplyr::bind_rows(A_ZPartial1,A_ZPartial%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_ZPartial1 = L_ZPartial1 %>% dplyr::bind_rows(L_ZPartial1,L_ZPartial%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_ZPartial1 = sol_ZPartial1 %>% dplyr::bind_rows(sol_ZPartial1,sol_ZPartial%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
A_Orig1 = A_Orig1 %>% dplyr::bind_rows(A_Orig1,A_Orig%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
L_Orig1 = L_Orig1 %>% dplyr::bind_rows(L_Orig1,L_Orig%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
sol_Orig1 = sol_Orig1 %>% dplyr::bind_rows(sol_Orig1,sol_Orig%>% tibble::as_tibble() %>% dplyr::mutate(scenario=scenario_i,x=year_i,subRegion=subRegion_i))
} # Close loop scenario
} # close loop subRegion
} # close loop year
print(list(A_ANew1=A_ANew1, L_ANew1=L_ANew1, sol_ANew1=sol_ANew1,
A_DNew1=A_DNew1, L_DNew1=L_DNew1, sol_DNew1=sol_DNew1,
A_ZNew1=A_ZNew1, L_ZNew1=L_ZNew1, sol_ZNew1=sol_ZNew1,
A_XNew1=A_XNew1, L_XNew1=L_XNew1, sol_XNew1=sol_XNew1,
A_ZPartial1=A_ZPartial1, L_ZPartial1=L_ZPartial1, sol_ZPartial1=sol_ZPartial1,
A_Orig1=A_Orig1, L_Orig1=L_Orig1, sol_Orig1=sol_Orig1
))
# Print Figure Function
printf <- function(printFig=T,
fileName="file",
dir,
figure,
figWidth=13,
figHeight=9,
pdfpng="pdf"){
if(printFig!=F){
fname<-paste(fileName,sep="")
if(!dir.exists(dir)){
print(paste("directory provided: ",dir," does not exist. Saving to: ", getwd(),sep=""))
dir=getwd()}else{
metis.printPdfPng(figure=figure,
dir=dir,
filename=fname,
figWidth=figWidth,
figHeight=figHeight,
pdfpng=pdfpng)
print(paste("Figure saved as: ",fileName,".",pdfpng," in folder: ", paste(dirOutputs,sep=""),sep=""))
}}else{print("printFig set to F so no figure will be saved.")}
}
for (scenario_i in scenarios){
#---------------------
# sol_Orig1
#---------------------
# ioTable normalized
sol<-sol_Orig1 %>%
dplyr::filter(scenario==scenario_i) %>%
dplyr::select(unique(sol_Orig1$sector), internal, local, trade,  processed, sector,
subRegion,x)
df_Mn<-sol %>%
#dplyr::select (-processed,processed) %>% # to place processed last for following function
dplyr::mutate_at(vars(-sector,-subRegion,-x),dplyr::funs(./processed)); df_Mn
solx <- sol %>%
tidyr::gather(-sector,-subRegion,-x,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom);
df_Mnx <- df_Mn %>%
tidyr::gather(-sector,-subRegion,-x,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom);
# ioTable normalized bubbles
ga <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solOrig1_norm_bubble",sep="")) +
scale_x_discrete(expand = c(0.1,0.1)) +
geom_point(aes(col=value, size=value)) +
geom_text(aes(label=round(value,2)),col="red") +
coord_fixed(ratio = 1) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(x~subRegion); ga
printf(figure=ga,fileName = paste(scenario_i,"_solOrig1_norm_bubble",sep=""), dir=dir)
# ioTable normalized values
gb <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solOrig1_norm_values",sep="")) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gb
printf(figure=gb,fileName = paste(scenario_i,"_solOrig1_norm_values",sep=""), dir=dir)
# ioTable absolute values
gc <- ggplot(solx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solOrig1_absolute_values",sep="")) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gc
printf(figure=gc,fileName = paste(scenario_i,"_solOrig1_absolute_values",sep=""), dir=dir)
#-----------------
# Sankey
#--------------
solFlows <- sol_Orig1 %>%
dplyr::filter(scenario==scenario_i) %>%
dplyr::select(sector, unique(sol_Orig1$sector),local,subRegion,x)
df <- solFlows;df
dfx <- df %>%
tidyr::gather(-sector,-x,-subRegion,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::filter(value>0) %>%
unique() %>%
dplyr::arrange(sectorFrom); dfx
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(paste(scenario_i,"_solOrig1_absolute_sankey",sep=""))+theme_bw();g
printf(figure=g,fileName = paste(scenario_i,"_solOrig1_absolute_sankey",sep=""), dir=dir)
#---------------------
# sol_ZPartial1
#---------------------
if(nrow(sol_ZPartial1)>0){
# ioTable normalized
sol<-sol_ZPartial1 %>%
dplyr::filter(scenario==scenario_i) %>%
dplyr::select(unique(sol_ZPartial1$sector), internal, local, trade,  processed, sector,
subRegion,x)
df_Mn<-sol %>%
#dplyr::select (-processed,processed) %>% # to place processed last for following function
dplyr::mutate_at(vars(-sector,-subRegion,-x),dplyr::funs(./processed)); df_Mn
solx <- sol %>%
tidyr::gather(-sector,-subRegion,-x,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom);
df_Mnx <- df_Mn %>%
tidyr::gather(-sector,-subRegion,-x,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::arrange(sectorFrom);
# ioTable normalized bubbles
ga <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solZPartial1_norm_bubble",sep="")) +
scale_x_discrete(expand = c(0.1,0.1)) +
geom_point(aes(col=value, size=value)) +
geom_text(aes(label=round(value,2)),col="red") +
coord_fixed(ratio = 1) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
facet_grid(x~subRegion); ga
printf(figure=ga,fileName = paste(scenario_i,"_solZPartial1_norm_bubble",sep=""), dir=dir)
# ioTable normalized values
gb <- ggplot(df_Mnx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solZPartial1_norm_values",sep="")) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gb
printf(figure=gb,fileName = paste(scenario_i,"_solZPartial1_norm_values",sep=""), dir=dir)
# ioTable absolute values
gc <- ggplot(solx, aes(y = sectorFrom, x = sectorTo)) +
labs(subtitle="test",
title=paste(scenario_i,"_solZPartial1_absolute_values",sep="")) +
scale_x_discrete(limits = c(unique(df_Mnx$sectorFrom),"internal", "local","processed",
"trade"), expand = c(0.1,0.1)) +
scale_size_continuous(range = c(1,20)) +
geom_text(aes(label=round(value,1)),col="black") +
coord_fixed(ratio = 1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(x~subRegion); gc
printf(figure=gc,fileName = paste(scenario_i,"_solZPartial1_absolute_values",sep=""), dir=dir)
#-----------------
# Sankey
#--------------
solFlows <- sol_ZPartial1 %>%
dplyr::filter(scenario==scenario_i) %>%
dplyr::select(sector, unique(sol_ZPartial1$sector),local,subRegion,x)
df <- solFlows;df
dfx <- df %>%
tidyr::gather(-sector,-x,-subRegion,key="sectorTo",value="value") %>%
dplyr::rename (sectorFrom=sector) %>%
dplyr::filter(value>0) %>%
unique() %>%
dplyr::arrange(sectorFrom); dfx
g<-ggplot(as.data.frame(dfx%>%dplyr::filter(value!=0)),
aes(y = value, axis1 = sectorFrom, axis2 = sectorTo, group=subRegion)) +
ggalluvial::geom_alluvium(aes(fill = sectorFrom), width = 1/12, color="black") +
ggalluvial::geom_stratum(width = 1/12, fill = "grey30", color = "grey", alpha=1) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("From", "To"), expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
facet_grid(x~subRegion) +
ggtitle(paste(scenario_i,"_solZPartial1_absolute_sankey",sep=""))+theme_bw();g
printf(figure=g,fileName = paste(scenario_i,"_solZPartial1_absolute_sankey",sep=""), dir=dir)
} # If sol_ZPartial1 is null
}
return(list(A_ANew1=A_ANew1, L_ANew1=L_ANew1, sol_ANew1=sol_ANew1,
A_DNew1=A_DNew1, L_DNew1=L_DNew1, sol_DNew1=sol_DNew1,
A_ZNew1=A_ZNew1, L_ZNew1=L_ZNew1, sol_ZNew1=sol_ZNew1,
A_XNew1=A_XNew1, L_XNew1=L_XNew1, sol_XNew1=sol_XNew1,
A_ZPartial1=A_ZPartial1, L_ZPartial1=L_ZPartial1, sol_ZPartial1=sol_ZPartial1,
A_Orig1=A_Orig1, L_Orig1=L_Orig1, sol_Orig1=sol_Orig1
))
} # Close Function
#-------------
# Workflow for Metis I/O Analysis
# Small Example
Z0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           50,
"E"     ,    20,          0);Z0
A0=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.23,
"E"     ,    0.13,          0);A0
D0=tibble::tribble( # Initial total demand
~sector, ~domestic,
"W",    100,
"E",    200
);D0
X0=tibble::tribble( # Initial total demand
~sector, ~processed,
"W",    1000,
"E",    2000
);X0
Cap0=tibble::tribble( # Initial total demand
~sector, ~cap,
"W",    500,
"E",    4000
);Cap0
Trade0=tibble::tribble( # Initial total demand
~sector, ~trade,
"W",    0,
"E",    0
);Trade0
DNew=tibble::tribble( # Initial processed demand
~sector, ~domestic,
"W",    150,
"E",    250
);DNew
ANew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           0.4,
"E"     ,    0.2,          0);ANew
ZNew=tibble::tribble( # Initial Flows
~sector ,    ~W,         ~E,
"W"     ,    0,           500,
"E"     ,    20,          0);ZNew
XNew=tibble::tribble( # Initial processed demand
~sector, ~processed,
"W",    300,
"E",    500
);XNew
A0i=A0;
D0i=D0;
Cap0i=Cap0;
Trade0i=Trade0
io1<-metis.io(A0i=A0,D0i=D0, Cap0i=Cap0, Trade0i=Trade0)
io2<-metis.io(A0=A0,X0=X0, Cap0=Cap0)
library(metis)
