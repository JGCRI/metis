length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
#----------------
# Analyze Bia Capcity Factors
#---------------
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
#print(mean(gridaP$BackCalcCapFactor~gridaP$class))
} #andym Close biaFile_i for loop
mns<-with(gridaP, tapply(BackCalcCapFactor, class, mean, na.rm = TRUE))
mns
mdns<-with(gridaP, tapply(BackCalcCapFactor, class, median, na.rm = TRUE))
mdns
mns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, mean, na.rm = TRUE))
mns_gen2015
mdns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, median, na.rm = TRUE))
mdns_gen2015
mns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, mean, na.rm = TRUE))
mns_gen2016
mdns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, median, na.rm = TRUE))
mdns_gen2016
##Do THIS FOR MEDIAN AS WELL (without disregarding the NAs)
#dlply(gridaP, .(class), summarize, mean=mean(gridaP$BackCalcCapFactor))
#meansaP<-ddply(gridaP$BackCalcCapFactor, .(gridaP$class), summarize, mean=mean(value))
#meansaP
length(gridaP$BCCF_gen2015[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}    #andym : should this be changed to JGCRI/metis ?_?
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------------------
# Prepare Grids
#------------------------
dirOutputs=paste(getwd(),"/outputs",sep="")
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthos/",sep="")
xanthosScenarioAssign="Eg1"
xanthosFiles=c("q_mmperyear_Reference")
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
biaFolder=paste(getwd(),"/dataFiles/grids/bia/",sep="")
biaScenarioAssign="Eg1"
biaFiles=c("global_power_plant_database_MW")
#biaUnits="Capacity (MW)"   #andym   ?Should we have biaUnits?
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisXanthos.RData", sep = "")
#sqliteUSE = T andym
sqliteUSE = F #andym
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
xanthosUnits="Runoff (mm)"  #andym  I thought that xanthosUnits was supposed to be taken out of prepGrid entirely, but it seems to be needed
reReadData=T  #andym
scarcityXanthosRollMeanWindow=10   #andym
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
}
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
View(gridaP)
View(gridaP)
gridaaP <- gridaP[country %in% c("ARG","COL")]
griddP <- data.table::data.table(gridaP)
gridARGCOL <- gridaP[country %in% c("ARG","COL")]
View(griddP)
gridARGCOL <- gridaP[gridaP$country %in% c("ARG","COL")]
DT <- data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
DT <- data.table::data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
View(DT)
gridARGCOL <- gridaP[country=="COL"]
gridARGCOL <- gridaP["country"=="COL"]
View(gridARGCOL)
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}    #andym : should this be changed to JGCRI/metis ?_?
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------------------
# Prepare Grids
#------------------------
dirOutputs=paste(getwd(),"/outputs",sep="")
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthos/",sep="")
xanthosScenarioAssign="Eg1"
xanthosFiles=c("q_mmperyear_Reference")
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
biaFolder=paste(getwd(),"/dataFiles/grids/bia/",sep="")
biaScenarioAssign="Eg1"
biaFiles=c("global_power_plant_database_MW")
#biaUnits="Capacity (MW)"   #andym   ?Should we have biaUnits?
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisXanthos.RData", sep = "")
#sqliteUSE = T andym
sqliteUSE = F #andym
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
xanthosUnits="Runoff (mm)"  #andym  I thought that xanthosUnits was supposed to be taken out of prepGrid entirely, but it seems to be needed
reReadData=T  #andym
scarcityXanthosRollMeanWindow=10   #andym
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
#print(mean(gridaP$BackCalcCapFactor~gridaP$class))
} #andym Close biaFile_i for loop
mns<-with(gridaP, tapply(BackCalcCapFactor, class, mean, na.rm = TRUE))
mns
mdns<-with(gridaP, tapply(BackCalcCapFactor, class, median, na.rm = TRUE))
mdns
mns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, mean, na.rm = TRUE))
mns_gen2015
mdns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, median, na.rm = TRUE))
mdns_gen2015
mns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, mean, na.rm = TRUE))
mns_gen2016
mdns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, median, na.rm = TRUE))
mdns_gen2016
##Do THIS FOR MEDIAN AS WELL (without disregarding the NAs)
#dlply(gridaP, .(class), summarize, mean=mean(gridaP$BackCalcCapFactor))
#meansaP<-ddply(gridaP$BackCalcCapFactor, .(gridaP$class), summarize, mean=mean(value))
#meansaP
length(gridaP$BCCF_gen2015[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
View(gridaP)
View(griddP)
View(gridaP)
View(gridaP)
gridARGCOL <- gridaP%>%
dplyr::group_by(value, country, class)  #%>%
View(gridARGCOL)
gridARGCOL <- gridaP%>%
dplyr::group_by(value, country, class)%>%
dplyr::summarise(total_capacity=sum(value))
View(gridARGCOL)
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
library(metis)
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dplyr")}             #andym dplyr was misspelled
library(dplyr)
if("zoo" %in% rownames(installed.packages()) == F){install.packages("zoo")}            #andym added this package to install
library(zoo)
if("dbplyr" %in% rownames(installed.packages()) == F){install.packages("dbplyr")}            #andym added this package to install
library(dbplyr)
if("RSQLite" %in% rownames(installed.packages()) == F){install.packages("RSQLite")}            #andym added this package to install
library(RSQLite)
if("data.table" %in% rownames(installed.packages()) == F){install.packages("data.table")}            #andym added this package to install
library(data.table)
