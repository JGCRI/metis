#----------------
# Prepare Tethys Files
#---------------
if(!dir.exists(tethysFolder)){
print(paste("tethys folder: ", tethysFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping tethys runs",sep=""))}else {
for(tethysFile_i in tethysFiles){
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
if(!file.exists(paste(tethysFolder,"/",tethysFile_i,sep=""))){
print(paste("tethys file: ", tethysFolder,"/",tethysFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",tethysFolder,"/",tethysFile_i,sep=""))
}else{
gridx<-utils::read.csv(paste(tethysFolder,"/",tethysFile_i,sep=""), stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-X..ID,-ilon,-ilat)
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenario=tethysScenario,
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if tethys file exists
} # close tethys file loops
} # Close tethys folder
gridMetis<-gridMetis%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class))
#----------------
# Prepare Xanthos Files
#---------------
if(!file.exists(xanthosCoordinatesPath)){
print(paste("xanthos coordinate path: ", xanthosCoordinatesPath ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
if(!dir.exists(xanthosFolder)){
print(paste("xanthos folder: ", xanthosFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
for(xanthosFile_i in xanthosFiles){
if(!grepl(".csv",xanthosFile_i)){xanthosFile_i=paste(xanthosFile_i,".csv",sep="")}
if(!file.exists(paste(xanthosFolder,"/",xanthosFile_i,sep=""))){
print(paste("xanthos file: ", xanthosFolder,"/",xanthosFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",xanthosFolder,"/",xanthosFile_i,sep=""))
}else{
xanthosCoords<-utils::read.csv(xanthosCoordinatesPath, header=F, stringsAsFactors = F);
xanthosCoords<-xanthosCoords%>%dplyr::rename(lon=V2,lat=V3)%>%dplyr::select(lon,lat)
gridx<-utils::read.csv(paste(xanthosFolder,"/",xanthosFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-id)
names(gridx)<-gsub("X","",names(gridx))
if(nrow(gridx)!=nrow(xanthosCoords)){
stop(paste("Rows in xanthos file: ", xanthosFolder,"/",xanthosFile_i,
" not equal to rows in xanthos coords file: ",
xanthosCoordinatesPath,sep=""))}
gridx<-dplyr::bind_cols(xanthosCoords,gridx)
if(grepl("mm",xanthosUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenario=xanthosScenario,
param="xanthosRunoff",
units=xanthosUnits,
aggType=aggType,
classPalette="pal_wet",
class="Runoff")%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","aggType","param","units","classPalette","class"))%>%
tibble::as_tibble()
gridx$x<-as.numeric(gridx$x)
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if xanthos file exists
} # close xanthos file loops
} # Close xanthos folder
} # close If xanthosCoords path exists
#----------------
# Prepare Gridded Scarcity
#---------------
if(!is.null(gridMetis)){
if(any(grepl("xanthos",unique(gridMetis$param))) & any(grepl("tethys",unique(gridMetis$param)))){
gridMetisTethys<-gridMetis%>%dplyr::filter(class=="Total",grepl("tethys",param))
gridMetisXanthos<-gridMetis%>%dplyr::filter(grepl("xanthos",param))%>%
dplyr::group_by(scenario,param,units,aggType,classPalette,class)%>%
dplyr::mutate(rollingMean=zoo::rollmean(x=value,k=scarcityXanthosRollMeanWindow,fill=NA))%>%
dplyr::filter(!is.na(rollingMean),x %in% unique(gridMetisTethys$x))%>%dplyr::ungroup()
gridMetisScarcity<-dplyr::left_join(gridMetisTethys,gridMetisXanthos%>%dplyr::select(lat,lon,x,rollingMean),
by=c("lat","lon","x"))%>%
dplyr::mutate(scarcity=value/rollingMean,
units="Gridded Scarcity (Fraction)",
param="griddedScarcity",
class="Scarcity",
classPalette="pal_hot")%>%
dplyr::select(-value,-rollingMean)%>%
dplyr::rename(value=scarcity)%>%
dplyr::filter(!is.na(value));
gridMetis<-dplyr::bind_rows(gridMetis,gridMetisScarcity)
} else {print(paste("Either Xanthos or tethys not available in gridMetis params: ", paste(unique(gridMetis$param),collapse=", "),
" Skipping gridded scarcity calculation",sep=""))}
}else {print(paste("gridMetis is NULL, skipping gridded scracity calculation.",sep=""))}
#----------------------
# Test Unique Values
#a<-gridMetis%>%tidyr::unite(col="key",names(gridMetis)[!names(gridMetis) %in% c("lat","lon","value")],sep="_",remove=T)
#a<-a%>%tidyr::spread(key=key,value=value)
#--------------
# Save RData and csv.
#----------------
save(gridMetis,file=gridMetisData)
utils::write.csv(gridMetis,file = paste(dirOutputs, "/Grids/gridMetis.csv", sep = ""),row.names = F)
print(paste("gridMetis params: ", paste(unique(gridMetis$param),collapse=", "),sep=""))
print(paste("gridMetis.csv saved in: ", paste(dirOutputs, "/Grids/gridMetis.csv", sep = ""),sep=""))
}else{ # Close if reRead==1
if(!file.exists(gridMetisData)){stop(paste("File gridMetisData not found: ",gridMetisData,sep=""))}else{
load(gridMetisData)
}
}
gridMetis<-tibble::tibble()
if(!dir.exists(demeterFolder)){
print(paste("Demeter folder: ", demeterFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping demeter runs",sep=""))}else {
for(timestepx in demeterTimesteps){
if(!file.exists(paste(demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""))){
print(paste("Demeter file: ", demeterFolder,"/landcover_",timestepx,"_timestep.csv is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""))
}else{
gridx<-utils::read.csv(paste(demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""), stringsAsFactors = F)%>%
tibble::as_tibble()%>%
dplyr::mutate(lat=latitude,lon=longitude,
scenario=demeterScenario,
param="demeterLandUse",
units=demeterUnits,
aggType="depth",
x=timestepx,
classPalette="pal_green")%>%
dplyr::select(-aez_id,-region_id,-longitude,-latitude)%>%
tidyr::gather(key="class",value="value",-c("lat","lon","scenario","aggType","param","units","x","classPalette"))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if demeter file exists
} # close demeter file loops
} # Close Demeter folder
if(!dir.exists(tethysFolder)){
print(paste("tethys folder: ", tethysFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping tethys runs",sep=""))}else {
for(tethysFile_i in tethysFiles){
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
if(!file.exists(paste(tethysFolder,"/",tethysFile_i,sep=""))){
print(paste("tethys file: ", tethysFolder,"/",tethysFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",tethysFolder,"/",tethysFile_i,sep=""))
}else{
gridx<-utils::read.csv(paste(tethysFolder,"/",tethysFile_i,sep=""), stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-X..ID,-ilon,-ilat)
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenario=tethysScenario,
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if tethys file exists
} # close tethys file loops
} # Close tethys folder
gridMetis<-gridMetis%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class))
print(paste("Skipping tethys runs",sep=""))}else {
if(!dir.exists(tethysFolder)){
print(paste("tethys folder: ", tethysFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping tethys runs",sep=""))}else {
for(tethysFile_i in tethysFiles){
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
if(!file.exists(paste(tethysFolder,"/",tethysFile_i,sep=""))){
print(paste("tethys file: ", tethysFolder,"/",tethysFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",tethysFolder,"/",tethysFile_i,sep=""))
}else{
gridx<-utils::read.csv(paste(tethysFolder,"/",tethysFile_i,sep=""), stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-X..ID,-ilon,-ilat)
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenario=tethysScenario,
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if tethys file exists
} # close tethys file loops
gridMetis<-gridMetis%>%
dplyr::mutate(class=dplyr::case_when(grepl("wddom",class)~"Domestic",
grepl("elec",class)~"Electric",
grepl("irr",class)~"Irrigation",
grepl("liv",class)~"Livestock",
grepl("mfg",class)~"Manufacturing",
grepl("min",class)~"Mining",
grepl("nonag",class)~"Non Agriculture",
grepl("total",class)~"Total",
TRUE~class))
} # Close tethys folder
if(!file.exists(xanthosCoordinatesPath)){
print(paste("xanthos coordinate path: ", xanthosCoordinatesPath ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
if(!dir.exists(xanthosFolder)){
print(paste("xanthos folder: ", xanthosFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
for(xanthosFile_i in xanthosFiles){
if(!grepl(".csv",xanthosFile_i)){xanthosFile_i=paste(xanthosFile_i,".csv",sep="")}
if(!file.exists(paste(xanthosFolder,"/",xanthosFile_i,sep=""))){
print(paste("xanthos file: ", xanthosFolder,"/",xanthosFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",xanthosFolder,"/",xanthosFile_i,sep=""))
}else{
xanthosCoords<-utils::read.csv(xanthosCoordinatesPath, header=F, stringsAsFactors = F);
xanthosCoords<-xanthosCoords%>%dplyr::rename(lon=V2,lat=V3)%>%dplyr::select(lon,lat)
gridx<-utils::read.csv(paste(xanthosFolder,"/",xanthosFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-id)
names(gridx)<-gsub("X","",names(gridx))
if(nrow(gridx)!=nrow(xanthosCoords)){
stop(paste("Rows in xanthos file: ", xanthosFolder,"/",xanthosFile_i,
" not equal to rows in xanthos coords file: ",
xanthosCoordinatesPath,sep=""))}
gridx<-dplyr::bind_cols(xanthosCoords,gridx)
if(grepl("mm",xanthosUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenario=xanthosScenario,
param="xanthosRunoff",
units=xanthosUnits,
aggType=aggType,
classPalette="pal_wet",
class="Runoff")%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","aggType","param","units","classPalette","class"))%>%
tibble::as_tibble()
gridx$x<-as.numeric(gridx$x)
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
} # Close if xanthos file exists
} # close xanthos file loops
} # Close xanthos folder
} # close If xanthosCoords path exists
if(!is.null(gridMetis)){
if(any(grepl("xanthos",unique(gridMetis$param))) & any(grepl("tethys",unique(gridMetis$param)))){
gridMetisTethys<-gridMetis%>%dplyr::filter(class=="Total",grepl("tethys",param))
gridMetisXanthos<-gridMetis%>%dplyr::filter(grepl("xanthos",param))%>%
dplyr::group_by(scenario,param,units,aggType,classPalette,class)%>%
dplyr::mutate(rollingMean=zoo::rollmean(x=value,k=scarcityXanthosRollMeanWindow,fill=NA))%>%
dplyr::filter(!is.na(rollingMean),x %in% unique(gridMetisTethys$x))%>%dplyr::ungroup()
gridMetisScarcity<-dplyr::left_join(gridMetisTethys,gridMetisXanthos%>%dplyr::select(lat,lon,x,rollingMean),
by=c("lat","lon","x"))%>%
dplyr::mutate(scarcity=value/rollingMean,
units="Gridded Scarcity (Fraction)",
param="griddedScarcity",
class="Scarcity",
classPalette="pal_hot")%>%
dplyr::select(-value,-rollingMean)%>%
dplyr::rename(value=scarcity)%>%
dplyr::filter(!is.na(value));
gridMetis<-dplyr::bind_rows(gridMetis,gridMetisScarcity)
} else {print(paste("Either Xanthos or tethys not available in gridMetis params: ", paste(unique(gridMetis$param),collapse=", "),
" Skipping gridded scarcity calculation",sep=""))}
}else {print(paste("gridMetis is NULL, skipping gridded scracity calculation.",sep=""))}
save(gridMetis,file=gridMetisData)
head(gridMetis)
gridMetis
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
dirOutputs=paste(getwd(),"/outputs",sep="")
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthos/",sep="")
xanthosScenario="Eg1"
xanthosUnits="Runoff (mm)"
xanthosFiles=c("q_mmperyear_Reference")
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosCoords/coordinates.csv",sep="")
scarcityXanthosRollMeanWindow=10
gridMetis<-metis.prepGrid(
demeterFolder=demeterFolder,
demeterScenario=demeterScenario,
demeterTimesteps=demeterTimesteps,
demeterUnits=demeterUnits,
tethysFolder=tethysFolder,
tethysScenario=tethysScenario,
tethysFiles=tethysFiles,
tethysUnits=tethysUnits,
xanthosFolder=xanthosFolder,
xanthosScenario=xanthosScenario,
xanthosUnits=xanthosUnits,
xanthosFiles=xanthosFiles,
xanthosCoordinatesPath=xanthosCoordinatesPath,
scarcityXanthosRollMeanWindow=scarcityXanthosRollMeanWindow,
dirOutputs=paste(getwd(),"/outputs",sep=""),
reReadData=1,
gridMetisData=paste(dirOutputs, "/Grids/gridMetis.RData", sep = ""))
head(gridMetis)
# Example Grid File
grid<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
# Example Shape FIle
examplePolyFolder<-paste(getwd(),"/dataFiles/examples",sep="")
exampleSubRegionFile<-paste("bermejo3Cropped",sep="")
# View and Test SHape File
bermejo3Cropped=readOGR(dsn=examplePolyFolder,
layer=exampleSubRegionFile,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data)
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_NAME",labels=T ,printFig=F)
grid=gridMetis
grid=gridMetis%>%dplyr::filter(param=="demeterLandUse")
# Run metis.grid2poly
polyBermeo3Cropped<-metis.grid2poly(grid=grid,
boundaryRegShape=NULL,
boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/admin_gadm36",sep=""),
boundaryRegShpFile=paste("gadm36_0",sep=""),
boundaryRegCol="NAME_0",
boundaryRegionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder,
subRegShpFile=exampleSubRegionFile,
subRegCol="SUB_NAME",
subRegionsSelect=NULL,
subRegType="subBasin",
dirOutputs=paste(getwd(),"/outputs",sep=""),
nameAppend="_hydrobidBermeo3",
expandbboxPercent=2,
extension=T,
overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
overlapShpFile ="Global235_CLM_final_5arcmin_multipart")
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
# Example Grid File
grid<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
# Example Shape FIle
examplePolyFolder<-paste(getwd(),"/dataFiles/examples",sep="")
exampleSubRegionFile<-paste("bermejo3Cropped",sep="")
# View and Test SHape File
bermejo3Cropped=readOGR(dsn=examplePolyFolder,
layer=exampleSubRegionFile,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data)
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_NAME",labels=T ,printFig=F)
# Run metis.grid2poly
polyBermeo3Cropped<-metis.grid2poly(grid=grid,
boundaryRegShape=NULL,
boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/admin_gadm36",sep=""),
boundaryRegShpFile=paste("gadm36_0",sep=""),
boundaryRegCol="NAME_0",
boundaryRegionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder,
subRegShpFile=exampleSubRegionFile,
subRegCol="SUB_NAME",
subRegionsSelect=NULL,
subRegType="subBasin",
dirOutputs=paste(getwd(),"/outputs",sep=""),
nameAppend="_hydrobidBermeo3",
expandbboxPercent=2,
extension=T,
overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
overlapShpFile ="Global235_CLM_final_5arcmin_multipart")
exampleGridTable<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
metis.mapProcess(polygonDataTables=examplePolygonTable,
gridDataTables=exampleGridTable,
dirOutputs=paste(getwd(),"/outputs",sep=""),
xRange=c(2005,2010,2020),
labels=F,
labelsSize=1.2,
regionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=paste(getwd(),"/dataFiles/gis/subbasin_hydrobid",sep=""),
subRegShpFile=paste("bermejo3Cropped",sep=""),
subRegCol="SUB_NAME",
subRegType="subBasin",
aggType=NULL,
nameAppend="_hydrobid",
legendPosition=c("RIGHT","top"),
rasterCoverNegShape=T,
legendFixedBreaks=5,
animateOn=T,
delay=100,
legendTitleSize=1,
scenRef="Eg1")
metis.mapProcess(polygonDataTables=examplePolygonTable,
gridDataTables=exampleGridTable,
xRange=c(2005,2010,2020),
regionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=paste(getwd(),"/dataFiles/gis/subbasin_hydrobid",sep=""),
subRegShpFile=paste("Argentina_Subregion_subBasin_hydrobidBermeo3",sep=""),
subRegCol="SUB_NAME",
subRegType="subBasin",
nameAppend="_hydrobid",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1")
metis.mapProcess(polygonDataTables=examplePolygonTable,
gridDataTables=exampleGridTable,
xRange=c(2005,2010,2020),
regionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=paste(getwd(),"/dataFiles/gis/subbasin_hydrobid",sep=""),
subRegShpFile=paste("bermejo3Cropped",sep=""),
subRegCol="SUB_NAME",
subRegType="subBasin",
nameAppend="_hydrobid",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1")
library(metis)
devtools::check()
devtools::check()
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/metis.pdf",sep=""))){unlink(paste(getwd(),"/metis.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
devtools::check()
library(tmap)
?tmap::tm_text
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
# Example Shape FIle
examplePolyFolder<-paste(getwd(),"/dataFiles/examples",sep="")
exampleSubRegionFile<-paste("bermejo3Cropped",sep="")
# View and Test SHape File
bermejo3Cropped=readOGR(dsn=examplePolyFolder,
layer=exampleSubRegionFile,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data)
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_NAME",labels=T ,printFig=F)
library(metis)
