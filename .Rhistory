regionsSelect=regionsSelect_i, # Default is "All"
xCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
regionCompareOnly=1, # Default 0. If set to 1, will only run comparison plots and not individual
scenarioCompareOnly=1) # Default 0. If set to 1, will only run comparison plots and not individual
# Polygons. An example Shapefile is Provided with metis in ./metis/dataFiles/examples.
examplePolyFolder<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile<-paste("bermejo3Cropped",sep="")
# Read in the shape file and not the column name to use for fills and labels.
bermejo3Cropped=readOGR(dsn=examplePolyFolder,
layer=examplePolyFile,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # Choose the column name
# Categorical Shapefile
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_NAME",labels=T ,printFig=F,facetsON=F)
# Shapefile with values
metis.map(dataPolygon=bermejo3Cropped,fillColumn = "SUB_AREA",labels=T ,printFig=F,facetsON=T,
legendShow = T, legendOutside = T, fillPalette = "Reds", labelsAutoPlace = F)
# Example Shape File. Provided with metis in ./metis/dataFiles/examples
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,
layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=bermejo3Cropped,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
bermejoBoundaries<- metis.boundaries(
boundaryRegShape=NULL,
boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),
boundaryRegCol="NAME",
boundaryRegionsSelect="Argentina",
subRegShape=bermejo3Cropped,
subRegCol=subRegCol_i,
subRegType="subRegType",
nameAppend="_test",
expandPercent=2,
overlapShpFile="Global235_CLM_final_5arcmin_multipart",
overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep="")))
# Example Grid File (csv with lats and lons that overlap the shapefile)
gridExample<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
# Polygons. An example Shapefile is Provided with metis in ./metis/dataFiles/examples.
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,
layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # TO choose subRegCol name
subRegCol_i = "SUB_NAME"
# Run metis.grid2poly
polyBermeo3Cropped<-metis.grid2poly(grid=gridExample,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
aggType="depth", # Aggregation type. Depth or volume. See docuemntation for further details.
nameAppend="_hydrobidBermeo3")
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
?metis.mapProcess
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect="Argentina",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleName",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=F)
dev.off()
dev.off()
dev.off()
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # TO choose subRegCol name
subRegCol_i = "SUB_NAME"
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
# Extended Map showing the subregion within the wider boudnary region
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("Pakistan") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol]]),]
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExampleExtended",
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
expandPercent = 10,
extension=T)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=paste(boundaryRegionsSelect_i,"_Edited",sep=""),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
devtools::check()
nchar(c"#'   exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
