boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
examplePolyFolder_i<-paste(getwd(),"/dataFiles/examples",sep="")
examplePolyFile_i<-paste("bermejo3Cropped",sep="")
bermejo3Cropped=readOGR(dsn=examplePolyFolder_i,layer=examplePolyFile_i,use_iconv=T,encoding='UTF-8')
head(bermejo3Cropped@data) # TO choose subRegCol name
subRegCol_i = "SUB_NAME"
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
# Extended Map showing the subregion within the wider boudnary region
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 6,
extension=T)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("Pakistan") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol]]),]
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
# Simple Example. See example csv tables provided for ideal column names needed.
exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_poly_ArgentinaBermejo3_Eg1Eg2.csv",sep="")
gridTable=read.csv(exampleGridTable_i);head(gridTable)
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
subRegShpFolder_i <- paste(getwd(),"/dataFiles/examples",sep="")
subRegShpFile_i <- paste("bermejo3Cropped",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "SUB_NAME"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExample",
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMap",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
#expandPercent = 2,
extension=F)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/naturalEarth",sep="")
boundaryRegShpFile_i <- paste("ne_10m_admin_0_countries",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "NAME"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Pick country names from the list of countries in the natural earth shapefile.
unique(boundaryRegShp_i@data[[boundaryRegCol_i]])
boundaryRegionsSelect_i = c("Argentina") # Must be a region in the boundaryRegShp
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
gridDataTables=exampleGridTable_i,
xRange=c(2005,2010,2020),
mapsOutFolderName="BermejoExampleExtended",
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShpFolder = boundaryRegShpFolder_i,
boundaryRegShpFile = boundaryRegShpFile_i,
boundaryRegCol = boundaryRegCol_i,
subRegShape=NULL,
subRegShpFolder=examplePolyFolder_i,
subRegShpFile=examplePolyFile_i,
subRegCol=subRegCol_i,
subRegType="subBasin",
nameAppend="_exampleSubRegionMapExtended",
legendPosition=c("RIGHT","top"),
animateOn=T,
delay=100,
scenRef="Eg1",
expandPercent = 10,
extension=T)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/admin_gcam32",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegionsSelect_i = c("China") # Must be a region in the boundaryRegShp
# Read in subregion shapefile
# Read in the  SubBasin GCAM Basins shapefile which comes with metis.
subRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/basin_gcam",sep="")
subRegShpFile_i <- paste("Global235_CLM_final_5arcmin_multipart",sep="")
subRegShp_i = readOGR(dsn=subRegShpFolder_i,layer=subRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(subRegShp_i@data)
subRegCol_i = "basin_name"
metis.map(dataPolygon=subRegShp_i,fillColumn = subRegCol_i,labels=F ,printFig=F,facetsON=F)
# Run metis.boundaries on the two shapefiles and selected region to get the cropped shapefile.
boundaries<- metis.boundaries(
boundaryRegShape=boundaryRegShp_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShp_i,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
expandPercent=2,
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),
extension = T,
cropSubShape2Bound = T)
# The subregion shapefile created by boundaries can now be selected to be used for mapping values.
subRegShp_i_Crop = boundaries$subRegShape # or can point to the subRegShapeFolder and subRegShpFile as produced by metis.boundaries.R
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Sometimes the cropping results in slivers of regions left around boundaries when the boundayr and subregion shape don't line up.
# The extra regions can be removed as follows.
# Choose regions from the list of regions printed above.
# Can also subset to the regions available in the polygon data table below.(unique(polyTable$subRegion)
regions_to_remove =c("Amu_Darya")
subRegShp_i_Crop<-subRegShp_i_Crop[(!subRegShp_i_Crop[[subRegCol_i]] %in% regions_to_remove) & !is.na(subRegShp_i_Crop[[subRegCol_i]]),]
subRegShp_i_Crop@data <- droplevels(subRegShp_i_Crop@data)
head(subRegShp_i_Crop@data); levels(subRegShp_i_Crop@data[[subRegCol_i]])
metis.map(dataPolygon=subRegShp_i_Crop,fillColumn = subRegCol_i,labels=T ,printFig=F,facetsON=F)
# Read in the datatable with values by subRegion
examplePolygonTable_i<-paste(getwd(),"/dataFiles/examples/example_GCAMBasins_analysis.csv",sep="")
polyTable=read.csv(examplePolygonTable_i);head(polyTable)
unique(polyTable$x); # check available number of years.
# Make sure shapefile subRegions and PolygonTable subregions match
unique(polyTable$subRegion); unique(subRegShp_i_Crop@data[[subRegCol_i]])
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=boundaryRegionsSelect_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="",
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F)
# Set scale ranges across scenarios to be the same.
# Check range of data for each param
for(param_i in unique(polyTable$param)){
print(paste("param: ", param_i, sep=""));print("Range is:")
print(range((polyTable%>%dplyr::filter(param==param_i))$value))}
scaleRange_i = tibble::tribble(
~param,~minScale, ~maxScale,
"waterConsumption", 0, 10
)
metis.mapProcess(polygonDataTables=examplePolygonTable_i,
#gridDataTables=exampleGridTable_i,
xRange=c(2010,2020,2100),
mapsOutFolderName=paste(boundaryRegionsSelect_i,"_Edited",sep=""),
boundaryRegionsSelect=boundaryRegionsSelect_i,
boundaryRegShape=boundaryRegShp_i,
subRegShape=subRegShp_i_Crop,
subRegCol=subRegCol_i,
subRegType="GCAMBasin",
nameAppend="_improvedFig",
legendPosition=c("LEFT","bottom"),
animateOn=T,
delay=100,
scenRef="SSP2_Ref",
extension=F,
diffOn = F,
legendOutsideSingle = T,
scaleRange = scaleRange_i)
devtools::check()
nchar(c"#'   exampleGridTable_i<-paste(getwd(),"/dataFiles/examples/example_grid_ArgentinaBermejo3_Eg1Eg2.csv",sep="")")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
# metis.master.R
# Script to run different parts of the metis package.
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dplyr")}
library(dplyr)
if("zoo" %in% rownames(installed.packages()) == F){install.packages("zoo")}
library(zoo)
if("dbplyr" %in% rownames(installed.packages()) == F){install.packages("dbplyr")}
library(dbplyr)
if("RSQLite" %in% rownames(installed.packages()) == F){install.packages("RSQLite")}
library(RSQLite)
if("ggplot2" %in% rownames(installed.packages()) == F){install.packages("ggplot2")}
library(ggplot2)
if("ggalluvial" %in% rownames(installed.packages()) == F){install.packages("ggalluvial")}
library(ggalluvial)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
boundaryRegCol_i = "reg32_id"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
a <- data.table::fread("D:/metis/dataFiles/grids/griddedIDsPop/RgnNames.csv"); a
a <- a %>% dplyr::mutate(reg32_id = as.character(region_id))
boundaryRegShp_i@data$reg32_id <- as.character(boundaryRegShp_i@data$reg32_id)
boundaryRegShp_i@data <-  boundaryRegShp_i@data %>% dplyr::left_join(a)
head(boundaryRegShp_i@data)
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "reg32_id"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
a <- data.table::fread("D:/metis/dataFiles/grids/griddedIDsPop/RgnNames.csv"); a
a <- a %>% dplyr::mutate(reg32_id = as.character(region_id))
boundaryRegShp_i@data$reg32_id <- as.character(boundaryRegShp_i@data$reg32_id)
boundaryRegShp_i@data <-  boundaryRegShp_i@data %>% dplyr::left_join(a) %>% dplyr::select(-region_id)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=T ,printFig=F,facetsON=F)
head(boundaryRegShp_i@data)
rgdal::writeOGR(obj=boundaryRegShp_i,
dsn=paste(getwd(),"/dataFiles/gis/metis/gcam",sep=""),
layer=paste("region32_0p5deg_regions",nameAppend,sep=""),
driver="ESRI Shapefile", overwrite_layer=TRUE)
rgdal::writeOGR(obj=boundaryRegShp_i,
dsn=paste(getwd(),"/dataFiles/gis/metis/gcam",sep=""),
layer=paste("region32_0p5deg_regions",sep=""),
driver="ESRI Shapefile", overwrite_layer=TRUE)
# Read in Boundary Region
# Read in the GCAM 32 regions shapefile which comes with metis.
boundaryRegShpFolder_i <- paste(getwd(),"/dataFiles/gis/metis/gcam",sep="")
boundaryRegShpFile_i <- paste("region32_0p5deg_regions",sep="")
boundaryRegShp_i = readOGR(dsn=boundaryRegShpFolder_i,layer=boundaryRegShpFile_i,use_iconv=T,encoding='UTF-8')
head(boundaryRegShp_i@data)
boundaryRegCol_i = "region"
metis.map(dataPolygon=boundaryRegShp_i,fillColumn = boundaryRegCol_i,labels=F ,printFig=F,facetsON=F)
