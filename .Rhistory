if(nrow(tbl_sp)>0){
if(length(unique(tbl_sp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_sp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figBar_",j,"_compareRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_sp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figLines_",j,"_compareRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,pdfpng=pdfpng
)
} # Close if(nrow(tbl_sp)>0)
} # close loop for param
} # close loop for scenario
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(j in unique(tbl$param)){
tbl_p<-tbl%>%dplyr::filter(param==j)
if(nrow(tbl_p)>0){
if(length(unique(tbl_p$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_p, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_p,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLine_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_p[[xData]]))<5){
tbl_py <- tbl_p}else{
xCompare<-c(unique(tbl_p[[xData]])[1],
unique(tbl_p[[xData]])[round(length(unique(tbl_p[[xData]]))/2)],
utils::tail(unique(tbl_p[[xData]]),n=1)
)
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)
}
}
if(length(unique(tbl_py$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_py, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegion_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_py$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_pAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_pAgg<-dplyr::bind_rows(tbl_pAggsums,tbl_pAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_pAgg)>0){
# Bar Chart Dodged
metis.chart(tbl_pAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
class ="scenario", position ="dodge", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDodged_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
)
# Line Chart Overlapped
metis.chart(tbl_pAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",class ="scenario", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineOverlap_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
if(!scenRef %in% unique(tbl_p$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_pd<-tbl_p%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_p)){tbl_pd<-tbl_pd%>%dplyr::select(-one_of(c(yData)))}
for (k in unique(tbl_p$scenario)[unique(tbl_p$scenario)!=scenRef_i]){
tbl_temp <- tbl_p%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-one_of(c(yData)))}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-one_of(c(k,scenRef_i)))
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_pd<-dplyr::bind_rows(tbl_pd,tbl_temp)
}
tbl_pd <-tbl_pd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_pd$scenario)[unique(tbl_pd$scenario)!=scenRef_i])))
if(length(unique(tbl_pd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # Close if multiple scenarios available
} # if length(unique(tbl$region))>1
if(regionCompareOnly!=1){
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(i in unique(tbl$region)){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(nrow(tbl_rsp)>0){
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_rsp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rsp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figLine_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(i in unique(tbl$region)){
for(j in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==i,
param==j)
if(nrow(tbl_rp)>0){
if(length(unique(tbl_rp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_rp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBar_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLine_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_rp[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_rp[[xData]]))<5){
tbl_rpy <- tbl_rp}else{
xCompare<-c(unique(tbl_rp[[xData]])[1],
unique(tbl_rp[[xData]])[round(length(unique(tbl_rp[[xData]]))/2)],
utils::tail(unique(tbl_rp[[xData]]),n=1)
)
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)
}
}
if(length(unique(tbl_rpy$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_rpy, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBar_",i,"_compareScen_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpy$x)[unique(tbl_rpy$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpy$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_rpAgg<-dplyr::bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_rpAgg)>0){
if(length(unique(tbl_rpAgg$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart Dodged
metis.chart(tbl_rpAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = classPalette,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBarDodged_",i,"_compareScen_",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,pdfpng=pdfpng
)
# Line Chart Overlapped
metis.chart(tbl_rpAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_columns="none",
class ="scenario", classPalette = classPalette,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLineOverlap_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,pdfpng=pdfpng
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
if(!scenRef %in% unique(tbl_rp$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_rp)){tbl_rpd<-tbl_rpd%>%dplyr::select(-one_of(c(yData)))}
for (k in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef_i]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-one_of(c(yData)))}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-one_of(c(k,scenRef_i)))
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_rpd<-dplyr::bind_rows(tbl_rpd,tbl_temp)
}
tbl_rpd <-tbl_rpd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_rpd$scenario)[unique(tbl_rpd$scenario)!=scenRef_i])))
if(length(unique(tbl_rpd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
metis.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBarDiff_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLineDiff_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
} # Close if(regionCompareOnly==1)
return(tbl)
} # Close Function
charts<-metis.chartsProcess(rTable=rTable, # Default is NULL
#dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2015","2030","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0 # Default is "0"
)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------
# India Polygons
#----------------
NE0<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_0_countries",use_iconv=T,encoding='UTF-8')
NE1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_1_states_provinces",use_iconv=T,encoding='UTF-8')
GCAMBasins<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/basin_GCAM",sep=""),
layer="Global235_CLM_final_5arcmin_multipart",use_iconv=T,encoding='UTF-8')
metis.map(GCAMBasins,fillColumn = "basin_name",facetsON = F)
projX<-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
NE0<-spTransform(NE0,CRS(projX))
NE1<-spTransform(NE1,CRS(projX))
GCAMBasins<-spTransform(GCAMBasins,CRS(projX))
BrazilNE0<-NE0[(NE0$NAME=="Brazil"),]
head(BrazilNE0@data)
plot(BrazilNE0)
BrazilNE1<-raster::crop(NE1,BrazilNE0)
head(BrazilNE1@data)
plot(BrazilNE1)
BrazilGCAMBasins<-raster::crop(GCAMBasins,BrazilNE0)
head(BrazilGCAMBasins@data)
plot(BrazilGCAMBasins)
# Boundaries
#-----------------
boundaries<- metis.boundaries(
boundaryRegShape=NE0,#
#boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),#
boundaryRegCol="NAME",#
boundaryRegionsSelect="Brazil",#
subRegShape=BrazilGCAMBasins,#
#subRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#subRegShpFile=paste("ne_10m_admin_1_states_provinces",sep=""),#
subRegCol="basin_name",#
#subRegionsSelect=NULL,#
subRegType="Basin",#
#dirOutputs=paste(getwd(),"/outputs",sep=""),#
nameAppend="_local",#
expandPercent=2,#
#overlapShape=indiaGCAMBasin,#
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",#
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),#
labelsSize=0.7,#
extension = T,
cropSubShape2Bound = F
)
boundaries<- metis.boundaries(
boundaryRegShape=NE0,#
#boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),#
boundaryRegCol="NAME",#
boundaryRegionsSelect="Brazil",#
subRegShape=BrazilNE1,#
#subRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#subRegShpFile=paste("ne_10m_admin_1_states_provinces",sep=""),#
subRegCol="name",#
#subRegionsSelect=NULL,#
subRegType="States",#
#dirOutputs=paste(getwd(),"/outputs",sep=""),#
nameAppend="_local",#
expandPercent=2,#
overlapShape=BrazilGCAMBasins,#
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",#
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),#
labelsSize=0.7,#
extension = T,
cropSubShape2Bound = F
)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------
# India Polygons
#----------------
NE0<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_0_countries",use_iconv=T,encoding='UTF-8')
NE1<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),
layer="ne_10m_admin_1_states_provinces",use_iconv=T,encoding='UTF-8')
GCAMBasins<-readOGR(dsn=paste(getwd(),"/dataFiles/gis/basin_GCAM",sep=""),
layer="Global235_CLM_final_5arcmin_multipart",use_iconv=T,encoding='UTF-8')
metis.map(GCAMBasins,fillColumn = "basin_name",facetsON = F)
projX<-"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
NE0<-spTransform(NE0,CRS(projX))
NE1<-spTransform(NE1,CRS(projX))
GCAMBasins<-spTransform(GCAMBasins,CRS(projX))
BrazilNE0<-NE0[(NE0$NAME=="Brazil"),]
head(BrazilNE0@data)
plot(BrazilNE0)
BrazilNE1<-raster::crop(NE1,BrazilNE0)
head(BrazilNE1@data)
plot(BrazilNE1)
BrazilGCAMBasins<-raster::crop(GCAMBasins,BrazilNE0)
head(BrazilGCAMBasins@data)
plot(BrazilGCAMBasins)
# Boundaries
#-----------------
boundaries<- metis.boundaries(
boundaryRegShape=NE0,#
#boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),#
boundaryRegCol="NAME",#
boundaryRegionsSelect="Brazil",#
subRegShape=BrazilGCAMBasins,#
#subRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#subRegShpFile=paste("ne_10m_admin_1_states_provinces",sep=""),#
subRegCol="basin_name",#
#subRegionsSelect=NULL,#
subRegType="Basin",#
#dirOutputs=paste(getwd(),"/outputs",sep=""),#
nameAppend="_local",#
expandPercent=2,#
#overlapShape=indiaGCAMBasin,#
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",#
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),#
labelsSize=0.7,#
extension = T,
cropSubShape2Bound = F,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep=""))
)
boundaries<- metis.boundaries(
boundaryRegShape=NE0,#
#boundaryRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#boundaryRegShpFile=paste("ne_10m_admin_0_countries",sep=""),#
boundaryRegCol="NAME",#
boundaryRegionsSelect="Brazil",#
subRegShape=BrazilNE1,#
#subRegShpFolder=paste(getwd(),"/dataFiles/gis/naturalEarth",sep=""),#
#subRegShpFile=paste("ne_10m_admin_1_states_provinces",sep=""),#
subRegCol="name",#
#subRegionsSelect=NULL,#
subRegType="States",#
#dirOutputs=paste(getwd(),"/outputs",sep=""),#
nameAppend="_local",#
expandPercent=2,#
overlapShape=BrazilGCAMBasins,#
#overlapShpFile="Global235_CLM_final_5arcmin_multipart",#
#overlapShpFolder=paste(getwd(),"/dataFiles/gis/basin_gcam",sep=""),#
labelsSize=0.7,#
extension = T,
cropSubShape2Bound = F,
grids = c(paste(getwd(),"/dataFiles/grids/emptyGrids/grid_025.csv",sep=""),
paste(getwd(),"/dataFiles/grids/emptyGrids/grid_050.csv",sep=""))
)
