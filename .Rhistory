a1<-shape
a1@data<-a1@data%>%dplyr::left_join(datax%>%dplyr::filter(scenarioGCM==GCM_i,scenarioRCP==RCP_i),by="subRegion")%>%
dplyr::select(names(datax))
if(is.null(mapx)){mapx<-a1}else{mapx<-rbind(mapx,a1,makeUniqueIDs = TRUE)}
}}
legendStyleMulti="fixed"
legendTitleMulti=paste(x_i,"\n",legendTitle,sep="")
panelLabelMulti=NULL
mapTitle=paste("Absolute Difference (Scenario less Reference Mean)\nRef GCM: ",
refGCM," Ref RCP:",refRCP,
"\nReference mean years: ",min(chosenRefMeanYearsX),"to",max(chosenRefMeanYearsX))
metis.map(mapTitle = mapTitle,panelLabel=panelLabelMulti,
underLayer=NULL, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion,-scenarioGCM,-scenarioRCP)),
legendShow = T,
legendOutside = legendOutsideMulti,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitleSize = legendTitleSizeMulti,legendTextSize = legendTextSizeMulti,
legendTitle =legendTitleMulti,
legendStyle=legendStyleMulti,
legendBreaks = animKmeanBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionMulti,
fillPalette = fillPalette,
bgColor = "white",
figWidth=figWidth*max(1,min(2,length(unique(mapx@data[[multiFacetCols]]))/2)),
figHeight=figHeight*max(1,min(2,length(unique(mapx@data[[multiFacetRows]]))/2)),
multiFacetRows=multiFacetRows,
multiFacetCols=multiFacetCols,
mapTitleSize=mapTitleSize,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",sep = ""))
metis.map(mapTitle = mapTitle,panelLabel=panelLabelMulti,
underLayer=NULL, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion,-scenarioGCM,-scenarioRCP)),
legendShow = T,
legendOutside = legendOutsideMulti,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitleSize = legendTitleSizeMulti,legendTextSize = legendTextSizeMulti,
legendTitle =legendTitleMulti,
legendStyle=legendStyleMulti,
legendBreaks = animPrettyBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionMulti,
fillPalette = fillPalette,
bgColor = "white",
figWidth=figWidth*max(1,min(2,length(unique(mapx@data[[multiFacetCols]]))/2)),
figHeight=figHeight*max(1,min(2,length(unique(mapx@data[[multiFacetRows]]))/2)),
multiFacetRows=multiFacetRows,
multiFacetCols=multiFacetCols,
mapTitleSize=mapTitleSize,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",sep = ""))
metis.map(mapTitle = mapTitle,panelLabel=panelLabelMulti,
underLayer=NULL, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion,-scenarioGCM,-scenarioRCP)),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitleSize = legendTitleSizeI,legendTextSize = legendTextSizeI,
legendTitle =legendTitleMulti,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = "white",
figWidth=figWidth*max(1,min(2,length(unique(mapx@data[[multiFacetCols]]))/2)),
figHeight=figHeight*max(1,min(2,length(unique(mapx@data[[multiFacetRows]]))/2)),
multiFacetRows=multiFacetRows,
multiFacetCols=multiFacetCols,
mapTitleSize=mapTitleSize,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",sep = ""))
}# if(nrow(datax)>1){
}# Close years loop
} # Close Class loop
# Animate 1 : each param: If class > 1 { (Map x Class) x Anim Years}
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*PRETTY.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*KMEANS.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",ssp_i,"_",policy_i,"_",class_i,nameAppend,"_DIFF_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/compareYear",
"/*",param_i,"*",class_i,"*FREESCALE.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/compareGCMRCPSSP/", ssp_i,"/",policy_i,"/",
animName,sep = ""),
"\"",sep=""))
#unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
}# if(nrow(datax)>1){
} # close Params
} # Close subRegType loop
} # Close policy loop
} #Close ssp loop
} # Check for multiple GCM and RCPS
} # Close if(GCMRCPSSPPol==T){
if(indvScenarios==T){
for (scenario_i in unique(shapeTbl$scenario)){
for (subRegType_i in unique(shapeTbl$subRegType)){
for (param_i in unique(shapeTbl$param)){
if(nrow(shapeTbl%>%dplyr::filter(subRegType==subRegType_i,scenario==scenario_i,param==param_i))>0){
animScalePoly<-(shapeTbl%>%dplyr::filter(subRegType==subRegType_i,scenario==scenario_i,param==param_i))$value
animPrettyBreaksPoly<-scales::pretty_breaks(n=legendFixedBreaks)(animScalePoly)
animKmeanBreaksPoly<-sort(as.vector((stats::kmeans(animScalePoly,centers=legendFixedBreaks))$centers[,1]))
if((max(range(animScalePoly))-min(range(animScalePoly)))<1E-10 &
(max(range(animScalePoly))-min(range(animScalePoly)))>-1E-10){animScalePolyRange=min(animScalePoly)}else{
animScalePolyRange=range(animScalePoly)
}
if(mean(animScalePolyRange,na.rm = T)<0.01 & mean(animScalePolyRange,na.rm = T)>(-0.01)){animLegendDigits<-4}else{
if(mean(animScalePolyRange,na.rm = T)<0.1 & mean(animScalePolyRange,na.rm = T)>(-0.1)){animLegendDigits<-3}else{
if(mean(animScalePolyRange,na.rm = T)<1 & mean(animScalePolyRange,na.rm = T)>(-1)){animLegendDigits<-2}else{
if(mean(animScalePolyRange,na.rm = T)<10 & mean(animScalePolyRange,na.rm = T)>(-10)){animLegendDigits<-1}else{animLegendDigits<-0}}}}
# Figure 1 : each param: If class > 1 { (Map x Class) x Selected Years}
shapeTblx<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,
param==param_i)
for (x_i in unique(shapeTbl$x)){
datax<-shapeTblx%>%dplyr::filter(x==x_i)
if(nrow(datax)>1){
legendTitle<-unique(datax$units)
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,class,value)%>%
tidyr::spread(key=class,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)
legendAnimatedPosition=legendPositionS
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS
legendBreaksAnim = animKmeanBreaksPoly
legendStyleAnim="fixed"}else{
legendStyleAnim="fixed"
legendBreaksAnim = animKmeanBreaksPoly
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
legendAnimatedPosition=legendPositionS
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS
}
metis.map(panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendTitle =legendTitleAnimated,
legendStyle=legendStyleAnim,
legendBreaks = animKmeanBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendBreaksAnim = animPrettyBreaksPoly
legendStyleAnim="fixed"}else{
legendStyleAnim="fixed"
legendBreaksAnim = animPrettyBreaksPoly
}
metis.map(panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle=legendStyleAnim,
legendBreaks = animPrettyBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=legendOutsideSingle
legendAnimatedPosition
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendAnimatedPosition=legendPosition
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(panelLabel= panelLabelAnimated,underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
figWidth=figWidth,
figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
}# if(nrow(datax)>1){
}# Close years loop
# Animate 1 : each param: If class > 1 { (Map x Class) x Anim Years}
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*PRETTY.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*KMEANS.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",
"/*",param_i,"*FREESCALE.png ",sep = ""),
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
#unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
#------------------------------
# Figure 2 : each param: If class ==1 { Map x years}
#-----------------------------
checkTbl<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,param==param_i)
checkTbl<-droplevels(checkTbl)
if(length(unique(checkTbl$class))==1){
rm(checkTbl)
datax<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(nrow(datax)>1){
legendTitle<-paste(unique(datax$units),sep="")
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,x,value)%>%
tidyr::spread(key=x,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
if(length(names(mapx@data))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
# Calculate Mean
datax<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(nrow(datax)>1){
legendTitle<-paste(unique(datax$units),sep="")
fillPalette<-as.character(unique(datax$classPalette))
datax<-datax%>%dplyr::select(subRegion,x,value)%>%
dplyr::group_by(subRegion)%>%
dplyr::summarize(!!paste("Mean_",min(xRange),"to",max(xRange),sep=""):=mean(value))%>%
dplyr::ungroup()
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideSingle,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeS,legendTextSize = legendTextSizeS,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
if(length(names(mapx@data))==1){
legendOutsideAnimated=legendOutsideSingle
legendTitleSizeAnim = legendTitleSizeS
legendTextSizeAnim = legendTextSizeS}else{
legendOutsideAnimated=F
legendTitleSizeAnim = legendTitleSizeI
legendTextSizeAnim = legendTextSizeI
}
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
panelLabel = paste((names(datax%>%dplyr::select(-subRegion))[!names(datax%>%dplyr::select(-subRegion)) %in% c("lat","lon")]),sep=""),
legendTitle =paste(legendTitle,sep=""),
legendTitleSize = legendTitleSizeAnim,legendTextSize = legendTextSizeAnim,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPositionS,
fillPalette = fillPalette,
bgColor = bgColorChosen,figWidth=figWidth,figHeight=figHeight,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_MEAN_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
}  #if(nrow(datax)>1){
}  #if(nrow(datax)>1){
} # If number of classes == 1
} # If nrow greater than 0
} # close Params
} # Close subRegType loop
} # Close scenario loop
} # Close if(indvScenarios=T)
} # Close if shapeTbl is NUll
} # close function
metis.mapProcess(polygonDataTables=polygonDataTables_i,
gridDataTables=gridDataTables_i,
xRange=xRange_i,
boundaryRegShape=boundaryRegShape_i,
boundaryRegShpFolder=boundaryRegShpFolder_i,
boundaryRegShpFile=boundaryRegShpFile_i,
boundaryRegCol=boundaryRegCol_i,
boundaryRegionsSelect=boundaryRegionsSelect_i,
subRegShape=subRegShape_i,
subRegShpFolder=subRegShpFolder_i,
subRegShpFile=subRegShpFile_i,
subRegCol=subRegCol_i,
subRegType=subRegType_i,
nameAppend=nameAppend_i,
legendOutsideSingle=legendOutsideSingle_i,
legendPosition=legendPosition_i,
animateOn=animateOn_i,
delay=delay_i,
scenRef=scenRef_i,
extension=T,
expandPercent = 3,
figWidth=6,
figHeight=7,
paramsSelect = paramsSelect_i,
scaleRange = scaleRange_i,
indvScenarios=F,
GCMRCPSSPPol=T,
multiFacetCols="scenarioRCP",
multiFacetRows="scenarioGCM",
legendOutsideMulti=T,
legendPositionMulti=NULL,
legendTitleSizeMulti=NULL,
legendTextSizeAnim=NULL,
legendTextSizeMulti=NULL,
refGCM="gfdl-esm2m",
refRCP="rcp2p6",
chosenRefMeanYears=c(2000:2020))
