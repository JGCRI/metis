print(paste("Skipping demeter runs",sep=""))
}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(timestepx in demeterTimesteps){
if(!file.exists(paste(demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""))){
print(paste("Demeter file: ", demeterFolder,"/landcover_",timestepx,"_timestep.csv is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""))
}else{
print(paste("Reading demeter data file: ",demeterFolder,"/landcover_",timestepx,"_timestep.csv...",sep=""))
gridx<-data.table::fread(paste(demeterFolder,"/landcover_",timestepx,"_timestep.csv",sep=""))%>%
tibble::as_tibble()%>%
dplyr::mutate(lat=latitude,lon=longitude,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=demeterScenario,
param="demeterLandUse",
units=demeterUnits,
aggType="depth",
x=timestepx,
classPalette="pal_green")%>%
dplyr::select(-aez_id,-region_id,-longitude,-latitude)%>%
tidyr::gather(key="class",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","x","classPalette"))
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if demeter file exists
} # close demeter file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close Demeter folder
if(!dir.exists(tethysFolder)){
print(paste("tethys folder: ", tethysFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping tethys runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
tethysScenarios<-character()
tethysGCMRCPs<-tibble()
tethysYears<-numeric()
for(tethysFile_i in tethysFiles){
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
if(!file.exists(paste(tethysFolder,"/",tethysFile_i,sep=""))){
print(paste("tethys file: ", tethysFolder,"/",tethysFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",tethysFolder,"/",tethysFile_i,sep=""))
}else{
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(tethysScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridx<-gridx%>%
dplyr::mutate(param=dplyr::case_when(grepl("nonag",class,ignore.case = T)~paste(param,"_nonAg",sep=""),
grepl("total",class,ignore.case = T)~paste(param,"_total",sep=""),
TRUE~param),
class=dplyr::case_when(grepl("wddom",class,ignore.case = T)~"Domestic",
grepl("elec",class,ignore.case = T)~"Electric",
grepl("irr",class,ignore.case = T)~"Irrigation",
grepl("liv",class,ignore.case = T)~"Livestock",
grepl("mfg",class,ignore.case = T)~"Manufacturing",
grepl("min",class,ignore.case = T)~"Mining",
grepl("nonag",class,ignore.case = T)~"Non Agriculture",
grepl("total",class,ignore.case = T)~"Total",
TRUE~class))
tethysScenarios<-unique(c(tethysScenarios,unique(gridx$scenario)))
tethysGCMRCP<-gridx %>%
dplyr::select(scenarioGCM,scenarioRCP) %>% distinct()
tethysGCMRCPs<-dplyr::bind_rows(tethysGCMRCPs,tethysGCMRCP)
tethysYears<-unique(gridx$x)
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if tethys file exists
} # close tethys file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close tethys folder
if(!file.exists(xanthosGridAreaHecsPath)){
print(paste("xanthos grid Area path: ", xanthosGridAreaHecsPath ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
if(!file.exists(xanthosCoordinatesPath)){
print(paste("xanthos coordinate path: ", xanthosCoordinatesPath ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
if(!dir.exists(xanthosFolder)){
print(paste("xanthos folder: ", xanthosFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping xanthos runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
xanthosScenarios<-character()
xanthosGCMRCPs<-tibble()
xanthosYears<-numeric()
for(xanthosFile_i in xanthosFiles){
if(!grepl(".csv",xanthosFile_i)){xanthosFile_i=paste(xanthosFile_i,".csv",sep="")}
if(!file.exists(paste(xanthosFolder,"/",xanthosFile_i,sep=""))){
print(paste("xanthos file: ", xanthosFolder,"/",xanthosFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",xanthosFolder,"/",xanthosFile_i,sep=""))
}else{
xanthosCoords<-data.table::fread(xanthosCoordinatesPath, header=F);
xanthosCoords<-xanthosCoords%>%dplyr::rename(lon=V2,lat=V3)%>%dplyr::select(lon,lat)
xanthosGridArea<-data.table::fread(xanthosGridAreaHecsPath, header=F);
xanthosGridArea<-xanthosGridArea%>%dplyr::rename(Area_hec=V1)%>%dplyr::mutate(Area_km2=0.01*Area_hec)%>%
dplyr::select(Area_hec,Area_km2)
print(paste("Reading xanthos data file: ",xanthosFile_i,"...",sep=""))
gridx<-data.table::fread(paste(xanthosFolder,"/",xanthosFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-id)
print(paste("Xanthos data file: ",xanthosFile_i," read.",sep=""))
names(gridx)<-gsub("X","",names(gridx))
if(nrow(gridx)!=nrow(xanthosCoords)){
stop(paste("Rows in xanthos file: ", xanthosFolder,"/",xanthosFile_i,
" not equal to rows in xanthos coords file: ",
xanthosCoordinatesPath,sep=""))}
if(nrow(gridx)!=nrow(xanthosGridArea)){
stop(paste("Rows in xanthos file: ", xanthosFolder,"/",xanthosFile_i,
" not equal to rows in xanthos coords file: ",
xanthosCoordinatesPath,sep=""))}
if(grepl("km3",xanthosFile_i)){
print(paste("Based on xanthos file name: ", xanthosFile_i, " has km3 data. Converting to mm...", sep=""))
gridx<-gridx/(xanthosGridArea$Area_km2/1000000)
gridx[gridx<0]=0
gridx<-dplyr::bind_cols(xanthosCoords,gridx)
xanthosUnits="Runoff (mm)"
print(paste("km3 data converted to mm.", sep=""))
}else{
print(paste("Based on xanthos filename: ", xanthosFile_i, " has mm data. Using mm.", sep=""))
gridx<-dplyr::bind_cols(xanthosCoords,gridx)}
if(grepl("pm_abcd_mrtm",xanthosFile_i)){
xanthosScenario<-sub("^pm_abcd_mrtm_", "", xanthosFile_i);xanthosScenario
xanthosScenario<-sub("\\_[0-9].*", "", xanthosScenario);xanthosScenario
xanthosGCM<-sub("_.*","",xanthosScenario); xanthosGCM
xanthosRCP<-sub(".*_","",xanthosScenario); xanthosRCP}else{
xanthosScenario<-xanthosScenarioAssign
xanthosGCM=NA;xanthosRCP=NA
}
if(grepl("mm",xanthosUnits)){aggType="depth"}else{aggType="vol"}
print(paste("Gathering data for xanthos filename: ", xanthosFile_i, " into year columns...", sep=""))
gridx<-gridx%>%dplyr::mutate(
scenarioGCM=xanthosGCM,
scenarioRCP=xanthosRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(xanthosScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="xanthosRunoff",
units=xanthosUnits,
aggType=aggType,
classPalette="pal_wet",
class="Runoff")%>%
tidyr::gather(key="x",value="value",
-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))%>%
tibble::as_tibble()
print(paste("Data for xanthos file gathered into columns.", sep=""))
gridx$x<-as.numeric(gridx$x)
xanthosScenarios<-unique(c(xanthosScenarios,unique(gridx$scenario)))
xanthosGCMRCP<-gridx %>%
dplyr::select(scenarioGCM,scenarioRCP) %>% distinct()
xanthosGCMRCPs<-dplyr::bind_rows(xanthosGCMRCPs,xanthosGCMRCP)
xanthosYears<-unique(gridx$x)
# Apply Lowess Filter
# https://stat.ethz.ch/pipermail/bioconductor/2003-September/002337.html
# https://www.rdocumentation.org/packages/gplots/versions/3.0.1/topics/lowess
print(paste("Applying lowess filter to file: ", xanthosFile_i, " using lowess span of ",spanLowess,"...", sep=""))
gridx <- gridx %>%
dplyr::group_by(lat,lon,scenario,param,units,aggType,classPalette,class) %>%
dplyr::arrange(lat,lon) %>%
dplyr::mutate(lowess = stats::lowess(y=value, x=x, f=spanLowess )$y)
print(paste("Lowess filter applied.", sep=""))
for(i in c(1,5,40,100,149,180)){
gridC<-gridx[(gridx$lat==unique(gridx$lat)[i] & gridx$lon==unique(gridx$lon)[i]),]
fname=paste(unique(gridC$scenario),"_",unique(gridC$param),
"_lat",unique(gridC$lat),"_lon", unique(gridC$lon),
"_lowessSpan",spanLowess,sep="")
metis.printPdfPng(figure=graphics::plot(gridC$x,gridC$value,type="l",
main=paste(unique(gridC$scenario),
"\nlat = ",unique(gridC$lat),", lon = ", unique(gridC$lon),
", Lowess Span =  ",spanLowess,sep=""),
ylab=unique(gridC$units),xlab="Year")+
graphics::lines(gridC$x,gridC$lowess,type="l",col="red"),
dir=paste(dirOutputs, "/Grids/diagnostics",sep=""),filename=fname,figWidth=9,figHeight=7,pdfpng="png")
}
gridx<-gridx%>%dplyr::mutate(value=lowess)%>%dplyr::select(-lowess)
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if xanthos file exists
} # close xanthos file loops
} # Close xanthos folder
} # close If xanthosCoords path exists
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # close If xanthosGridAreaHecsPath path exists
!dir.exists(biaFolder)
print(paste("bia folder: ", biaFolder ," is incorrect or doesn't exist.",sep=""))
biaFolder
biaFolder=paste(getwd(),"/dataFiles/grids/bia/",sep="")
biaScenarioAssign="Eg1"
biaFiles=c("global_power_plant_database_MW")
biaFolder=biaFolder
biaFiles=biaFiles
biaScenarioAssign=biaScenarioAssign
dirOutputs=dirOutputs
reReadData=reReadData
gridMetisData=gridMetisData
sqliteUSE = sqliteUSE
sqliteDBNamePath = sqliteDBNamePath
print(paste("bia folder: ", biaFolder ," is incorrect or doesn't exist.",sep=""))
!dir.exists(biaFolder)
sqliteUSE==T
biaScenarios<-character()
biaYears<-numeric()
biaFiles
biaFile_i<-"global_power_plant_database_MW"
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
!file.exists(paste(biaFolder,"/",biaFile_i,sep=""))
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridx<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-country,-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
grepl("GW",biaFile_i)
print(paste("Based on bia filename: ", biaFile_i, " has MW data. Using MW.", sep=""))
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridx<-gridx%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw)%>%
#tidyr::gather(key="x",value="value",
#             -c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class","commissioning_year","year_of_capacity_data"))  #%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
head(gridx)
gridx$x<-as.numeric(gridx$x)
biaScenarios<-c(biaScenarios,biaScenario)
biaYears<-unique(gridx$x)
gridWRI<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)
biaScenario<-biaScenarioAssign
biaGCM=NA;biaRCP=NA
aggType="vol"
gridWRI<-gridWRI%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (GW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class1=fuel1,
value=capacity_mw/1000,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016,
region=country_long)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh,-country_long)
gridWRI[gridWRI=="United States of America"]<-"USA"
gridWRI <- gridWRI%>%
dplyr::group_by(region, class1)%>%
dplyr::summarise(WRI_total_capacity=sum(value))%>%
dplyr::filter(region %in% regionsSelect)
regionsSelect
regionsSelect<-"Pakistan"
gridWRI <- gridWRI%>%
dplyr::group_by(region, class1)%>%
dplyr::summarise(WRI_total_capacity=sum(value))%>%
dplyr::filter(region %in% regionsSelect)
gridWRI[gridWRI=="Coal"]<-"a Coal"
gridWRI[gridWRI=="Gas"]<-"c Gas"
gridWRI[gridWRI=="Oil"]<-"e Oil"
gridWRI[gridWRI=="Biomass"]<-"g Biomass"
gridWRI[gridWRI=="Nuclear"]<-"i Nuclear"
gridWRI[gridWRI=="Geothermal"]<-"j Geothermal"
gridWRI[gridWRI=="Hydro"]<-"k Hydro"
gridWRI[gridWRI=="Wind"]<-"l Wind"
gridWRI[gridWRI=="Solar"]<-"m Solar"
gridGCAMelecCap<-datax%>%dplyr::filter(region %in% regionsSelect, param=="elecCapBySubsector", x==2015)%>%
dplyr::mutate(GCAM_total_capacity=value)%>%
dplyr::select(-c(value))
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridx<-gridx%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw)%>%
#tidyr::gather(key="x",value="value",
#             -c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class","commissioning_year","year_of_capacity_data"))  #%>%
tibble::as_tibble()
gridx<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-country,-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridx<-gridx%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw)%>%
#tidyr::gather(key="x",value="value",
#             -c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class","commissioning_year","year_of_capacity_data"))  #%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridx$x<-as.numeric(gridx$x)
biaScenarios<-c(biaScenarios,biaScenario)
biaYears<-unique(gridx$x)
gridWRI<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)
biaScenario<-biaScenarioAssign
biaGCM=NA;biaRCP=NA
aggType="vol"
gridWRI<-gridWRI%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (GW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class1=fuel1,
value=capacity_mw/1000,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016,
region=country_long)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh,-country_long)
gridWRI[gridWRI=="United States of America"]<-"USA"
gridWRI <- gridWRI%>%
dplyr::group_by(region, class1)%>%
dplyr::summarise(WRI_total_capacity=sum(value))%>%
dplyr::filter(region %in% regionsSelect)
gridWRI[gridWRI=="Coal"]<-"a Coal"
gridWRI[gridWRI=="Gas"]<-"c Gas"
gridWRI[gridWRI=="Oil"]<-"e Oil"
gridWRI[gridWRI=="Biomass"]<-"g Biomass"
gridWRI[gridWRI=="Nuclear"]<-"i Nuclear"
gridWRI[gridWRI=="Geothermal"]<-"j Geothermal"
gridWRI[gridWRI=="Hydro"]<-"k Hydro"
gridWRI[gridWRI=="Wind"]<-"l Wind"
gridWRI[gridWRI=="Solar"]<-"m Solar"
gridGCAMelecCap<-datax%>%dplyr::filter(region %in% regionsSelect, param=="elecCapBySubsector", x==2015)%>%
dplyr::mutate(GCAM_total_capacity=value)%>%
dplyr::select(-c(value))
gridWRI
gridGCAMelecCap<-gridWRI%>%dplyr::filter(region %in% regionsSelect, param=="elecCapBySubsector", x==2015)%>%
dplyr::mutate(GCAM_total_capacity=value)%>%
dplyr::select(-c(value))
head(gridWRI)
head(gridx)
library(metis)
gridMetis<-metis.prepGrid(
#demeterFolder=demeterFolder,
#demeterScenario=demeterScenario,
#demeterTimesteps=demeterTimesteps,
#demeterUnits=demeterUnits,
#tethysFolder=tethysFolder,
#tethysScenario=tethysScenario,
#copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
#tethysFiles=tethysFiles,
#tethysUnits=tethysUnits,
#xanthosFolder=xanthosFolder,
#xanthosScenarioAssign=xanthosScenarioAssign,   #andym from xanthosScenario=xanthosScenario,
#xanthosFiles=xanthosFiles,
#xanthosCoordinatesPath=xanthosCoordinatesPath,
#xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
#scarcityXanthosRollMeanWindow=scarcityXanthosRollMeanWindow,
biaFolder=biaFolder,
biaFiles=biaFiles,
biaScenarioAssign=biaScenarioAssign,
dirOutputs=dirOutputs,
reReadData=reReadData,
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath = sqliteDBNamePath
)
tethysGCMRCPs
library(metis)
gridMetis<-metis.prepGrid(
#demeterFolder=demeterFolder,
#demeterScenario=demeterScenario,
#demeterTimesteps=demeterTimesteps,
#demeterUnits=demeterUnits,
#tethysFolder=tethysFolder,
#tethysScenario=tethysScenario,
#copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
#tethysFiles=tethysFiles,
#tethysUnits=tethysUnits,
#xanthosFolder=xanthosFolder,
#xanthosScenarioAssign=xanthosScenarioAssign,   #andym from xanthosScenario=xanthosScenario,
#xanthosFiles=xanthosFiles,
#xanthosCoordinatesPath=xanthosCoordinatesPath,
#xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
#scarcityXanthosRollMeanWindow=scarcityXanthosRollMeanWindow,
biaFolder=biaFolder,
biaFiles=biaFiles,
biaScenarioAssign=biaScenarioAssign,
dirOutputs=dirOutputs,
reReadData=reReadData,
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath = sqliteDBNamePath
)
gridMetis<-metis.prepGrid(
#demeterFolder=demeterFolder,
#demeterScenario=demeterScenario,
#demeterTimesteps=demeterTimesteps,
#demeterUnits=demeterUnits,
#tethysFolder=tethysFolder,
#tethysScenario=tethysScenario,
#copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
#tethysFiles=tethysFiles,
#tethysUnits=tethysUnits,
#xanthosFolder=xanthosFolder,
#xanthosScenarioAssign=xanthosScenarioAssign,   #andym from xanthosScenario=xanthosScenario,
#xanthosFiles=xanthosFiles,
#xanthosCoordinatesPath=xanthosCoordinatesPath,
#xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
#scarcityXanthosRollMeanWindow=scarcityXanthosRollMeanWindow,
biaFolder=biaFolder,
biaFiles=biaFiles,
biaScenarioAssign=biaScenarioAssign,
dirOutputs=dirOutputs,
reReadData=reReadData,
gridMetisData=gridMetisData,
sqliteUSE = sqliteUSE,
sqliteDBNamePath = sqliteDBNamePath
)
library(metis)
head(gridMetis)
devtools::check()
?distinct
?unique
library(metis)
devtools::check()
devtools::check()
devtools::check()
