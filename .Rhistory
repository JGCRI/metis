dplyr::filter(grepl(copySingleTethysScenbyXanthos,scenarioTethys)) %>%
dplyr::mutate(scenarioGCM=xanthosGCMRCPs[row_i,]$scenarioGCM,
scenarioRCP=xanthosGCMRCPs[row_i,]$scenarioRCP))
}
gridMetisTethys<-gridMetisTethysX
rm(gridMetisTethysX)
paste("Tethys results for all xanthos GCM and RCPs copied.")
} else {paste(copySingleTethysScenbyXanthos, " not present in tethys scenarios: ",
paste(unique(gridMetisTethys$scenarioTethys),collapse=", "))}
}
gridx<-dplyr::left_join(gridMetisTethys,gridMetisXanthos%>%dplyr::select(lat,lon,x,scenarioXanthos,valueXanthos),
by=c("lat","lon","x","scenario"))%>%
dplyr::mutate(scarcity=valueTethys/valueXanthos,
units="Gridded Scarcity (Fraction)",
param="griddedScarcity",
class="Scarcity",
classPalette="pal_hot",
scenario=paste("T",scenarioTethys,"X",scenarioXanthos,sep="")) %>%
dplyr::select(-valueXanthos,-valueTethys, -scenarioTethys,-scenarioXanthos) %>%
dplyr::rename(value=scarcity)%>%
dplyr::filter(!is.na(value));
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
rm(gridx)
}}}else {print(paste("gridMetis is NULL, skipping gridded scracity calculation.",sep=""))}
} # Close sql Loop
} # Closing loop to check for tethys and xanthos GCMRCPs
#----------------
# Prepare gridded Population
#---------------
if(!dir.exists(popFolder)){
print(paste("pop folder: ", popFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping pop runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(popFile_i in popFiles){
popFile_i=gsub(".csv","",popFile_i)
if(!grepl(".csv",popFile_i)){popFile_i=paste(popFile_i,".csv",sep="")}
if(!file.exists(paste(popFolder,"/",popFile_i,sep=""))){
print(paste("pop file: ", popFolder,"/",popFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",popFolder,"/",popFile_i,sep=""))
}else{
print(paste("Reading population data file: ",popFile_i,"...",sep=""))
gridx<-data.table::fread(paste(popFolder,"/",popFile_i,sep=""))%>%
tibble::as_tibble()%>%dplyr::select(lon,lat,dplyr::contains("popGWP"))%>%
tidyr::gather(key="key",value="value",-c("lat","lon"))%>%
tidyr::separate(col="key",into=c("scenario","x"),sep="_")%>%
dplyr::mutate(param="population",
units=popUnits,
aggType="vol",
classPalette="pal_hot",
class="class")
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if pop file exists
} # close pop file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close pop folder
#----------------
# Prepare gridded Electricity generation and capacity from Bia
#---------------
if(!dir.exists(biaFolder)){
print(paste("bia folder: ", biaFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping bia runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(biaFile_i in biaFiles){
biaFile_i=gsub(".csv","",biaFile_i)
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
if(!file.exists(paste(biaFolder,"/",biaFile_i,sep=""))){
print(paste("bia file: ", biaFolder,"/",biaFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",biaFolder,"/",biaFile_i,sep=""))
}else{
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridx<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""))%>%
tibble::as_tibble()%>%
select(-value, -origValue)%>%
dplyr::mutate(aggType = "vol")%>%
dplyr::rename(lat = gridlat, lon = gridlon, class = class1, value = valueDistrib, origValue = origValueDistrib) %>%
select(-gridCellPercentage,-region,-region_32_code,-ctry_name,-ctry_code, -aggregate, -contains("orig"),-gridID)
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if bia file exists
} # close bia file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close bia folder
#----------------
# Prepare gridded Agricultural Production
#---------------
# Based on LU crop distribution and Ag production GCAM
# For each Scenario and each GCAM Region Calculate:
# relative percentage of area in each grid cell
# Total ag production of crop
# Distribute ag production by percentage
#----------------
# Prepare gridded Electricity Demands
#---------------
# WRI database + GCAM Elec demands
# Distribute electric demands by population percentage
# Test Unique Values
#a<-gridMetis%>%tidyr::unite(col="key",names(gridMetis)[!names(gridMetis) %in% c("lat","lon","value")],sep="_",remove=T)
#a<-a%>%tidyr::spread(key=key,value=value)
#--------------
# Save RData and csv.
#----------------
if(sqliteUSE==F){
if(nrow(gridMetis)>0){
save(gridMetis,file=gridMetisData)}
#data.table::fwrite(gridMetis,file = paste(dirOutputs, "/Grids/gridMetis.csv", sep = ""),row.names = F)
print(paste("gridMetis params: ", paste(unique(gridMetis$param),collapse=", "),sep=""))
#print(paste("gridMetis.csv saved in: ", paste(dirOutputs, "/Grids/gridMetis.csv", sep = ""),sep=""))
}else{
if(file.exists(sqliteDBNamePath)){paste("Gridded data saved in SQLite database : ",sqliteDBNamePath, sep="")}else{
print("No data added to gridMetis. Check datafiles folders to see if data is available.")}
}
}else{ # Close if reRead==1
if(sqliteUSE==T){
if(file.exists(sqliteDBNamePath)){paste("Re-read set to 0. Use data saved in SQLite database : ",sqliteDBNamePath, sep="")}}else{
if(!file.exists(gridMetisData)){stop(paste("File gridMetisData not found: ",gridMetisData,sep=""))}else{
load(gridMetisData)
paste("Re-read set to 0. Usig saved data from .R data : ",gridMetisData, sep="")}
}}
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
if(!dir.exists(popFolder)){
print(paste("pop folder: ", popFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping pop runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(popFile_i in popFiles){
popFile_i=gsub(".csv","",popFile_i)
if(!grepl(".csv",popFile_i)){popFile_i=paste(popFile_i,".csv",sep="")}
if(!file.exists(paste(popFolder,"/",popFile_i,sep=""))){
print(paste("pop file: ", popFolder,"/",popFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",popFolder,"/",popFile_i,sep=""))
}else{
print(paste("Reading population data file: ",popFile_i,"...",sep=""))
gridx<-data.table::fread(paste(popFolder,"/",popFile_i,sep=""))%>%
tibble::as_tibble()%>%dplyr::select(lon,lat,dplyr::contains("popGWP"))%>%
tidyr::gather(key="key",value="value",-c("lat","lon"))%>%
tidyr::separate(col="key",into=c("scenario","x"),sep="_")%>%
dplyr::mutate(param="population",
units=popUnits,
aggType="vol",
classPalette="pal_hot",
class="class")
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if pop file exists
} # close pop file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close pop folder
sqliteUSE
if(!dir.exists(biaFolder)){
print(paste("bia folder: ", biaFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping bia runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(biaFile_i in biaFiles){
biaFile_i=gsub(".csv","",biaFile_i)
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
if(!file.exists(paste(biaFolder,"/",biaFile_i,sep=""))){
print(paste("bia file: ", biaFolder,"/",biaFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",biaFolder,"/",biaFile_i,sep=""))
}else{
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridx<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""))%>%
tibble::as_tibble()%>%
select(-value, -origValue)%>%
dplyr::mutate(aggType = "vol")%>%
dplyr::rename(lat = gridlat, lon = gridlon, class = class1, value = valueDistrib, origValue = origValueDistrib) %>%
select(-gridCellPercentage,-region,-region_32_code,-ctry_name,-ctry_code, -aggregate, -contains("orig"),-gridID)
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if bia file exists
} # close bia file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close bia folder
head(gridMetis)
dirOutputs=paste(getwd(),"/outputs",sep="")
reReadData=1
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
copySingleTethysScenbyXanthos="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthosRunsChris/",sep="")
#xanthosScenario="Eg1"
#xanthosUnits="Runoff (mm)"
xanthosFiles=c(
#"pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_gfdl-esm2m_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp2p6_1950_2099.csv",
#  "pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_hadgem2-es_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_ipsl-cm5a-lr_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp6p0_1950_2099.csv",
# "pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_miroc-esm-chem_rcp8p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp2p6_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp4p5_1950_2099.csv",
# "pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp6p0_1950_2099.csv",
"pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099/q_km3peryear_pm_abcd_mrtm_noresm1-m_rcp8p5_1950_2099.csv"
)
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
scarcityXanthosRollMeanWindow=10
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetis.RData", sep = "")
sqliteUSE = T
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
sqliteUSE = F
gridMetis<-metis.prepGrid(
reReadData=reReadData,
# demeterFolder=demeterFolder,
# demeterScenario=demeterScenario,
# demeterTimesteps=demeterTimesteps,
# demeterUnits=demeterUnits,
# tethysFolder=tethysFolder,
# tethysScenario=tethysScenario,
# copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
# tethysFiles=tethysFiles,
# tethysUnits=tethysUnits,
# xanthosFolder=xanthosFolder,
# xanthosFiles=xanthosFiles,
# xanthosCoordinatesPath=xanthosCoordinatesPath,
# xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
biaFolder=paste(getwd(),"/dataFiles/grids/bia/biaOutputs",sep=""),
biaFiles="dataBia.csv",
spanLowess=spanLowess,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
sqliteUSE = T
gridMetis<-metis.prepGrid(
reReadData=reReadData,
# demeterFolder=demeterFolder,
# demeterScenario=demeterScenario,
# demeterTimesteps=demeterTimesteps,
# demeterUnits=demeterUnits,
# tethysFolder=tethysFolder,
# tethysScenario=tethysScenario,
# copySingleTethysScenbyXanthos=copySingleTethysScenbyXanthos,
# tethysFiles=tethysFiles,
# tethysUnits=tethysUnits,
# xanthosFolder=xanthosFolder,
# xanthosFiles=xanthosFiles,
# xanthosCoordinatesPath=xanthosCoordinatesPath,
# xanthosGridAreaHecsPath=xanthosGridAreaHecsPath,
biaFolder=paste(getwd(),"/dataFiles/grids/bia/biaOutputs",sep=""),
biaFiles="dataBia.csv",
spanLowess=spanLowess,
dirOutputs=paste(getwd(),"/outputs",sep=""),
gridMetisData=gridMetisData,
popFolder=popFolder,
popFiles=popFiles,
popUnits=popUnits,
sqliteUSE = sqliteUSE,
sqliteDBNamePath =sqliteDBNamePath)
gridMetis
names(gridMetis)
print(paste("bia folder: ", biaFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping bia runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
biaFile_i
biaFile_i=gsub(".csv","",biaFile_i)
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridx<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""))%>%
tibble::as_tibble()%>%
select(-value, -origValue)%>%
dplyr::mutate(aggType = "vol")%>%
dplyr::rename(lat = gridlat, lon = gridlon, class = class1, value = valueDistrib, origValue = origValueDistrib) %>%
select(-gridCellPercentage,-region,-region_32_code,-ctry_name,-ctry_code, -aggregate, -contains("orig"),-gridID)
gridx$x<-as.numeric(gridx$x)
print("File read.")
gridx
names(gridx)
if(!dir.exists(popFolder)){
print(paste("pop folder: ", popFolder ," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping pop runs",sep=""))}else {
if(sqliteUSE==T){dbConn <- DBI::dbConnect(RSQLite::SQLite(), sqliteDBNamePath)}
for(popFile_i in popFiles){
popFile_i=gsub(".csv","",popFile_i)
if(!grepl(".csv",popFile_i)){popFile_i=paste(popFile_i,".csv",sep="")}
if(!file.exists(paste(popFolder,"/",popFile_i,sep=""))){
print(paste("pop file: ", popFolder,"/",popFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",popFolder,"/",popFile_i,sep=""))
}else{
print(paste("Reading population data file: ",popFile_i,"...",sep=""))
gridx<-data.table::fread(paste(popFolder,"/",popFile_i,sep=""))%>%
tibble::as_tibble()%>%dplyr::select(lon,lat,dplyr::contains("popGWP"))%>%
tidyr::gather(key="key",value="value",-c("lat","lon"))%>%
tidyr::separate(col="key",into=c("scenario","x"),sep="_")%>%
dplyr::mutate(param="population",
units=popUnits,
aggType="vol",
classPalette="pal_hot",
class="class")
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if pop file exists
} # close pop file loops
if(sqliteUSE==T){DBI::dbDisconnect(dbConn)}
} # Close pop folder
gridx
popFile_i=gsub(".csv","",popFile_i)
if(!grepl(".csv",popFile_i)){popFile_i=paste(popFile_i,".csv",sep="")}
if(!file.exists(paste(popFolder,"/",popFile_i,sep=""))){
print(paste("pop file: ", popFolder,"/",popFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",popFolder,"/",popFile_i,sep=""))
}else{
print(paste("Reading population data file: ",popFile_i,"...",sep=""))
gridx<-data.table::fread(paste(popFolder,"/",popFile_i,sep=""))%>%
tibble::as_tibble()%>%dplyr::select(lon,lat,dplyr::contains("popGWP"))%>%
tidyr::gather(key="key",value="value",-c("lat","lon"))%>%
tidyr::separate(col="key",into=c("scenario","x"),sep="_")%>%
dplyr::mutate(param="population",
units=popUnits,
aggType="vol",
classPalette="pal_hot",
class="class")
gridx$x<-as.numeric(gridx$x)
print("File read.")
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if pop file exists
popFile_i=gsub(".csv","",popFile_i)
if(!grepl(".csv",popFile_i)){popFile_i=paste(popFile_i,".csv",sep="")}
print(paste("Reading population data file: ",popFile_i,"...",sep=""))
gridx<-data.table::fread(paste(popFolder,"/",popFile_i,sep=""))%>%
tibble::as_tibble()%>%dplyr::select(lon,lat,dplyr::contains("popGWP"))%>%
tidyr::gather(key="key",value="value",-c("lat","lon"))%>%
tidyr::separate(col="key",into=c("scenario","x"),sep="_")%>%
dplyr::mutate(param="population",
units=popUnits,
aggType="vol",
classPalette="pal_hot",
class="class")
gridx$x<-as.numeric(gridx$x)
print("File read.")
gridx
tethysScenarios<-character()
tethysGCMRCPs<-tibble::tibble()
tethysYears<-numeric()
class_i=gsub(".csv","",tethysFile_i)
tethysFiles
for(tethysFile_i in tethysFiles){
class_i=gsub(".csv","",tethysFile_i)
if(!grepl(".csv",tethysFile_i)){tethysFile_i=paste(tethysFile_i,".csv",sep="")}
if(!file.exists(paste(tethysFolder,"/",tethysFile_i,sep=""))){
print(paste("tethys file: ", tethysFolder,"/",tethysFile_i," is incorrect or doesn't exist.",sep=""))
print(paste("Skipping file: ",tethysFolder,"/",tethysFile_i,sep=""))
}else{
print(paste("Reading tethys data file: ",tethysFile_i,"...",sep=""))
gridx<-data.table::fread(paste(tethysFolder,"/",tethysFile_i,sep=""),fill=T)%>%
tibble::as_tibble()%>%dplyr::select(-'# ID',-ilon,-ilat)
print("File read.")
names(gridx)<-gsub("X","",names(gridx))
if(grepl("mm",tethysUnits)){aggType="depth"}else{aggType="vol"}
gridx<-gridx%>%dplyr::select(-dplyr::contains("Unit"))
gridx<-gridx%>%
dplyr::mutate(lat=lat,lon=lon,
scenarioGCM=NA,
scenarioRCP=NA,
scenarioSSP=NA,
scenarioPolicy=NA,
scenario=paste(tethysScenario,scenarioSSP,scenarioPolicy,sep="_"),
param="tethysWatWithdraw",
units=tethysUnits,
aggType=aggType,
classPalette="pal_wet",
class=class_i)%>%
tidyr::gather(key="x",value="value",-c("lat","lon","scenario","scenarioPolicy","scenarioGCM","scenarioRCP","scenarioSSP","aggType","param","units","classPalette","class"))
gridx$x<-as.numeric(gridx$x)
gridx<-gridx%>%
dplyr::mutate(param=dplyr::case_when(grepl("nonag",class,ignore.case = T)~paste(param,"_nonAg",sep=""),
grepl("total",class,ignore.case = T)~paste(param,"_total",sep=""),
TRUE~paste(param,"_indv",sep="")),
class=dplyr::case_when(grepl("wddom",class,ignore.case = T)~"Domestic",
grepl("elec",class,ignore.case = T)~"Electric",
grepl("irr",class,ignore.case = T)~"Irrigation",
grepl("liv",class,ignore.case = T)~"Livestock",
grepl("mfg",class,ignore.case = T)~"Manufacturing",
grepl("min",class,ignore.case = T)~"Mining",
grepl("nonag",class,ignore.case = T)~"Non Agriculture",
grepl("total",class,ignore.case = T)~"Total",
TRUE~class))
tethysScenarios<-unique(c(tethysScenarios,unique(gridx$scenario)))
tethysGCMRCP<-gridx %>%
dplyr::select(scenarioGCM,scenarioRCP) %>% dplyr::distinct()
tethysGCMRCPs<-dplyr::bind_rows(tethysGCMRCPs,tethysGCMRCP)
tethysGCMRCPs<-tethysGCMRCPs[stats::complete.cases(tethysGCMRCPs),]
tethysYears<-unique(gridx$x)
if(sqliteUSE==T){
DBI::dbWriteTable(dbConn, "gridMetis", gridx, append=T)
print(paste("Saving data to sqlite as sqlitUSE = ",sqliteUSE,sep=""))
}else{
print(paste("Using .Rdata format to save data.",sep=""))
gridMetis<-dplyr::bind_rows(gridMetis,gridx)
}
rm(gridx)
} # Close if tethys file exists
} # close tethys file loops
gridx
names(gridx)
colsSelect <- names(gridx)[names(gridx) %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value")]
colsSelect
colsSelect <- names(gridx)[names(gridx) %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value","random")]
colsSelect
colsSelect <- names(gridx)["random" %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value","random")]
colsSelect
colsSelect <- names(gridx)["random" %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value","random")]
colsSelect
"random" %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value","random")
colsSelect <- c("random","x")[c("random","x") %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value","random")]
colsSelect
colsSelect <- names(gridx)[names(gridx) %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value")]
gridx <- gridx %>% dplyr::select(colsSelect)
addMissing<-function(data){
if(!"scenario"%in%names(data)){data<-data%>%dplyr::mutate(scenario="scenario")}
if(!"x"%in%names(data)){if("year"%in%names(data)){
data<-data%>%dplyr::mutate(x=year)}else{data<-data%>%dplyr::mutate(x="x")}}
if(!"region"%in%names(data)){data<-data%>%dplyr::mutate(region="region")}
if(!"classPalette"%in%names(data)){data<-data%>%dplyr::mutate(classPalette="pal_hot")}
if(!"param"%in%names(data)){data<-data%>%dplyr::mutate(param="param")}
if(!"scenarioGCM"%in%names(data)){data<-data%>%dplyr::mutate(scenarioGCM="scenarioGCM")}
if(!"scenarioRCP"%in%names(data)){data<-data%>%dplyr::mutate(scenarioRCP="scenarioRCP")}
if(!"scenarioSSP"%in%names(data)){data<-data%>%dplyr::mutate(scenarioSSP="scenarioSSP")}
if(!"scenarioPolicy"%in%names(data)){data<-data%>%dplyr::mutate(scenarioPolicy="scenarioPolicy")}
if(!"class"%in%names(data)){data<-data%>%dplyr::mutate(class="scenarioPolicy")}
if(!"class2"%in%names(data)){data<-data%>%dplyr::mutate(class2="class2")}
if(!"aggType"%in%names(data)){data<-data%>%dplyr::mutate(aggType="aggType")}
if(!"lon"%in%names(data)){data<-data%>%dplyr::mutate(lon="lon")}
if(!"lat"%in%names(data)){data<-data%>%dplyr::mutate(lat="lat")}
if(!"units"%in%names(data)){data<-data%>%dplyr::mutate(units="units")}
return(data)
}
gridx<-addMissing(gridx)
colsSelect <- names(gridx)[names(gridx) %in% c( "lon","lat","scenarioGCM","scenarioRCP","scenarioSSP","scenarioPolicy","scenario",
"param","units","aggType","classPalette","class","x","value")]
gridx <- gridx %>% dplyr::select(colsSelect)
gridx
gridx<-addMissing(gridx); gridx
