if(!"classLabel2"%in%names(data)){data<-data%>%mutate(classLabel2="classLabel2")}
if(!"classPalette2"%in%names(data)){data<-data%>%mutate(classPalette2=classPalette)}
if(!"origScen"%in%names(data)){data<-data%>%mutate(origScen="origScen")}
if(!"origQuery"%in%names(data)){data<-data%>%mutate(origQuery="origQuery")}
if(!"origUnits"%in%names(data)){data<-data%>%mutate(origUnits="origUnits")}
if(!"origX"%in%names(data)){data<-data%>%mutate(origX="origX")}
if(!"sources"%in%names(data)){data<-data%>%mutate(sources="sources")}
return(data)
}
#------------------
# Read in tables (Either csv tables (dataTables) or R data (rTables))
#------------------
tbl<-tibble()
if(is.null(dataTables) & is.null(rTable)){
stop ("No dataTable or rTables have been provided.")
}
# Read in csv (dataTables)
#------------------------
if(!is.null(dataTables)){
for(i in dataTables){
if(file.exists(i)){
tblNew<-read.csv(paste(i), stringsAsFactors = F)%>%as.tibble
if(length(unique(tblNew$vintage))<2){tblNew<-tblNew%>%mutate(vintage = paste("Vint_", x, sep = ""))}
tbl<-bind_rows(tbl,tblNew)
} else {stop(paste(i," does not exist"))}
}
# Join relevant colors and classes using the mapping file if it exists
if(file.exists(paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""))){
map<-read.csv(paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""), stringsAsFactors = F)%>%as.tibble
tbl<-tbl%>%left_join(map%>%dplyr::select(-class1,-class2),by=c("param","units"))
}
# Add missing columns
tbl<-addMissing(tbl)
}
# Read in R data (rTable)
#------------------------
if(!is.null(rTable)){
rTable<-addMissing(rTable)
rTable$origScen=as.character(rTable$origScen)
rTable$origQuery=as.character(rTable$origQuery)
rTable$origUnits=as.character(rTable$origUnits)
rTable$origX=as.character(rTable$origX)
tbl<-bind_rows(tbl,rTable)
}
tbl<-tbl%>%unique()%>%filter(region %in% regionsSelect)
if(any(xRange!="All")){if(is.numeric(tbl$x)){tbl<-tbl%>%filter(x %in% xRange)}}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
if (!dir.exists(paste(dirOutputs, "/Charts", sep = ""))){
dir.create(paste(dirOutputs, "/Charts", sep = ""))}
if(length(unique(tbl$region))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))}
for (j in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""))}
}
} # If length(unique(tbl$region))>1
if(regionCompareOnly==0){
for (i in unique(tbl$region)){
tbl_r<-tbl%>%filter(region==i)
if (!dir.exists(paste(dirOutputs, "/Charts/", i, sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Charts/", i, "/regional", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, "/regional", sep = ""))}
if(length(unique(tbl_r$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/", i, "/regional/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, "/regional/compareScen",sep = ""))}}
for (j in unique(tbl_r$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/", i, "/regional","/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/", i, "/regional","/", j,sep = ""))}
}
}
} # Close if(regionCompareOnly==0)
#------------------
# Tables
#------------------
for(i in unique(tbl$region)){
utils::write.csv(tbl%>%
dplyr::filter(region == i)%>%
dplyr::select(scenario,region,param,units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_",i,".csv", sep = ""),row.names = F)
}
utils::write.csv(tbl%>%
dplyr::select(scenario, region, units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_allRegions.csv", sep = ""),row.names = F)
#------------------------
# Print which parameters and regions if selected are available
#------------------------
if(any(paramsSelect!="All")){
if(all(paramsSelect %in% unique(tbl$param))){
print(paste("Running paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
}else{
print(paste("Parameters not available in data: ", paste(paramsSelect[!(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
print(paste("Running remaining paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(param %in% paramsSelect[(paramsSelect %in% unique(tbl$param))])
}
}
if(any(regionsSelect!="All")){
if(all(regionsSelect %in% unique(tbl$region))){
print(paste("Running regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
}else{
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(region %in% regionsSelect[(regionsSelect %in% unique(tbl$region))])
}
}
#------------------
# Create Charts for Regional Comparison
#------------------
if(length(unique(tbl$region))>1){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_sp<-tbl%>%dplyr::filter(scenario==j,
param==k)
if(nrow(tbl_sp)>0){
if(length(unique(tbl_sp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_sp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
filename = paste(k,"_figBar_",j,"_compareRegions",sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_sp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
filename = paste(k,"_figLines_",j,"_compareRegions",sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult
)
} # Close if(nrow(tbl_sp)>0)
} # close loop for param
} # close loop for scenario
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(j in unique(tbl$param)){
tbl_p<-tbl%>%dplyr::filter(param==j)
if(nrow(tbl_p)>0){
if(length(unique(tbl_p$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_p, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBar_compareScenRegions",sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_p,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLine_compareScenRegions",sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1)*figWMult
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%filter(x %in% xCompare)}else{
if(length(unique(tbl_p[[xData]]))<5){
tbl_py <- tbl_p}else{
xCompare<-c(unique(tbl_p[[xData]])[1],
unique(tbl_p[[xData]])[round(length(unique(tbl_p[[xData]]))/2)],
tail(unique(tbl_p[[xData]]),n=1)
)
tbl_py <- tbl_p%>%filter(x %in% xCompare)
}
}
if(length(unique(tbl_py$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_py, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBar_compareScenRegion_xScenSelectYears",sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1),
figHeight = 9*max((length(unique(tbl_py$region))/2),1)*figWMult
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-yData,-origValue))%>%
summarize_at(c(yData),funs(sum))
tbl_pAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-yData,-origValue))%>%
summarize_at(c(yData),funs(mean))
tbl_pAgg<-bind_rows(tbl_pAggsums,tbl_pAggmeans)%>%ungroup()
if(nrow(tbl_pAgg)>0){
if(length(unique(tbl_pAgg$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_pAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
class ="scenario", position ="dodge", classPalette = classPalette,
facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBarDodged_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pAgg$region))/2),1)*figWMult
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_pAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",class ="scenario", classPalette = classPalette,
facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLineOverlap_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pAgg$region))/2),1)*figWMult
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
if(!scenRef %in% unique(tbl_p$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_pd<-tbl_p%>%
filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_p)){tbl_pd<-tbl_pd%>%dplyr::select(-yData)}
for (k in unique(tbl_p$scenario)[unique(tbl_p$scenario)!=scenRef_i]){
tbl_temp <- tbl_p%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-yData)}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-k,-scenRef_i)
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_pd<-bind_rows(tbl_pd,tbl_temp)
}
tbl_pd <-tbl_pd %>%
mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_pd$scenario)[unique(tbl_pd$scenario)!=scenRef_i])))
if(length(unique(tbl_pd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBarDiff_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLineDiff_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1)*figWMult
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # Close if multiple scenarios available
} # if length(unique(tbl$region))>1
if(regionCompareOnly==0){
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(i in unique(tbl$region)){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(nrow(tbl_rsp)>0){
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i, "/regional","/", j,sep = ""),
filename = paste(k,"_figBar_",i,"_",j,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i, "/regional","/", j,sep = ""),
filename = paste(k,"_figLine_",i,"_",j,sep="")
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(i in unique(tbl$region)){
for(j in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==i,
param==j)
if(nrow(tbl_rp)>0){
if(length(unique(tbl_rp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figBar_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figLine_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1)*figWMult
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_rp[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
tbl_rpy <- tbl_rp%>%filter(x %in% xCompare)}else{
if(length(unique(tbl_rp[[xData]]))<5){
tbl_rpy <- tbl_rp}else{
xCompare<-c(unique(tbl_rp[[xData]])[1],
unique(tbl_rp[[xData]])[round(length(unique(tbl_rp[[xData]]))/2)],
tail(unique(tbl_rp[[xData]]),n=1)
)
tbl_rpy <- tbl_rp%>%filter(x %in% xCompare)
}
}
if(length(unique(tbl_rpy$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpy, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figBar_",i,"_compareScen_xScenSelectYears",sep=""),
figWidth = 13*max((length(unique(tbl_rpy$x)[unique(tbl_py$x) %in% xCompare])/3),1),
figHeight = 9*max((length(unique(tbl_rpy$region))/2),1)*figWMult
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-yData,-origValue))%>%
summarize_at(c(yData),funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-contains(class))%>%
group_by_at(vars(-yData,-origValue))%>%
summarize_at(c(yData),funs(mean))
tbl_rpAgg<-bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%ungroup()
if(nrow(tbl_rpAgg)>0){
if(length(unique(tbl_rpAgg$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_rpAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = classPalette),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figBarDodged_",i,"_compareScen_",sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpAgg$region))/2),1)*figWMult
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_rpAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_columns="none",
class ="scenario", classPalette = classPalette),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figLineOverlap_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpAgg$region))/2),1)*figWMult
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
if(!scenRef %in% unique(tbl_rp$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_rp)){tbl_rpd<-tbl_rpd%>%dplyr::select(-yData)}
for (k in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef_i]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-yData)}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-k,-scenRef_i)
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_rpd<-bind_rows(tbl_rpd,tbl_temp)
}
tbl_rpd <-tbl_rpd %>%
mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_rpd$scenario)[unique(tbl_rpd$scenario)!=scenRef_i])))
if(length(unique(tbl_rpd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figBarDiff_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i,"/regional/compareScen",sep = ""),
filename = paste(j,"_figLineDiff_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1)*figWMult
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
} # Close if(regionCompareOnly==0)
return(tbl)
} # Close Function
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
#dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2015","2035","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="GCAMModified", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=1,sizeBarLines = 0,
xRange=c(2010:2050) # Default is All
)
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/srn.pdf",sep=""))){unlink(paste(getwd(),"/srn.pdf",sep=""))}
library(srn)
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/srn.pdf",sep=""))){unlink(paste(getwd(),"/srn.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
regionsSelect=c("Uruguay","Argentina")
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
#dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2015","2035","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="GCAMModified", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=1,sizeBarLines = 0,
xRange=c(2010:2050) # Default is All
)
dev.off()
devtools::check()
