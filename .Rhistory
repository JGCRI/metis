units = "Ag Production (Mt)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = case_when(grepl("IRR",technology)~"irrigation",
grepl("RFD",technology)~"rainfed",
TRUE~"NA"),
classLabel1 = "Water Source",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::filter(class1!="NA")%>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("agProdBiomass" %in% paramsSelectx){
# Ag Production by Crop Type Biomass EJ
queryx <- "Ag Production by Crop Type"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
filter(Units=="EJ",sector==output)%>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "agProdBiomass",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * srn.assumptions()$convEJ2TWh,
units = "Biomass Production (EJ)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Crop",
classPalette1 = "pal_ag_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("agProdForest" %in% paramsSelectx){
# Ag Production by Crop Type Forest
queryx <- "Ag Production by Crop Type"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
filter(Units=="billion m3",sector==output)%>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "agProdForest",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * srn.assumptions()$convEJ2TWh,
units = "Agricultural Production (billion m3)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Forest",
classPalette1 = "pal_ag_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("agProdByCrop" %in% paramsSelectx){
# Ag Production by Crop Type
queryx <- "Ag Production by Crop Type"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
filter(Units=="Mt",sector==output, sector!="Pasture")%>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "agProdByCrop",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * srn.assumptions()$convEJ2TWh,
units = "Agricultural Production (Mt)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Crop",
classPalette1 = "pal_ag_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("landIrrRfd" %in% paramsSelectx){
# land allocation by crop and water source
queryx <- "land allocation by crop and water source"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::filter(!is.na(water))%>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "landIrrRfd",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value/1000,
units = "Crop Land Allocation (1000 km^2)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = water,
classLabel1 = "Water Source",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("aggLandAlloc" %in% paramsSelectx){
# aggregated land allocation
queryx <- "aggregated land allocation"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
mutate(landleaf=gsub("forest\\s\\(managed\\)","forest",landleaf),
landleaf=gsub("forest\\s\\(unmanaged\\)","forest",landleaf),
landleaf=gsub("pasture\\s\\(grazed\\)","pasture",landleaf),
landleaf=gsub("pasture\\s\\(other\\)","pasture",landleaf))%>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "aggLandAlloc",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value,
units = "Land Allocation (1000 km^2)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = landleaf,
classLabel1 = "Land Type",
classPalette1 = "pal_lu_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("LUCemiss" %in% paramsSelectx){
# Land Use Change Emission (future)
queryx <- "Land Use Change Emission (future)"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "LUCemiss",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(srn.assumptions()$GWP%>%filter(ghg=="CO2")%>%dplyr::select(srn.assumptions()$GWPType))[1,1],
origValue = value,
units = "LUC CO2 Emissions (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = "class1",
classLabel1 = "Land Type",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
tblLUEmiss<-tbl
datax <- bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if(any(grepl("\\bco2emission\\b",paramsSelectx))){
# CO2 Emissions
queryx <- "CO2 Emissions"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "co2emission",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(srn.assumptions()$GWP%>%filter(ghg=="CO2")%>%dplyr::select(srn.assumptions()$GWPType))[1,1],
origValue = value,
units = "CO2 Emissions by Sector (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Type",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("co2emissionByEndUse" %in% paramsSelectx){
# CO2 Emissions by enduse
queryx <- "CO2 Emissions by enduse"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "co2emissionByEndUse",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(srn.assumptions()$GWP%>%filter(ghg=="CO2")%>%dplyr::select(srn.assumptions()$GWPType))[1,1],
origValue = value,
units = "CO2 Emission by Enduse (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Type",
classPalette1 = "pal_finalNrg_sec",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)
dfLUCAbs<-tblLUEmiss%>%filter(value<0)%>%mutate(class1="LUC_Absorption")
dfLUCAbs<-dfLUCAbs%>%group_by_at(vars(-value,-origValue)) %>% summarize(value = sum(value,na.rm=T))%>%
ungroup()%>%mutate(origValue=value,class1="LUC Absorption")
dfLUCEmit<-tblLUEmiss%>%filter(value>0)%>%mutate(class1="LUC_Absorption")
dfLUCEmit<-dfLUCEmit%>%group_by_at(vars(-value,-origValue)) %>% summarize(value = sum(value,na.rm=T))%>%
ungroup()%>%mutate(origValue=value,class1="LUC Emission")
dfLUC<-bind_rows(dfLUCAbs,dfLUCEmit);
dfLUC<-dfLUC%>%mutate(param=unique(tbl$param),
classLabel1=unique(tbl$classLabel1),
classPalette1=unique(tbl$classPalette1))
tbl<-bind_rows(tbl,dfLUC)%>%filter(!is.na(value))%>%mutate(units = "CO2 Emission by Enduse (MTCO2 Eq.)")
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("ghgEmissionByGHG" %in% paramsSelectx){
# GHG emissions by subsector
queryx <- "GHG emissions by subsector"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(srn.assumptions()$GWP%>%dplyr::select(ghg,srn.assumptions()$GWPType),by="ghg")%>%
left_join(srn.assumptions()$convertGgTgMTC,by="Units") %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "ghgEmissionByGHG",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value=value*get(srn.assumptions()$GWPType)*Convert,
origValue = value,
units = "GHG Emissions (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = ghg,
classLabel1 = "GHG",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
if("ghgEmissByGHGGROUPS" %in% paramsSelectx){
# GHG emissions by subsector
queryx <- "GHG emissions by subsector"
if (queryx %in% queriesx) {
tbl <- getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
left_join(srn.assumptions()$GWP%>%dplyr::select(ghg,srn.assumptions()$GWPType),by="ghg")%>%
left_join(srn.assumptions()$convertGgTgMTC,by="Units") %>%
left_join(data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
mutate(param = "ghgEmissByGHGGROUPS",
sources = "Sources",
origScen = scenario,
origQuery = "X",
origUnits = Units,
origX = year,
scenario = scenNewNames,
value=value*get(srn.assumptions()$GWPType)*Convert,
origValue = value,
units = "GHG Emissions by Group (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = ghg,
classLabel1 = "GHG",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
mutate(class1 = case_when ((grepl("HFC", class1)) ~ "HFCs",
(grepl("SF6", class1)) ~ "SF6",
(grepl("CO2", class1)) ~ "CO2",
(grepl("N2O", class1)) ~ "N2O",
(grepl("CH4", class1)) ~ "CH4",
TRUE ~ "Other"))%>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%summarize_at("value",funs(sum))%>%ungroup()%>%
mutate(origValue = value)%>%filter(!is.na(value))
datax <- bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}else{print(paste("Param '", paramx, "' not available in current queries", sep = ""))}
datax<-datax%>%unique()
# srn.chart(tbl,xData="x",yData="value",useNewLabels = 0)
#---------------------
# Create Data Template
#---------------------
dataTemplate <- datax %>%
mutate(scenario = "Local Data", value = 0, sources="Sources", x=2010, vintage="vintage if available") %>%
dplyr::select(scenario, region, sources, param, units, class1, class2, x, value, vintage) %>%
unique()
fullTemplateMap <- datax %>%
dplyr::select(units, param, class1, class2, units, xLabel, aggregate,
classLabel1, classPalette1, classLabel2, classPalette2) %>%
unique()
#---------------------
# Save Data in CSV
#---------------------
if (!dir.exists(paste(getwd(),"/dataFiles", sep = ""))){
dir.create(paste(getwd(),"/dataFiles", sep = ""))}  # dataFiles directory (should already exist)
if (!dir.exists(paste(getwd(),"/dataFiles/mapping", sep = ""))){
dir.create(paste(getwd(),"/dataFiles/mapping", sep = ""))}  # mapping directory
utils::write.csv(fullTemplateMap, file = paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""),
row.names = F)
if (is.null(regionsSelect)) {
utils::write.csv(datax, file = paste(dirOutputs, "/Tables/Tables_gcam/gcamDataTable_AllRegions_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""), row.names = F)
utils::write.csv(dataTemplate, file = paste(dirOutputs, "/Tables/Tables_Template/template_Regional_AllRegions.csv", sep = ""),
row.names = F)
} else {
if(!all(regionsSelect %in% unique(datax$region))){
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(datax$region))],collapse=", "), sep=""))
}
for (region_i in regionsSelect[(regionsSelect %in% unique(datax$region))]) {
utils::write.csv(datax %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables/Tables_gcam/gcamDataTable_",region_i,"_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""),row.names = F)
utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
file = paste(dirOutputs, "/Tables/Tables_Templates/template_Regional_",region_i,".csv", sep = ""),row.names = F)
#utils::write.csv(dataTemplate %>% dplyr::filter(region == region_i),
#                 file = paste(dirOutputs, "/Tables/Tables_Local/local_Regional_",region_i,".csv", sep = ""),row.names = F)
}
}
return(list(data = datax, dataTemplate = dataTemplate, scenarios = scenarios, queries = queries))
}
library(srn)
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/srn.pdf",sep=""))){unlink(paste(getwd(),"/srn.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
library(srn)
devtools::check()
library(srn)
devtools::check()
