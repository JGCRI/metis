# China Production and Land Allocation
read.csv("~/China_landalloc.csv") -> ChLand
read.csv("~/China_agprod.csv") -> ChProd
read.csv("~/basinnames.csv") -> basins
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df
df %>% separate(x, c("A", "B"))
df %>% separate(x, c(NA, "B"))
df
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df
df %>% separate(x, c(NA, "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c(, "B"))
df %>% separate(x, c('', "B"))
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df <- data.frame(x = c("a", "a b", "a b c", NA))
df
df %>% separate(x, c("a", "b"))
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, "stock", "price", -time)
stocks %>% gather("stock", "price", -time)
mini_iris <- iris[c(1, 51, 101), ]
mini_iris
gather(mini_iris, key = "flower_att", value = "measurement", -Species)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("test.csv") -> waterdata
read.csv("/test.csv") -> waterdata
read.csv("./test.csv") -> waterdata
./
/
pwd
read.csv("./test.csv") -> waterdata
read.csv("./test.csv") -> waterdata
read.csv("test.csv") -> waterdata
getwd()
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
head(countryNE0@data)
head(countryGCAMBasin@data)
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("test.csv") -> test
read.csv("test.csv") -> test
read.csv("test.csv") -> test
library(metis)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("test.csv") -> test
read.csv("~/basinnames.csv") -> basins
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
getwd()
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "test5.csv")
write.csv(test3, "~/test5.csv")
test2
head(test2)
head(test)
test %>% left_join(basins, by="input") %>% select(-input) -> test2
head(test2)
test %>% left_join(basins, by="input")
test %>% left_join(basins, by="input") %>% select(-input)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="column", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basinnames.csv") -> basins
test %>% inner_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% inner_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
source('E:/Projects/NewAmerica/FromChris/test.R')
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>%  test2
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>%  test2
head(test2)
Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE)  -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(metis)
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="year", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
polygonDataTablesCustom_i = c(paste(getwd(),"~/test5.csv",sep="")) #need defintion in help
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
head(test3)
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
# ======================================================================================================
# China Production and Land Allocation
read.csv("~/test.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/test5.csv")
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
warnings()
countryGCAMBasin@data$basin_name
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
getwd
getwd()
library(dplyr)
library(tidyr)
# ======================================================================================================
# China Production and Land Allocation
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/Withdrawal_bySource_all3.csv")
=====================================================================================
# China Production and Land Allocation
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
write.csv(test3, "~/Withdrawal_bySource_all3.csv")
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
getwd()
read.csv("/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv", row.names = 1) -> test
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
head(test)
?write.csv
write.csv(test3, "~/Withdrawal_bySource_all3.csv",row.names=F)
write.csv(test3, "E:/Projects/metis/outputs/Withdrawal_bySource_all3.csv",row.names=F)
test4 <- test3 %>%
dplyr::mutate(x = gsub("X",""));
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",.));
test3
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3[["x"]]));
head(test4)
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3$x));
test4 <- test3 %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test %>%
left_join(basins, by="input",keep=TRUE) %>% select(-input) %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
# China Production and Land Allocation
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
write.csv(test4, "E:/Projects/metis/outputs/Withdrawal_bySource_all3.csv",row.names=F)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
ttest
test2
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
test2
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input") %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
getwd()
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("~/basins_consumption.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
head(test)
test %>% left_join(basins, by="input",keep=TRUE)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/MapsTables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/Maps_Tables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
read.csv("E:/Projects/metis/outputs/maps/tables/China_withdrawal_all3.csv") -> test
read.csv("e:/projects/NewAmerica/Maps_Tables/Basins_withdrawal.csv") -> basins
test %>% left_join(basins, by="input",keep=TRUE) %>% select(-input) -> test2
head(test2)
test2 %>% gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) ->test3
test4 <- test2 %>%
gather(key="x", value = "value", -subRegion,  -region, -scenario, -Units ) %>%
dplyr::mutate(x = gsub("X","",test3$x),
subRegType = "BLAH",
param = "XXX",
region = "asjhdak");
head(test4)
write.csv(test4, "E:/projects/NewAmerica/Maps_Tables/Withdrawal_bySource_all3.csv",row.names=F)
scaleRange=data.frame(param=c("griddedScarcity"),
maxScale=c(1),
minScale=c(0))
scaleRange
scaleRange_i=data.frame(param=c("waterWithdraw"),
maxScale=c(51),
minScale=c(0))
scaleRange_i
x <-metis.runAll(
#--------------------------------------------
# MAIN CONFIG
#--------------------------------------------
run_readGCAM      = run_readGCAM_i,
# Must be GCAM regions
gcamcountryNames  = gcamcountryNames_i,
reReadDataGCAM    = reReadDataGCAM_i,
gcamdatabasePath  = gcamdatabasePath_i,
gcamdatabaseName  = gcamdatabaseName_i,
dataProjPath      = dataProjPath_i,
dataProj          = dataProj_i,
scenOrigNames     = scenOrigNames_i,
scenNewNames      = scenNewNames_i,
paramsSelect_GCAM = paramsSelect_GCAM_i,
#----------------------------------------
# CHARTS
#----------------------------------------
dataTablesLocal     = dataTablesLocal_i,
run_charts          = run_charts_i,
# Default is NULL
scenRef             = scenRef_i,
# Default is "0"
regionCompareOnly   = regionCompareOnly_i,
# Default is "0"
scenarioCompareOnly = scenarioCompareOnly_i,
#************************************************************ JE - what is xcompare and xrange
xCompare            = c("2010","2030","2050", "2100"),
xRange              = c(2010,2030,2050, 2100),
paramsSelect_Chart  = paramsSelect_Chart_i,
#colOrder1 = c("GCAMOrig","GCAMRef","Local Data"),
#colOrderName1 = "scenario",
#----------------------------------------
# BOUNDARIES
#----------------------------------------
run_boundaries        = run_boundaries_i,
# Country or Region Name
localcountryName      = localcountryName_i,
localShapeFileFolder  = localShapeFileFolder_i ,
localShapeFile        = localShapeFile_i,
# Make sure this is one of the names(tempShape@data)
localShapeFileColName = localShapeFileColName_i,
boundaryGridsOverlap  = NULL,
#----------------------------------------
# BIA
#----------------------------------------
run_bia               = run_bia_i,
# Choose between "totalOther" or "even"
subsectorNAdistribute = "totalOther", #************************************************************ JE - ?
#----------------------------------------
# PREP GRIDS
#----------------------------------------
run_prepGrids            = run_prepGrids_i,
reReadDataPrepGrids      = reReadDataPrepGrids_i,
sqliteUSE                = sqliteUSE_i,
sqliteDBNamePath         = paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = ""), #************************************************************ JE - ?
gridMetisData            = paste(getwd(),"/outputs/Grids/gridMetis.RData", sep = ""),#************************************************************ JE - ?
# Grid2Poly
run_grid2poly            = run_grid2poly_i,
run_state_grid2poly      = run_state_grid2poly_i,
run_GCAMbasin_grid2poly  = run_GCAMbasin_grid2poly_i,
run_localShape_grid2poly = run_localShape_grid2poly_i,
# If sqliteUSE is T above it will use the SQL produced in
# If additional grids are to be run
grid                     = paste(getwd(),"/outputs/Grids/gridMetis.RData", sep = ""), #************************************************************ JE - ?
paramsSelect_grid2poly   = paramsSelect_grid2poly_i,
#--------------------------------------------
# MAPS
#--------------------------------------------
polygonDataTablesCustom     = polygonDataTablesCustom_i,
paramsSelect_Map            = paramsSelect_Map_i,
run_maps                    = run_maps_i,
scaleRange_i                = scaleRange_i,
xRangeMap                   = seq(from=2000,to=2020,by=10),
legendPosition              = c("LEFT","bottom"),
indvScenarios               = "All",
GCMRCPSSPPol                = F,
# Must be one of the GCM RCP scenario combinations
scenRefMap                  = "gfdl-esm2m_rcp2p6_NA_NA",
run_map_grid                = run_map_grid_i,
run_map_state               = run_map_state_i,
run_map_GCAMbasin           = run_map_GCAMbasin_i,
localSubRegDataTables       = localSubRegDataTables_i,
run_map_localShapeLocalData = run_map_localShapeLocalData_i,
run_map_localShapeGCAMData  = run_map_localShapeGCAMData_i,
run_map_localShapeGCAMGrid  = run_map_localShapeGCAMGrid_i,
#--------------------------------------------
# IO RUN
#--------------------------------------------
run_io = run_io_i
)
scaleRange_i
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
debugSource('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
View(test3)
View(scaleRange_i)
debugSource('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
source('E:/Projects/metis/extras/metis.masterX_regionXChina.R')
