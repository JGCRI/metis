rTable$origScen=as.character(rTable$origScen)
rTable$origQuery=as.character(rTable$origQuery)
rTable$origUnits=as.character(rTable$origUnits)
rTable$origX=as.character(rTable$origX)
tbl<-dplyr::bind_rows(tbl,rTable)
}
tbl<-tbl%>%unique()%>%dplyr::filter(region %in% regionsSelect)
if(any(xRange!="All")){if(is.numeric(tbl$x)){tbl<-tbl%>%dplyr::filter(x %in% xRange)}}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
if (!dir.exists(paste(dirOutputs, "/Charts", sep = ""))){
dir.create(paste(dirOutputs, "/Charts", sep = ""))}
if(length(unique(tbl$region))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))}
for (j in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""))}
}
} # If length(unique(tbl$region))>1
if(regionCompareOnly==0){
for (i in unique(tbl$region)){
tbl_r<-tbl%>%dplyr::filter(region==i)
if (!dir.exists(paste(dirOutputs, "/Charts/", i, sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, sep = ""))}
if(length(unique(tbl_r$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/", i, "/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, "/compareScen",sep = ""))}}
for (j in unique(tbl_r$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/", i,"/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/", i,"/", j,sep = ""))}
}
}
} # Close if(regionCompareOnly==0)
#------------------
# Tables
#------------------
# Aggregate across classes
tblAggsums<-tbl%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"))%>%
dplyr::select(scenario,region,param,units,x, value, vintage)%>%
dplyr::group_by_at(vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains("class"))%>%
dplyr::select(scenario,region,param,units,x, value, vintage)%>%
dplyr::group_by_at(vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tblAgg<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
for(i in unique(tbl$region)){
utils::write.csv(tbl%>%
dplyr::filter(region == i)%>%
dplyr::select(scenario,region,param,units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_",i,".csv", sep = ""),row.names = F)
utils::write.csv(tblAgg%>%
dplyr::filter(region == i)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_",i,"_aggClass.csv", sep = ""),row.names = F)
}
utils::write.csv(tbl%>%
dplyr::select(scenario, region, units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_allRegions.csv", sep = ""),row.names = F)
utils::write.csv(tblAgg%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_allRegions_aggClass.csv", sep = ""),row.names = F)
#------------------------
# Print which parameters and regions if selected are available
#------------------------
if(any(paramsSelect!="All")){
if(all(paramsSelect %in% unique(tbl$param))){
print(paste("Running paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
}else{
print(paste("Parameters not available in data: ", paste(paramsSelect[!(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
print(paste("Running remaining paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(param %in% paramsSelect[(paramsSelect %in% unique(tbl$param))])
}
}
if(any(regionsSelect!="All")){
if(all(regionsSelect %in% unique(tbl$region))){
print(paste("Running regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
}else{
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(region %in% regionsSelect[(regionsSelect %in% unique(tbl$region))])
}
}
#------------------
# Create Charts for Regional Comparison
#------------------
if(length(unique(tbl$region))>1){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_sp<-tbl%>%dplyr::filter(scenario==j,
param==k)
if(nrow(tbl_sp)>0){
if(length(unique(tbl_sp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_sp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
filename = paste(k,"_figBar_",j,"_compareRegions",sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_sp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
filename = paste(k,"_figLines_",j,"_compareRegions",sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult
)
} # Close if(nrow(tbl_sp)>0)
} # close loop for param
} # close loop for scenario
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(j in unique(tbl$param)){
tbl_p<-tbl%>%dplyr::filter(param==j)
if(nrow(tbl_p)>0){
if(length(unique(tbl_p$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_p, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBar_compareScenRegions",sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1)
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_p,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLine_compareScenRegions",sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1)
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_p[[xData]]))<5){
tbl_py <- tbl_p}else{
xCompare<-c(unique(tbl_p[[xData]])[1],
unique(tbl_p[[xData]])[round(length(unique(tbl_p[[xData]]))/2)],
utils::tail(unique(tbl_p[[xData]]),n=1)
)
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)
}
}
if(length(unique(tbl_py$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_py, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBar_compareScenRegion_xScenSelectYears",sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_py$region))/2),1)
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_pAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_pAgg<-dplyr::bind_rows(tbl_pAggsums,tbl_pAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_pAgg)>0){
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_pAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
class ="scenario", position ="dodge", classPalette = classPalette,
facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBarDodged_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1)
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_pAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",class ="scenario", classPalette = classPalette,
facet_columns="region",facet_rows="none"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLineOverlap_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1)
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
if(!scenRef %in% unique(tbl_p$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_pd<-tbl_p%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_p)){tbl_pd<-tbl_pd%>%dplyr::select(-yData)}
for (k in unique(tbl_p$scenario)[unique(tbl_p$scenario)!=scenRef_i]){
tbl_temp <- tbl_p%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-yData)}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-k,-scenRef_i)
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_pd<-dplyr::bind_rows(tbl_pd,tbl_temp)
}
tbl_pd <-tbl_pd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_pd$scenario)[unique(tbl_pd$scenario)!=scenRef_i])))
if(length(unique(tbl_pd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figBarDiff_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1)
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_pd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_rows="region"),
dir = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
filename = paste(j,"_figLineDiff_compareScenRegion",sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1)
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # Close if multiple scenarios available
} # if length(unique(tbl$region))>1
if(regionCompareOnly==0){
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(i in unique(tbl$region)){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(nrow(tbl_rsp)>0){
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rsp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
filename = paste(k,"_figBar_",i,"_",j,sep="")
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rsp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
filename = paste(k,"_figLine_",i,"_",j,sep="")
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(i in unique(tbl$region)){
for(j in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==i,
param==j)
if(nrow(tbl_rp)>0){
if(length(unique(tbl_rp$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figBar_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1)
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figLine_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1)
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_rp[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_rp[[xData]]))<5){
tbl_rpy <- tbl_rp}else{
xCompare<-c(unique(tbl_rp[[xData]])[1],
unique(tbl_rp[[xData]])[round(length(unique(tbl_rp[[xData]]))/2)],
utils::tail(unique(tbl_rp[[xData]]),n=1)
)
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)
}
}
if(length(unique(tbl_rpy$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpy, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figBar_",i,"_compareScen_xScenSelectYears",sep=""),
figWidth = 13*max((length(unique(tbl_rpy$x)[unique(tbl_rpy$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpy$region))/2),1)
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains(class))%>%
dplyr::group_by_at(vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_rpAgg<-dplyr::bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_rpAgg)>0){
if(length(unique(tbl_rpAgg$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart Dodged
srn.printPdfPng(
srn.chart(tbl_rpAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = classPalette),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figBarDodged_",i,"_compareScen_",sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpAgg$region))/2),1)
)
# Line Chart Overlapped
srn.printPdfPng(
srn.chart(tbl_rpAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_columns="none",
class ="scenario", classPalette = classPalette),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figLineOverlap_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpAgg$region))/2),1)
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
if(!scenRef %in% unique(tbl_rp$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_rp)){tbl_rpd<-tbl_rpd%>%dplyr::select(-yData)}
for (k in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef_i]){
tbl_temp <- tbl_rp%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-yData)}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-k,-scenRef_i)
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_rpd<-dplyr::bind_rows(tbl_rpd,tbl_temp)
}
tbl_rpd <-tbl_rpd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_rpd$scenario)[unique(tbl_rpd$scenario)!=scenRef_i])))
if(length(unique(tbl_rpd$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart
srn.printPdfPng(
srn.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar"),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figBarDiff_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1)
)
# Line Chart
srn.printPdfPng(
srn.chart(tbl_rpd, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line"),
dir = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
filename = paste(j,"_figLineDiff_",i,"_compareScen",sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1)
)
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
} # Close if(regionCompareOnly==0)
return(tbl)
} # Close Function
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2015","2035","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0 # Default is "0"
)
charts<-srn.chartsProcess(rTable=rTable, # Default is NULL
#dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c("2015","2035","2050","2100"), # Default is c("2015","2030","2050","2100")
scenRef="Eg1", # Default is NULL
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0 # Default is "0"
)
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
gcamdatabaseName <-"example_database_basexdb"
gcamdataProjFile <-"Example_dataProj.proj"
regionsSelect <- c("Colombia","Argentina")
# Choose Parameters or set to "All" for all params. For complete list see ?srn.readgcam
paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
"watConsumBySec", "watWithdrawBySec", "watWithdrawByCrop",
"gdpPerCapita", "gdp", "gdpGrowthRate", "pop",
"agProdbyIrrRfd","agProdByCrop",
"landIrrRfd", "aggLandAlloc","co2emissionByEndUse", "ghgEmissByGHGGROUPS")
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
# localDBConn(gcamdatabasePath,gcamdatabaseName)
# dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
#  listScenarios(dataProjLoaded)  # List of Scenarios in GCAM database
# queries <- listQueries(dataProjLoaded)  # List of Queries in queryxml
dataGCAM<-srn.readgcam(reReadData=F, # Default Value is T
dataProj=gcamdataProjFile, # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
paramsSelect=paramsSelect, # Default value is "All"
queriesSelect="All" # Default is "All"
)
dataGCAM$data # To view the data read that was read.
# Choose Parameters or set to "All" for all params. For complete list see ?srn.readgcam
paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
"watConsumBySec", "watWithdrawBySec","gdp", "gdpGrowthRate", "pop",
"agProdByCrop", "aggLandAlloc","co2emissionByEndUse")
dataGCAM<-srn.readgcam(reReadData=F, # Default Value is T
dataProj=gcamdataProjFile, # Default Value is "dataProj.proj"
scenOrigNames=c("ExampleScen1","ExampleScen2"),
scenNewNames=c("Eg1","Eg2"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="srnQueries.xml",  # Default Value is "srnQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
paramsSelect=paramsSelect, # Default value is "All"
queriesSelect="All" # Default is "All"
)
devtools::check()
?zoo::rollmean
devtools::check()
