origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value * metis.assumptions()$convEJ2TWh,
units = "Agricultural Production (Mt)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Crop",
classPalette1 = "pal_ag_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2")%>%
dplyr::select(origScen,origQuery, origValue, origUnits, origX, region, param, scenario,
value, units, vintage, x, xLabel, aggregate, class1, classLabel1, classPalette1,
class2, classLabel2, classPalette2)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx <- "landIrrRfd"
if(paramx %in% paramsSelectx){
# land allocation by crop and water source
queryx <- "land allocation by crop and water source"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::filter(!is.na(water))%>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "landIrrRfd",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value/1000,
units = "Crop Land Allocation (1000 km^2)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = water,
classLabel1 = "Water Source",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx <- "aggLandAlloc"
if(paramx %in% paramsSelectx){
# aggregated land allocation
queryx <- "aggregated land allocation"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::mutate(landleaf=gsub("forest\\s\\(managed\\)","forest",landleaf),
landleaf=gsub("forest\\s\\(unmanaged\\)","forest",landleaf),
landleaf=gsub("pasture\\s\\(grazed\\)","pasture",landleaf),
landleaf=gsub("pasture\\s\\(other\\)","pasture",landleaf))%>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "aggLandAlloc",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origValue = value,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value,
units = "Land Allocation (1000 km^2)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = landleaf,
classLabel1 = "Land Type",
classPalette1 = "pal_lu_type",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx <- "LUCemiss"
if(paramx %in% paramsSelectx){
# Land Use Change Emission (future)
queryx <- "Land Use Change Emission (future)"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "LUCemiss",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(metis.assumptions()$GWP%>%dplyr::filter(ghg=="CO2")%>%dplyr::select(metis.assumptions()$GWPType))[1,1],
origValue = value,
units = "LUC CO2 Emissions (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = "class1",
classLabel1 = "Land Type",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
tblLUEmiss<-tbl
datax <- dplyr::bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
if(any(grepl("\\bco2emission\\b",paramsSelectx))){
# CO2 Emissions
queryx <- "CO2 Emissions"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "co2emission",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(metis.assumptions()$GWP%>%dplyr::filter(ghg=="CO2")%>%dplyr::select(metis.assumptions()$GWPType))[1,1],
origValue = value,
units = "CO2 Emissions by Sector (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Type",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
tblgdp<-tbl
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx <- "co2emission"
paramx <- "co2emissionByEndUse"
if(paramx %in% paramsSelectx){
# CO2 Emissions by enduse
queryx <- "CO2 Emissions by enduse"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "co2emissionByEndUse",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(metis.assumptions()$GWP%>%dplyr::filter(ghg=="CO2")%>%dplyr::select(metis.assumptions()$GWPType))[1,1],
origValue = value,
units = "CO2 Emission by Enduse (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = sector,
classLabel1 = "Type",
classPalette1 = "pal_finalNrg_sec",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
# Add LU Change Emissions
tblLUEmiss <- rgcam::getQuery(dataProjLoaded, "Land Use Change Emission (future)")  # Tibble
if (!is.null(regionsSelect)) {
tblLUEmiss <- tblLUEmiss %>% dplyr::filter(region %in% regionsSelect)
}
tblLUEmiss <- tblLUEmiss %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "LUCemiss",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value = value*(metis.assumptions()$GWP%>%dplyr::filter(ghg=="CO2")%>%dplyr::select(metis.assumptions()$GWPType))[1,1],
origValue = value,
units = "LUC CO2 Emissions (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = "class1",
classLabel1 = "Land Type",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
dfLUCAbs<-tblLUEmiss%>%dplyr::filter(value<0)%>%dplyr::mutate(class1="LUC_Absorption")
dfLUCAbs<-dfLUCAbs%>%dplyr::group_by_at(dplyr::vars(-value,-origValue)) %>% dplyr::summarize(value = sum(value,na.rm=T))%>%
dplyr::ungroup()%>%dplyr::mutate(origValue=value,class1="LUC Absorption")
dfLUCEmit<-tblLUEmiss%>%dplyr::filter(value>0)%>%dplyr::mutate(class1="LUC_Absorption")
dfLUCEmit<-dfLUCEmit%>%dplyr::group_by_at(dplyr::vars(-value,-origValue)) %>% dplyr::summarize(value = sum(value,na.rm=T))%>%
dplyr::ungroup()%>%dplyr::mutate(origValue=value,class1="LUC Emission")
dfLUC<-dplyr::bind_rows(dfLUCAbs,dfLUCEmit);
dfLUC<-dfLUC%>%dplyr::mutate(param=unique(tbl$param),
classLabel1=unique(tbl$classLabel1),
classPalette1=unique(tbl$classPalette1))
tbl<-dplyr::bind_rows(tbl,dfLUC)%>%dplyr::filter(!is.na(value))%>%dplyr::mutate(units = "CO2 Emission by Enduse (MTCO2 Eq.)")
datax <- dplyr::bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx<-"ghgEmissionByGHG"
if(paramx %in% paramsSelectx){
# GHG emissions by subsector
queryx <- "GHG emissions by subsector"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::left_join(metis.assumptions()$GWP%>%dplyr::select(ghg,metis.assumptions()$GWPType),by="ghg")%>%
dplyr::left_join(metis.assumptions()$convertGgTgMTC,by="Units") %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "ghgEmissionByGHG",
sources = "Sources",
origScen = scenario,
origQuery = queryx,
origUnits = Units,
origX = year,
scenario = scenNewNames,
value=value*get(metis.assumptions()$GWPType)*Convert,
origValue = value,
units = "GHG Emissions (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = ghg,
classLabel1 = "GHG",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
paramx <- "ghgEmissByGHGGROUPS"
if(paramx %in% paramsSelectx){
# GHG emissions by subsector
queryx <- "GHG emissions by subsector"
if (queryx %in% queriesx) {
tbl <- rgcam::getQuery(dataProjLoaded, queryx)  # Tibble
if (!is.null(regionsSelect)) {
tbl <- tbl %>% dplyr::filter(region %in% regionsSelect)
}
tbl <- tbl %>%
dplyr::left_join(metis.assumptions()$GWP%>%dplyr::select(ghg,metis.assumptions()$GWPType),by="ghg")%>%
dplyr::left_join(metis.assumptions()$convertGgTgMTC,by="Units") %>%
dplyr::left_join(dplyr::data_frame(scenOrigNames, scenNewNames), by = c(scenario = "scenOrigNames")) %>%
dplyr::mutate(param = "ghgEmissByGHGGROUPS",
sources = "Sources",
origScen = scenario,
origQuery = "X",
origUnits = Units,
origX = year,
scenario = scenNewNames,
value=value*get(metis.assumptions()$GWPType)*Convert,
origValue = value,
units = "GHG Emissions by Group (MTCO2 Eq.)",
vintage = paste("Vint_", year, sep = ""),
x = year,
xLabel = "Year",
aggregate = "sum",
class1 = ghg,
classLabel1 = "GHG",
classPalette1 = "pal_16",
class2 = "class2",
classLabel2 = "classLabel2",
classPalette2 = "classPalette2") %>%
dplyr::mutate(class1 = dplyr::case_when ((grepl("HFC", class1)) ~ "HFCs",
(grepl("SF6", class1)) ~ "SF6",
(grepl("CO2", class1)) ~ "CO2",
(grepl("N2O", class1)) ~ "N2O",
(grepl("CH4", class1)) ~ "CH4",
(grepl("SO2", class1)) ~ "SO2",
(grepl("NH3", class1)) ~ "NH3",
TRUE ~ "Other"))%>%
dplyr::select(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units, value,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origValue, origUnits, origX)%>%
dplyr::group_by(scenario, region, param, sources, class1, class2, x, xLabel, vintage, units,
aggregate, classLabel1, classPalette1,classLabel2, classPalette2,
origScen, origQuery, origUnits, origX)%>%dplyr::summarize_at("value",dplyr::funs(sum))%>%dplyr::ungroup()%>%
dplyr::mutate(origValue = value)%>%dplyr::filter(!is.na(value))
datax <- dplyr::bind_rows(datax, tbl)
} else {
print(paste("Query '", queryx, "' not found in database", sep = ""))
}}
datax<-datax%>%unique()
dataTemplate <- datax %>%
dplyr::mutate(scenario = "Local Data", value = 0, sources="Sources", x=2010) %>%
dplyr::rename(class=class1)%>%
dplyr::select(scenario, region, sources, param, units, class, x, value) %>%
unique()
fullTemplateMap <- datax %>%
dplyr::select(units, param, class1, class2, units, xLabel, aggregate,
classLabel1, classPalette1, classLabel2, classPalette2) %>%
unique()
if (!dir.exists(paste(getwd(),"/dataFiles", sep = ""))){
dir.create(paste(getwd(),"/dataFiles", sep = ""))}  # dataFiles directory (should already exist)
if (!dir.exists(paste(getwd(),"/dataFiles/mapping", sep = ""))){
dir.create(paste(getwd(),"/dataFiles/mapping", sep = ""))}  # mapping directory
utils::write.csv(fullTemplateMap, file = paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""),
row.names = F)
utils::write.csv(datax, file = paste(dirOutputs, "/readGCAMTables/Tables_gcam/gcamDataTable_AllRegions_", min(range(datax$x)),
"to", max(range(datax$x)), ".csv", sep = ""), row.names = F)
utils::write.csv(dataTemplate, file = paste(dirOutputs, "/readGCAMTables/Tables_Template/template_Regional_AllRegions.csv", sep = ""),
row.names = F)
dataTemplate
utils::write.csv(dataTemplate, file = paste(dirOutputs, "/readGCAMTables/Tables_gcam/Tables_Template/template_Regional_AllRegions.csv", sep = ""),
row.names = F)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#----------------------------
# Read GCAM Data
#---------------------------
# ?metis.readgcam # For more help
# Choose Parameters or set to "All" for all params. For complete list see ?metis.readgcam
paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
"watConsumBySec", "watWithdrawBySec", "watWithdrawByCrop",
"gdpPerCapita", "gdp", "gdpGrowthRate", "pop",
"agProdbyIrrRfd","agProdByCrop",
"landIrrRfd", "aggLandAlloc","co2emissionByEndUse", "ghgEmissByGHGGROUPS")
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
#gcamdatabaseName <-"database_basexdb_LAC"
gcamdataProjFile <-"LAC_dataProj.proj"
regionsSelect <- c("Colombia","Argentina")
# Use function localDBConn from package rgcam to get a list of scenarios if needed.
# localDBConn(gcamdatabasePath,gcamdatabaseName)
# dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", dataProj, sep = ""))
#  listScenarios(dataProjLoaded)  # List of Scenarios in GCAM database
# queries <- listQueries(dataProjLoaded)  # List of Queries in queryxml
dataGCAM_LAC<-metis.readgcam(reReadData=F, # Default Value is T
dataProj=gcamdataProjFile, # Default Value is "dataProj.proj"
scenOrigNames=c("GCAMOrig","GCAMModified"),
scenNewNames=c("GCAMOrig","GCAMModified"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="metisQueries.xml",  # Default Value is "metisQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
paramsSelect=paramsSelect # Default value is "All"
)
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
gcamdatabaseName <-"database_basexdb_Uruguay"
gcamdataProjFile <-"Uruguay_dataProj.proj"
regionsSelect <- c("Uruguay")
#dataProjLoaded <- loadProject(paste(gcamdatabasePath, "/", gcamdataProjFile, sep = ""))
#listScenarios(dataProjLoaded)  # List of Scenarios in GCAM database
#queries <- listQueries(dataProjLoaded)  # List of Queries in queryxml
dataGCAM_Uruguay<-metis.readgcam(reReadData=F, # Default Value is T
dataProj=gcamdataProjFile, # Default Value is "dataProj.proj"
scenOrigNames=c("GCAMOrig"),
scenNewNames=c("GCAMOrig"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="metisQueries.xml",  # Default Value is "metisQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
paramsSelect=paramsSelect # Default value is "All"
)
dataGCAM<-bind_rows(dataGCAM_LAC$data,dataGCAM_Uruguay$data)
dataGCAM # To view the data read that was read.
unique((dataGCAM%>%filter(value>0))$param)
#----------------------------
# Produce Data Charts
#---------------------------
paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
"watConsumBySec", "watWithdrawBySec", "watWithdrawByCrop",
"gdpPerCapita", "gdp", "gdpGrowthRate", "pop",
"agProdbyIrrRfd","agProdByCrop",
"landIrrRfd", "aggLandAlloc","co2emissionByEndUse", "ghgEmissByGHGGROUPS")
gcamdatabasePath <-paste(getwd(),"/dataFiles/gcam",sep="")
#gcamdatabaseName <-"database_basexdb_LAC"
gcamdataProjFile <-"LAC_dataProj.proj"
regionsSelect <- c("Colombia","Argentina")
regionsSelect <- NULL
dataGCAM_LAC<-metis.readgcam(reReadData=F, # Default Value is T
dataProj=gcamdataProjFile, # Default Value is "dataProj.proj"
scenOrigNames=c("GCAMOrig","GCAMModified"),
scenNewNames=c("GCAMOrig","GCAMModified"),
gcamdatabasePath=gcamdatabasePath,
gcamdatabaseName=gcamdatabaseName,
queryxml="metisQueries.xml",  # Default Value is "metisQueries.xml"
dirOutputs= paste(getwd(),"/outputs",sep=""), # Default Value is paste(getwd(),"/outputs",sep="")
regionsSelect=regionsSelect, # Default Value is NULL
paramsSelect=paramsSelect # Default value is "All"
)
devtools::check()
library(metis)
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/metis.pdf",sep=""))){unlink(paste(getwd(),"/metis.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
devtools::check()
