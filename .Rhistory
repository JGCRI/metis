bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY_ANIMATE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""))
}
metis.map(underLayer=underLayer, dataPolygon=shape,
dataGrid=mapx,
fillColumn = names(mapx@data),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendDigits = NULL,
legendFixedBreaks=legendFixedBreaks,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear",sep = ""))
if(animateOn==T){
if(length(names(mapx@data))==1){
legendOutsideAnimated=F
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)}else{
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
}
metis.map(panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=shape,
dataGrid=mapx,
fillColumn = names(mapx@data),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle = legendTitleAnimated,
legendStyle="kmeans",
legendDigits = NULL,
legendFixedBreaks=legendFixedBreaks,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE_ANIMATE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""))
}
} # if nrow(datax) > 1
}# Close years loop
# Animate 1 : each param: If class > 1 { (Map x Class) x Anim Years}
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*PRETTY_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*KMEANS_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*FREESCALE_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
#------------------------------
# Figure 2 : each param: If class ==1 { Map x years}
#-----------------------------
checkTbl<-gridTbl%>%dplyr::filter(scenario==scenario_i,param==param_i)
checkTbl<-droplevels(checkTbl)
if(length(unique(checkTbl$class))==1){
rm(checkTbl)
datax<-gridTbl%>%dplyr::filter(scenario==scenario_i,param==param_i)
if(nrow(datax)>1){
legendTitle<-unique(datax$units)
fillPalette<-unique(datax$classPalette)
datax<-datax%>%dplyr::select(lat,lon,x,value)%>%
tidyr::spread(key=x,value=value)
shapeExpandEtxent<-as.data.frame(sp::bbox(shape))   # Get Bounding box
expandbboxPercent<-0.5; shapeExpandEtxent$min;shapeExpandEtxent$max
shapeExpandEtxent$min[1]<-if(shapeExpandEtxent$min[1]<0){(1+expandbboxPercent/100)*shapeExpandEtxent$min[1]}else{(1-expandbboxPercent/100)*shapeExpandEtxent$min[1]};
shapeExpandEtxent$min[2]<-if(shapeExpandEtxent$min[2]<0){(1+expandbboxPercent/100)*shapeExpandEtxent$min[2]}else{(1-expandbboxPercent/100)*shapeExpandEtxent$min[2]};
shapeExpandEtxent$max[1]<-if(shapeExpandEtxent$max[1]<0){(1-expandbboxPercent/100)*shapeExpandEtxent$max[1]}else{(1+expandbboxPercent/100)*shapeExpandEtxent$max[1]};
shapeExpandEtxent$max[2]<-if(shapeExpandEtxent$max[2]<0){(1-expandbboxPercent/100)*shapeExpandEtxent$max[2]}else{(1+expandbboxPercent/100)*shapeExpandEtxent$max[2]};
shapeExpandEtxent$min;shapeExpandEtxent$max;
shapeExpandEtxent<-methods::as(raster::extent(as.vector(t(shapeExpandEtxent))), "SpatialPolygons")
sp::proj4string(shapeExpandEtxent)<-sp::CRS(sp::proj4string(shape)) # ASSIGN COORDINATE SYSTEM
rasterx<-sp::SpatialPointsDataFrame(sp::SpatialPoints(coords=(cbind(datax$lon,datax$lat))),data=datax)
sp::proj4string(rasterx)<-sp::proj4string(shape)
rasterx<-raster::intersect(rasterx,shapeExpandEtxent)
sp::gridded(rasterx)<-T
scaleData<-datax%>%dplyr::select(-lat,-lon)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-rasterx
mapx@data<-mapx@data%>%dplyr::select(-lat,-lon)
names(mapx@data)<-paste("X",names(mapx@data),sep="")
metis.map(underLayer=underLayer, dataPolygon=shape,
dataGrid=mapx,
fillColumn = names(mapx@data),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=shape,
dataGrid=mapx,
fillColumn = names(mapx@data),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=shape,
dataGrid=mapx,
fillColumn = names(mapx@data),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = NULL,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_raster_",param_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/raster/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
} # if(nrow(datax)>1){
} # If number of classes == 1
} # close Params
} # Close scenario loop
} # Close if gridTbl is Null
# -------------------
# Create Polygon Plots for Each scenario
# -------------------
if(!is.null(shapeTbl)){
for (scenario_i in unique(shapeTbl$scenario)){
for (subRegType_i in unique(shapeTbl$subRegType)){
for (param_i in unique(shapeTbl$param)){
animScalePoly<-(shapeTbl%>%dplyr::filter(subRegType==subRegType_i,scenario==scenario_i,param==param_i))$value
animPrettyBreaksPoly<-scales::pretty_breaks(n=legendFixedBreaks)(animScalePoly)
animKmeanBreaksPoly<-sort(as.vector((stats::kmeans(animScalePoly,centers=legendFixedBreaks))$centers[,1]))
if((max(range(animScalePoly))-min(range(animScalePoly)))<1E-10 &
(max(range(animScalePoly))-min(range(animScalePoly)))>-1E-10){animScalePolyRange=min(animScalePoly)}else{
animScalePolyRange=range(animScalePoly)
}
if(mean(animScalePolyRange,na.rm = T)<0.01 & mean(animScalePolyRange,na.rm = T)>(-0.01)){animLegendDigits<-4}else{
if(mean(animScalePolyRange,na.rm = T)<0.1 & mean(animScalePolyRange,na.rm = T)>(-0.1)){animLegendDigits<-3}else{
if(mean(animScalePolyRange,na.rm = T)<1 & mean(animScalePolyRange,na.rm = T)>(-1)){animLegendDigits<-2}else{
if(mean(animScalePolyRange,na.rm = T)<10 & mean(animScalePolyRange,na.rm = T)>(-10)){animLegendDigits<-1}else{animLegendDigits<-0}}}}
# Figure 1 : each param: If class > 1 { (Map x Class) x Selected Years}
shapeTblx<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,
param==param_i)
for (x_i in unique(shapeTbl$x)){
datax<-shapeTblx%>%dplyr::filter(x==x_i)
if(nrow(datax)>1){
legendTitle<-unique(datax$units)
fillPalette<-unique(datax$classPalette)
datax<-datax%>%dplyr::select(subRegion,class,value)%>%
tidyr::spread(key=class,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(underLayer=underLayer,
dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
# underLayer=underLayer
# dataPolygon=mapx
# fillColumn = names(mapx@data%>%dplyr::select(-subRegion))
# legendShow = T
# legendOutside = T
# facetFreeScale = F
# frameShow = T
# labels=labels
# labelsSize = labelsSize
# legendTitle =legendTitle
# legendStyle="kmeans"
# legendFixedBreaks=legendFixedBreaks
# legendDigits = legendDigits
# legendOutsidePosition = legendOutsidePosition
# legendPosition = NULL
# fillPalette = fillPalette
# fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS",sep="")
# dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = "")
if(animateOn==T){
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=F
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)
legendAnimatedPosition=legendPosition}else{
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
legendAnimatedPosition=NULL
}
metis.map(panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendStyle="fixed",
legendBreaks = animKmeanBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_KMEANS_ANIMATE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""))
}
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
if(animateOn==T){
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=F
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)
legendAnimatedPosition=legendPosition}else{
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
legendAnimatedPosition=NULL
}
metis.map(panelLabel=panelLabelAnimated,
underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = legendOutsideAnimated,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendStyle="fixed",
legendBreaks = animPrettyBreaksPoly,
legendFixedBreaks=legendFixedBreaks,
legendDigits = animLegendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendAnimatedPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_PRETTY_ANIMATE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""))
}
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = NULL,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear",sep = ""))
if(animateOn==T){
if(length(names(mapx@data%>%dplyr::select(-subRegion)))==1){
legendOutsideAnimated=F
legendTitleAnimated=legendTitle
panelLabelAnimated=paste(x_i)}else{
legendOutsideAnimated=T
legendTitleAnimated=paste(x_i,"\n",legendTitle,sep="")
panelLabelAnimated=NULL
}
metis.map(panelLabel= panelLabelAnimated,underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitleAnimated,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = NULL,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",x_i,"_",scenario_i,nameAppend,"_FREESCALE_ANIMATE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""))
}
}# if(nrow(datax)>1){
}# Close years loop
# Animate 1 : each param: If class > 1 { (Map x Class) x Anim Years}
if(animateOn==T){
checkIM <- system("cmd.exe",input="magick -version")
if (checkIM!=0) stop("Could not find ImageMagick. Make sure it is installed and included in the systems PATH")
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*PRETTY_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*KMEANS_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
animName<-paste("anim_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE.gif",sep="")
processed <- system("cmd.exe",input=paste("magick -delay ",
delay=delay,
" ", paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""),
"/*FREESCALE_ANIMATE.png \"",
paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/",
animName,sep = ""),
"\"",sep=""))
unlink(paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,"/byYear/animate_",param_i,sep = ""), recursive = TRUE) #-------------- cleaning up plots and temporary variables
} # If Animate ON==t
#------------------------------
# Figure 2 : each param: If class ==1 { Map x years}
#-----------------------------
checkTbl<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,param==param_i)
checkTbl<-droplevels(checkTbl)
if(length(unique(checkTbl$class))==1){
rm(checkTbl)
datax<-shapeTbl%>%dplyr::filter(region==boundaryRegionsSelect,scenario==scenario_i,subRegType==subRegType_i,param==param_i)
if(nrow(datax)>1){
legendTitle<-paste(unique(datax$units),sep="")
fillPalette<-unique(datax$classPalette)
datax<-datax%>%dplyr::select(subRegion,x,value)%>%
tidyr::spread(key=x,value=value)
scaleData<-datax%>%dplyr::select(-subRegion)
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.01 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.01)){legendDigits<-4}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<0.1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-0.1)){legendDigits<-3}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<1 & mean(range(scaleData,na.rm=T),na.rm = T)>(-1)){legendDigits<-2}else{
if(mean(range(scaleData,na.rm=T),na.rm = T)<10 & mean(range(scaleData,na.rm=T),na.rm = T)>(-10)){legendDigits<-1}else{legendDigits<-0}}}}
mapx<-shape
mapx@data<-mapx@data%>%dplyr::left_join(datax)%>%
dplyr::select(names(datax))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_KMEANS",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = T,
facetFreeScale = F,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="pretty",
legendFixedBreaks=legendFixedBreaks,
legendDigits = legendDigits,
legendOutsidePosition = legendOutsidePosition,
legendPosition = NULL,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_PRETTY",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
metis.map(underLayer=underLayer, dataPolygon=mapx,
fillColumn = names(mapx@data%>%dplyr::select(-subRegion)),
legendShow = T,
legendOutside = F,
facetFreeScale = T,
frameShow = T,
labels=labels,
labelsSize = labelsSize,
legendTitle =legendTitle,
legendStyle="kmeans",
legendFixedBreaks=legendFixedBreaks,
legendDigits = NULL,
legendOutsidePosition = legendOutsidePosition,
legendPosition = legendPosition,
fillPalette = fillPalette,
bgColor = bgColorChosen,
fileName = paste("map_",boundaryRegionsSelect,"_",subRegType_i,"_",param_i,"_",scenario_i,nameAppend,"_FREESCALE",sep=""),
dirOutputs = paste(dirOutputs,"/Maps/",boundaryRegionsSelect,"/",subRegion_i,"/", scenario_i,sep = ""))
# Animate 2 : each param: If class == 1 { (Map x Anim Years}
}  #if(nrow(datax)>1){
} # If number of classes == 1
} # close Params
} # Close subRegType loop
} # Close scenario loop
} # Clsoe if shapeTbl is NUll
} # Close Function
devtools::check()
devtools::check()
?as
devtools::check()
devtools::check()
#---------------------
# Create User Manual
#---------------------
# Add R to system variable path C:
# install.packages('tinytex')
# tinytex::install_tinytex()
# tinytex:::is_tinytex()
if(file.exists(paste(getwd(),"/metis.pdf",sep=""))){unlink(paste(getwd(),"/metis.pdf",sep=""))}
system(paste("R CMD Rd2pdf ",getwd(),sep=""))
