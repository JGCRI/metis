<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
sizeBarLines=0
sizeLines=1.5
nameAppend=""
rTable=rTable
#dataTables=dataTables
paramsSelect=paramsSelect
regionsSelect=regionsSelect
xCompare=c("2015","2030","2050","2100")
scenRef="Eg1"
dirOutputs=paste(getwd(),"/outputs",sep="")
pdfpng="png"
regionCompareOnly=0
NULL->scenario->value->x->region->param->origValue->origScen->origQuery->
origUnits->origX->sources->vintage->class1->classLabel1->classPalette1->
class2->classLabel2->classPalette2->i->j->k->figWmult
addMissing<-function(data){
if(!"scenario"%in%names(data)){data<-data%>%dplyr::mutate(scenario="scenario")}
if(!"region"%in%names(data)){data<-data%>%dplyr::mutate(region="region")}
if(!"param"%in%names(data)){data<-data%>%dplyr::mutate(param="param")}
if(!"value"%in%names(data)){data<-data%>%dplyr::mutate(value=get(yData))}
if(!"origValue"%in%names(data)){data<-data%>%dplyr::mutate(origValue=value)}
if(!"units"%in%names(data)){data<-data%>%dplyr::mutate(units="units")}
if(!"x"%in%names(data)){data<-data%>%dplyr::mutate(x="x")}
if(!"vintage" %in% names(data)){data<-data%>%dplyr::mutate(vintage = paste("Vint_", x, sep = ""))}
if(!"xLabel"%in%names(data)){
if(is.null(xLabel)){data<-data%>%dplyr::mutate(xLabel="xLabel")}else{
data<-data%>%dplyr::mutate(xLabel=xLabel)}}
if(!"aggregate"%in%names(data)){ if(is.null(aggregate)){data<-data%>%dplyr::mutate(aggregate="aggregate")}else{
data<-data%>%dplyr::mutate(aggregate=aggregate)}}
if(!"class1"%in%names(data)){
if("class"%in%names(data)){
data<-data%>%dplyr::rename(class1=class)}else
{data<-data%>%dplyr::mutate(class1="class1")}}
if(!"classLabel1"%in%names(data)){ if(is.null(classPalette)){data<-data%>%dplyr::mutate(classLabel1="classLabel1")}
if(!"classPalette1"%in%names(data)){data<-data%>%dplyr::mutate(classPalette1="pal_Basic")}else{
data<-data%>%dplyr::mutate(classPalette1=classPalette)}}
if(!"class2"%in%names(data)){data<-data%>%dplyr::mutate(class2="class2")}
if(!"classLabel2"%in%names(data)){data<-data%>%dplyr::mutate(classLabel2="classLabel2")}
if(!"classPalette2"%in%names(data)){ if(is.null(classPalette)){data<-data%>%dplyr::mutate(classPalette2="pal_Basic")}else{
data<-data%>%dplyr::mutate(classPalette2=classPalette)}}
if(!"origScen"%in%names(data)){data<-data%>%dplyr::mutate(origScen="origScen")}
if(!"origQuery"%in%names(data)){data<-data%>%dplyr::mutate(origQuery="origQuery")}
if(!"origUnits"%in%names(data)){data<-data%>%dplyr::mutate(origUnits="origUnits")}
if(!"origX"%in%names(data)){data<-data%>%dplyr::mutate(origX="origX")}
if(!"sources"%in%names(data)){data<-data%>%dplyr::mutate(sources="sources")}
return(data)
}
tbl<-tibble::tibble()
if(is.null(dataTables) & is.null(rTable)){
stop ("No dataTable or rTables have been provided.")
}
# Read in the data from the function metis.readgcam
rTable <- dataGCAM$data;
#
rTable=rTable
#dataTables=dataTables
paramsSelect=paramsSelect
regionsSelect=regionsSelect
xCompare=c("2015","2030","2050","2100")
scenRef="Eg1"
dirOutputs=paste(getwd(),"/outputs",sep="")
pdfpng="png"
regionCompareOnly=0
tbl<-tibble::tibble()
if(is.null(dataTables) & is.null(rTable)){
stop ("No dataTable or rTables have been provided.")
}
# Read in csv (dataTables)
#------------------------
if(!is.null(dataTables)){
for(i in dataTables){
if(file.exists(i)){
tblNew<-utils::read.csv(paste(i), stringsAsFactors = F)%>%tibble::as.tibble()
tbl<-dplyr::bind_rows(tbl,tblNew)
} else {stop(paste(i," does not exist"))}
}
# Join relevant colors and classes using the mapping file if it exists
if(file.exists(paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""))){
map<-utils::read.csv(paste(getwd(),"/dataFiles/mapping/template_Regional_mapping.csv", sep = ""), stringsAsFactors = F)%>%tibble::as.tibble()
tbl<-tbl%>%dplyr::left_join(map%>%dplyr::select(-class1,-class2),by=c("param","units"))
}
# Add missing columns
tbl<-addMissing(tbl)
}
# Read in R data (rTable)
#------------------------
if(!is.null(rTable)){
rTable<-addMissing(rTable)
rTable$origScen=as.character(rTable$origScen)
rTable$origQuery=as.character(rTable$origQuery)
rTable$origUnits=as.character(rTable$origUnits)
rTable$origX=as.character(rTable$origX)
tbl<-dplyr::bind_rows(tbl,rTable)
}
if(any(regionsSelect!="All")){
print("One or more items in regionsSelect is 'All' so running analysis for all regions.")
tbl<-tbl%>%unique()%>%dplyr::filter(region %in% regionsSelect)}
if(any(xRange!="All")){if(is.numeric(tbl$x)){tbl<-tbl%>%dplyr::filter(x %in% xRange)}}
if(any(is.na(unique(tbl$scenario)))){stop("NA scenario not valid. Please check your input scenarios.")}
#------------------
# Create Folders if needed
#------------------
if (!dir.exists(dirOutputs)){
dir.create(dirOutputs)}
if (!dir.exists(paste(dirOutputs, "/Charts", sep = ""))){
dir.create(paste(dirOutputs, "/Charts", sep = ""))}
if(length(unique(tbl$region))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions", sep = ""))}
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))){
dir.create(paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""))}
for (j in unique(tbl$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""))}
}
} # If length(unique(tbl$region))>1
if(regionCompareOnly!=1){
for (i in unique(tbl$region)){
tbl_r<-tbl%>%dplyr::filter(region==i)
if (!dir.exists(paste(dirOutputs, "/Charts/", i, sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, sep = ""))}
if(length(unique(tbl_r$scenario))>1){
if (!dir.exists(paste(dirOutputs, "/Charts/", i, "/compareScen",sep = ""))){
dir.create(paste(dirOutputs, "/Charts/", i, "/compareScen",sep = ""))}}
for (j in unique(tbl_r$scenario)) {
if (!dir.exists(paste(dirOutputs, "/Charts/", i,"/", j,sep = "")))
{dir.create(paste(dirOutputs, "/Charts/", i,"/", j,sep = ""))}
}
}
} # Close if(regionCompareOnly!=1)
# Aggregate across classes
tblAggsums<-tbl%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(scenario,region,param,units,x,value)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(scenario,region,param,units,x, value)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tblAgg<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
for(i in unique(tbl$region)){
utils::write.csv(tbl%>%
dplyr::filter(region == i)%>%
dplyr::select(scenario,region,param,units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_",i,".csv", sep = ""),row.names = F)
utils::write.csv(tblAgg%>%
dplyr::filter(region == i)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_",i,"_aggClass.csv", sep = ""),row.names = F)
}
utils::write.csv(tbl%>%
dplyr::select(scenario, region, units, class1, class2, x, value, vintage)%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_allRegions.csv", sep = ""),row.names = F)
utils::write.csv(tblAgg%>%
tidyr::spread(scenario,yData),
file = paste(dirOutputs, "/Charts/Tables_regional_allRegions_aggClass.csv", sep = ""),row.names = F)
if(any(paramsSelect!="All")){
if(all(paramsSelect %in% unique(tbl$param))){
print(paste("Running paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(param %in% paramsSelect[(paramsSelect %in% unique(tbl$param))])
}else{
print(paste("Parameters not available in data: ", paste(paramsSelect[!(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
print(paste("Running remaining paramaters: ",  paste(paramsSelect[(paramsSelect %in% unique(tbl$param))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(param %in% paramsSelect[(paramsSelect %in% unique(tbl$param))])
}
}
if(any(regionsSelect!="All")){
if(all(regionsSelect %in% unique(tbl$region))){
print(paste("Running regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(region %in% regionsSelect[(regionsSelect %in% unique(tbl$region))])
}else{
print(paste("Regions not available in data: ", paste(regionsSelect[!(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
print(paste("Running remaining regions: ",  paste(regionsSelect[(regionsSelect %in% unique(tbl$region))],collapse=", "), sep=""))
tbl<-tbl%>%dplyr::filter(region %in% regionsSelect[(regionsSelect %in% unique(tbl$region))])
}
}
if(length(unique(tbl$region))>1){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_sp<-tbl%>%dplyr::filter(scenario==j,
param==k)
if(nrow(tbl_sp)>0){
if(length(unique(tbl_sp$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_sp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_sp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_spC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_spC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figBar_",j,"_compareRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_spC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figLines_",j,"_compareRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,pdfpng=pdfpng
)
# If class 2 available
if(length(unique(tbl_sp$class2))>1){
# Bar Chart
metis.chart(tbl_sp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="class2",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figBar_",j,"_compareRegionsClass2",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_sp$class2))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_sp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="class2",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figLines_",j,"_compareRegionsClass2",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_sp$class2))/2),1),pdfpng=pdfpng
)
}
} # Close if(nrow(tbl_sp)>0)
} # close loop for param
} # close loop for scenario
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(j in unique(tbl$param)){
tbl_p<-tbl%>%dplyr::filter(param==j)
if(length(unique((tbl_p%>%dplyr::filter(value>0))$scenario))>1){
if(nrow(tbl_p)>0){
if(length(unique(tbl_p$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_p%>%
=======
# If class 2 available
if(length(unique(tbl_sp$class2))>1){
# Bar Chart
metis.chart(tbl_sp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="region",facet_rows="class2",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figBar_",j,"_compareRegionsClass2",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_sp$class2))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_sp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="region",facet_rows="class2",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions","/", j,sep = ""),
fileName = paste(k,"_figLines_",j,"_compareRegionsClass2",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_sp$region))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_sp$class2))/2),1),pdfpng=pdfpng
)
}
} # Close if(nrow(tbl_sp)>0)
} # close loop for param
} # close loop for scenario
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(j in unique(tbl$param)){
tbl_p<-tbl%>%dplyr::filter(param==j)
if(length(unique((tbl_p%>%dplyr::filter(value>0))$scenario))>1){
if(nrow(tbl_p)>0){
if(length(unique(tbl_p$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLine_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)}else{
print(paste("Comparing for only: ",  paste(xCompare,collapse=", "), sep=""))
tbl_py <- tbl_py%>%dplyr::filter(x %in% xCompare)
}
if(length(unique(tbl_py$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_py%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_py%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pyC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pyC1, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegion_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_py$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_pAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_pAgg<-dplyr::bind_rows(tbl_pAggsums,tbl_pAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_pAgg)>0){
# Bar Chart Dodged
metis.chart(tbl_pAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
class ="scenario", position ="dodge", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDodged_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
)
# Line Chart Overlapped
metis.chart(tbl_pAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",class ="scenario", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineOverlap_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
if(!scenRef %in% unique(tbl_p$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_pd<-tbl_p%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_p)){tbl_pd<-tbl_pd%>%dplyr::select(-dplyr::one_of(c(yData)))}
for (k in unique(tbl_p$scenario)[unique(tbl_p$scenario)!=scenRef_i]){
tbl_temp <- tbl_p%>%
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-dplyr::one_of(c(yData)))}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-dplyr::one_of(c(k,scenRef_i)))
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
tbl_pd<-dplyr::bind_rows(tbl_pd,tbl_temp)
}
tbl_pd <-tbl_pd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_pd$scenario)[unique(tbl_pd$scenario)!=scenRef_i])))
if(length(unique(tbl_pd$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_pd%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_pd%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pdC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # Close loop if(length(unique(tbl$scenario))>1) to see if multiple scenarios for chosen param
} # close loop for param
} # Close if multiple scenarios available
} # if length(unique(tbl$region))>1
if(regionCompareOnly!=1){
#------------------
# Create Charts for Each Region & Each Scenario
#------------------
for(i in unique(tbl$region)){
for(j in unique(tbl$scenario)){
for(k in unique(tbl$param)){
tbl_rsp<-tbl%>%dplyr::filter(region==i,
scenario==j,
param==k)
if(nrow(tbl_rsp)>0){
if(length(unique(tbl_rsp$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rsp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_rsp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_rspC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rspC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rspC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figLine_",i,"_",j,nameAppend,sep=""),pdfpng=pdfpng
)
# Class 2 Charts
if(length(unique(tbl_rsp$class2))>1){
# Bar Chart
metis.chart(tbl_rsp, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
facet_columns = "class2", dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figBar_",i,"_Class2_",j,nameAppend,sep="")
)
# Line Chart
metis.chart(tbl_rsp,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
facet_columns = "class2", dirOutputs = paste(dirOutputs, "/Charts/", i, "/", j,sep = ""),
fileName = paste(k,"_figLine_",i,"_Class2_",j,nameAppend,sep="")
)
}
} # Close if(nrow(tbl_rsp)>0)
} # close loop for param
} # close loop for scenario
} # close loop for region
#------------------
# Compare Scenarios for each region
#------------------
if(length(unique(tbl$scenario))>1){
for(i in unique(tbl$region)){
for(j in unique(tbl$param)){
tbl_rp<-tbl%>%dplyr::filter(region==i,
param==j)
if(length(unique((tbl_rp%>%dplyr::filter(value>0))$scenario))>1){
if(nrow(tbl_rp)>0){
if(length(unique(tbl_rp$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_rpC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rpC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBar_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rpC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLine_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rp$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rp$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(!all(xCompare %in% unique(tbl_rp[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_rp[[xData]]))],collapse=", "), sep=""))
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)}else{
print(paste("Comparing for only: ",  paste(xCompare,collapse=", "), sep=""))
tbl_rpy <- tbl_rp%>%dplyr::filter(x %in% xCompare)
}
if(length(unique(tbl_rpy$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rpy%>%
>>>>>>> Stashed changes
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
<<<<<<< Updated upstream
tblAggmeans<-tbl_p%>%
=======
tblAggmeans<-tbl_rpy%>%
>>>>>>> Stashed changes
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
<<<<<<< Updated upstream
tbl_pC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLine_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
#-------------------------
# Plot with Scenarios on X for Chosen Years
#------------------------
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_p[[xData]]))<5){
tbl_py <- tbl_p}else{
xCompare<-c(unique(tbl_p[[xData]])[1],
unique(tbl_p[[xData]])[round(length(unique(tbl_p[[xData]]))/2)],
utils::tail(unique(tbl_p[[xData]]),n=1)
)
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)
}
}
if(length(unique(tbl_py$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_py%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_py%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pyC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pyC1, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegion_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_py$region))/2),1),pdfpng=pdfpng
=======
tbl_rpyC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rpyC1, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBar_",i,"_compareScen_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpy$x)[unique(tbl_rpy$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpy$region))/2),1),pdfpng=pdfpng
>>>>>>> Stashed changes
)
#-------------------------
# Aggregate and Plot Dodged/OverLapping Plots
#------------------------
# Aggregate across classes
<<<<<<< Updated upstream
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_pAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_pAgg<-dplyr::bind_rows(tbl_pAggsums,tbl_pAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_pAgg)>0){
# Bar Chart Dodged
metis.chart(tbl_pAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
class ="scenario", position ="dodge", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDodged_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
)
# Line Chart Overlapped
metis.chart(tbl_pAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",class ="scenario", classPalette = classPalette,
facet_columns="region",facet_rows="none",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineOverlap_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pAgg$region))/2),1),pdfpng=pdfpng
=======
tbl_rpAggsums<-tbl_rp%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_rpAggmeans<-tbl_rp%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData))%>%
dplyr::summarize_at(c(yData),dplyr::funs(mean))
tbl_rpAgg<-dplyr::bind_rows(tbl_rpAggsums,tbl_rpAggmeans)%>%dplyr::ungroup()
if(nrow(tbl_rpAgg)>0){
if(length(unique(tbl_rpAgg$class1))>1){figWMult=1.3}else{figWmult=1}
# Bar Chart Dodged
metis.chart(tbl_rpAgg, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns="none",
class ="scenario", position ="dodge", classPalette = classPalette,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBarDodged_",i,"_compareScen_",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,pdfpng=pdfpng
)
# Line Chart Overlapped
metis.chart(tbl_rpAgg,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_columns="none",
class ="scenario", classPalette = classPalette,
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLineOverlap_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpAgg$scenario))/2),1)*figWMult,pdfpng=pdfpng
>>>>>>> Stashed changes
)
}
#-------------------------
# Diff Plots
#------------------------
if(is.null(scenRef)){
print(paste("No reference scenario provided",sep=""))
<<<<<<< Updated upstream
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
if(!scenRef %in% unique(tbl_p$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_p$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_p$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_pd<-tbl_p%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_p)){tbl_pd<-tbl_pd%>%dplyr::select(-dplyr::one_of(c(yData)))}
for (k in unique(tbl_p$scenario)[unique(tbl_p$scenario)!=scenRef_i]){
tbl_temp <- tbl_p%>%
=======
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
if(!scenRef %in% unique(tbl_rp$scenario)){
print(paste("scenario ",scenRef," not in scenarios",sep=""))
print(paste("Using ",unique(tbl_rp$scenario)[1]," as reference",sep=""))
scenRef_i = unique(tbl_rp$scenario)[1]}else{
scenRef_i <- scenRef}
} # Check if Ref Scenario Chosen
# Calculate Diff Values
tbl_rpd<-tbl_rp%>%
dplyr::filter(scenario==scenRef_i)%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_rp)){tbl_rpd<-tbl_rpd%>%dplyr::select(-dplyr::one_of(c(yData)))}
for (k in unique(tbl_rp$scenario)[unique(tbl_rp$scenario)!=scenRef_i]){
tbl_temp <- tbl_rp%>%
>>>>>>> Stashed changes
dplyr::filter(scenario %in% c(scenRef_i,k))%>%
dplyr::select(-origScen,-origQuery,-origValue,-origUnits,-origX,-sources)
if(!yData %in% names(tbl_temp)){tbl_temp<-tbl_temp%>%dplyr::select(-dplyr::one_of(c(yData)))}
tbl_temp <- tbl_temp%>%
tidyr::spread(scenario,yData)%>%
dplyr::mutate(!!paste(k,"_diff",sep=""):=get(k)-get(scenRef_i))%>%
dplyr::select(-dplyr::one_of(c(k,scenRef_i)))
tbl_temp<-tbl_temp%>%
tidyr::gather(key=scenario,value=!!yData,
-c(names(tbl_temp)[!names(tbl_temp) %in% paste(k,"_diff",sep="")]))
<<<<<<< Updated upstream
tbl_pd<-dplyr::bind_rows(tbl_pd,tbl_temp)
}
tbl_pd <-tbl_pd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_pd$scenario)[unique(tbl_pd$scenario)!=scenRef_i])))
if(length(unique(tbl_pd$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_pd%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_pd%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pdC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBarDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line", facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLineDiff_compareScenRegion",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_pd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_pd$region))/2),1),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # Close loop if(length(unique(tbl$scenario))>1) to see if multiple scenarios for chosen param
} # close loop for param
} # Close if multiple scenarios available
} # if length(unique(tbl$region))>1
tbl_p<-tbl%>%dplyr::filter(param==j)
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_p%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_pC1,xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",facet_columns="scenario",facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figLine_compareScenRegions",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_p$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_p$region))/2),1),pdfpng=pdfpng
)
if(any(!xCompare %in% unique(tbl_p[[xData]]))){
print(paste("xCompare not available in data: ", paste(xCompare[!(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
print(paste("Comparing for only: ",  paste(xCompare[(xCompare %in% unique(tbl_p[[xData]]))],collapse=", "), sep=""))
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)}else{
if(length(unique(tbl_p[[xData]]))<5){
tbl_py <- tbl_p}else{
xCompare<-c(unique(tbl_p[[xData]])[1],
unique(tbl_p[[xData]])[round(length(unique(tbl_p[[xData]]))/2)],
utils::tail(unique(tbl_p[[xData]]),n=1)
)
tbl_py <- tbl_p%>%dplyr::filter(x %in% xCompare)
}
}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_py%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_py%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2,-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_pyC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_pyC1, xData ="scenario", yData=yData,xLabel=xLabel,yLabel=yLabel,
sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar", facet_columns = xData, facet_rows="region",
dirOutputs = paste(dirOutputs, "/Charts/compareRegions/compareScen", sep = ""),
fileName = paste(j,"_figBar_compareScenRegion_xScenSelectYears",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_py$x)[unique(tbl_py$x) %in% xCompare])/3),1)*figWMult,
figHeight = 9*max((length(unique(tbl_py$region))/2),1),pdfpng=pdfpng
)
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_p
# Aggregate across classes
tbl_pAggsums<-tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))%>%
dplyr::summarize_at(c(yData),dplyr::funs(sum))
tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-yData,-origValue))
tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)
tbl_p%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-tidyselect::contains("class"),-origValue,-origScen,-origQuery,-origUnits,-origX,-vintage)%>%
dplyr::group_by_at(dplyr::vars(-!!yData,-!!origValue))
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
=======
tbl_rpd<-dplyr::bind_rows(tbl_rpd,tbl_temp)
}
tbl_rpd <-tbl_rpd %>%
dplyr::mutate(scenario=factor(scenario,
levels=c(scenRef_i,
unique(tbl_rpd$scenario)[unique(tbl_rpd$scenario)!=scenRef_i])))
if(length(unique(tbl_rpd$class1))>1){figWMult=1.3}else{figWmult=1}
# Aggregated Class 1
# Aggregate across classes
tblAggsums<-tbl_rpd%>%
dplyr::filter(aggregate=="sum")%>%
dplyr::select(-class2,-classLabel2,-classPalette2)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(sum))
tblAggmeans<-tbl_rpd%>%
dplyr::filter(aggregate=="mean")%>%
dplyr::select(-class2,-classLabel2,-classPalette2)%>%
dplyr::group_by_at(dplyr::vars(-value))%>%
dplyr::summarize_at(c("value"),dplyr::funs(mean))
tbl_rpdC1<-dplyr::bind_rows(tblAggsums,tblAggmeans)%>%dplyr::ungroup()
# Bar Chart
metis.chart(tbl_rpdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel, sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "bar",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figBarDiff_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1),pdfpng=pdfpng
)
# Line Chart
metis.chart(tbl_rpdC1, xData=xData,yData=yData,xLabel=xLabel,yLabel=yLabel,sizeBarLines=sizeBarLines,useNewLabels=useNewLabels,sizeLines=sizeLines, chartType = "line",
dirOutputs = paste(dirOutputs, "/Charts/", i,"/compareScen",sep = ""),
fileName = paste(j,"_figLineDiff_",i,"_compareScen",nameAppend,sep=""),
figWidth = 13*max((length(unique(tbl_rpd$scenario))/2),1)*figWMult,
figHeight = 9*max((length(unique(tbl_rpd$region))/2),1),pdfpng=pdfpng
)
} # Close if(nrow(tbl_rsp)>0)
} # if(length(unique(tbl$scenario))>1){ to check if chosen param exists for comparison
} # close loop for param
} # close loop for region
} # Close if multiple scenarios available
} # Close if(regionCompareOnly==1)
return(tbl)
} # Close Function
# ?metis.chartsProcess # For more help on charting process
# Read in Tables (If exist)
dataTables<-c(
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Colombia.csv",sep=""),
paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Argentina.csv",sep="")
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Uruguay.csv",sep="")
)  # Need to create this before loading
a<-read.csv(dataTables); head(a); unique(a$scenario); unique(a$param); unique(a$x)
for(param_i in unique(a$param)){print(param_i);print(unique((a%>%dplyr::filter(param==param_i))$x))}
# Read in the data from the function metis.readgcam
rTable <- dataGCAM;
unique(rTable$param)
unique(rTable$x)
unique(rTable$scenario)
# Choose Parameters or set to "All" for all params. For complete list see ?metis.chartsProcess
# paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
#                "watConsumBySec", "
paramsSelect=c("primNrgConsumByFuel")
regionsSelect=c("Argentina")
charts<-metis.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c(1990,2005,2010,2015), # Default is c("2015","2030","2050","2100")
scenRef="GCAMOrig", # Default is NULL
scensSelect=c("GCAMOrig","Local Data"),
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=0,
xRange=c(1990,2005,2010,2015) # Default is All
)
# Read in Tables (If exist)
dataTables<-c(
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Colombia.csv",sep=""),
paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Argentina.csv",sep="")
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Uruguay.csv",sep="")
)  # Need to create this before loading
a<-read.csv(dataTables); head(a); unique(a$scenario); unique(a$param); unique(a$x)
for(param_i in unique(a$param)){print(param_i);print(unique((a%>%dplyr::filter(param==param_i))$x))}
# Read in Tables (If exist)
dataTables<-c(
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Colombia.csv",sep=""),
paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Argentina.csv",sep="")
#  paste(getwd(),"/outputs/readGCAMTables/Tables_Local/local_Regional_Uruguay.csv",sep="")
)  # Need to create this before loading
a<-read.csv(dataTables); head(a); unique(a$scenario); unique(a$param); unique(a$x)
for(param_i in unique(a$param)){print(param_i);print(unique((a%>%dplyr::filter(param==param_i))$x))}
# Read in the data from the function metis.readgcam
rTable <- dataGCAM;
unique(rTable$param)
unique(rTable$x)
unique(rTable$scenario)
# Choose Parameters or set to "All" for all params. For complete list see ?metis.chartsProcess
# paramsSelect=c("finalNrgbySec", "primNrgConsumByFuel", "elecByTech",
#                "watConsumBySec", "watWithdrawBySec", "watWithdrawByCrop", "watBioPhysCons",
#                "gdpPerCapita", "gdp", "gdpGrowthRate", "pop",
#                "agProdbyIrrRfd","agProdByCrop",
#                "landIrrRfd", "aggLandAlloc","co2emissionByEndUse", "ghgEmissionByGHG")
#paramsSelect=c("elecByTech")
paramsSelect=c("primNrgConsumByFuel", "elecByTech")
regionsSelect=c("Argentina")
charts<-metis.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c(1990,2005,2010,2015), # Default is c("2015","2030","2050","2100")
scenRef="GCAMOrig", # Default is NULL
scensSelect=c("GCAMOrig","Local Data"),
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=0,
xRange=c(1990,2005,2010,2015) # Default is All
)
unique(rTable$param)
paramsSelect=c("primNrgConsumByFuel", "elecByTech","finalNrgbySec")
regionsSelect=c("Argentina")
charts<-metis.chartsProcess(rTable=rTable, # Default is NULL
dataTables=dataTables, # Default is NULL
paramsSelect=paramsSelect, # Default is "All"
regionsSelect=regionsSelect, # Default is "All"
xCompare=c(1990,2005,2010,2015), # Default is c("2015","2030","2050","2100")
scenRef="GCAMOrig", # Default is NULL
scensSelect=c("GCAMOrig","Local Data"),
dirOutputs=paste(getwd(),"/outputs",sep=""), # Default is paste(getwd(),"/outputs",sep="")
pdfpng="png", # Default is "png"
regionCompareOnly=0, # Default is "0"
useNewLabels=0,
xRange=c(1990,2005,2010,2015) # Default is All
)
>>>>>>> Stashed changes
=======
=======
>>>>>>> Stashed changes
gridaP$x<-as.numeric(gridaP$x)
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
#print(mean(gridaP$BackCalcCapFactor~gridaP$class))
} #andym Close biaFile_i for loop
mns<-with(gridaP, tapply(BackCalcCapFactor, class, mean, na.rm = TRUE))
mns
mdns<-with(gridaP, tapply(BackCalcCapFactor, class, median, na.rm = TRUE))
mdns
mns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, mean, na.rm = TRUE))
mns_gen2015
mdns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, median, na.rm = TRUE))
mdns_gen2015
mns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, mean, na.rm = TRUE))
mns_gen2016
mdns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, median, na.rm = TRUE))
mdns_gen2016
##Do THIS FOR MEDIAN AS WELL (without disregarding the NAs)
#dlply(gridaP, .(class), summarize, mean=mean(gridaP$BackCalcCapFactor))
#meansaP<-ddply(gridaP$BackCalcCapFactor, .(gridaP$class), summarize, mean=mean(value))
#meansaP
length(gridaP$BCCF_gen2015[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
#----------------
# Analyze Bia Capcity Factors
#---------------
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
#print(mean(gridaP$BackCalcCapFactor~gridaP$class))
} #andym Close biaFile_i for loop
mns<-with(gridaP, tapply(BackCalcCapFactor, class, mean, na.rm = TRUE))
mns
mdns<-with(gridaP, tapply(BackCalcCapFactor, class, median, na.rm = TRUE))
mdns
mns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, mean, na.rm = TRUE))
mns_gen2015
mdns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, median, na.rm = TRUE))
mdns_gen2015
mns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, mean, na.rm = TRUE))
mns_gen2016
mdns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, median, na.rm = TRUE))
mdns_gen2016
##Do THIS FOR MEDIAN AS WELL (without disregarding the NAs)
#dlply(gridaP, .(class), summarize, mean=mean(gridaP$BackCalcCapFactor))
#meansaP<-ddply(gridaP$BackCalcCapFactor, .(gridaP$class), summarize, mean=mean(value))
#meansaP
length(gridaP$BCCF_gen2015[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}    #andym : should this be changed to JGCRI/metis ?_?
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------------------
# Prepare Grids
#------------------------
dirOutputs=paste(getwd(),"/outputs",sep="")
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthos/",sep="")
xanthosScenarioAssign="Eg1"
xanthosFiles=c("q_mmperyear_Reference")
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
biaFolder=paste(getwd(),"/dataFiles/grids/bia/",sep="")
biaScenarioAssign="Eg1"
biaFiles=c("global_power_plant_database_MW")
#biaUnits="Capacity (MW)"   #andym   ?Should we have biaUnits?
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisXanthos.RData", sep = "")
#sqliteUSE = T andym
sqliteUSE = F #andym
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
xanthosUnits="Runoff (mm)"  #andym  I thought that xanthosUnits was supposed to be taken out of prepGrid entirely, but it seems to be needed
reReadData=T  #andym
scarcityXanthosRollMeanWindow=10   #andym
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
}
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
View(gridaP)
View(gridaP)
gridaaP <- gridaP[country %in% c("ARG","COL")]
griddP <- data.table::data.table(gridaP)
gridARGCOL <- gridaP[country %in% c("ARG","COL")]
View(griddP)
gridARGCOL <- gridaP[gridaP$country %in% c("ARG","COL")]
DT <- data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
DT <- data.table::data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
View(DT)
gridARGCOL <- gridaP[country=="COL"]
gridARGCOL <- gridaP["country"=="COL"]
View(gridARGCOL)
library(metis)
#----------------------------
# Install necessary packages
#----------------------------
if("devtools" %in% rownames(installed.packages()) == F){install.packages("devtools")}
library(devtools)
#if("metis" %in% rownames(installed.packages()) == F){install_github(repo="zarrarkhan/metis")}    #andym : should this be changed to JGCRI/metis ?_?
library(metis)
if("rgcam" %in% rownames(installed.packages()) == F){install_github(repo="JGCRI/rgcam")}
library(rgcam)
if("tibble" %in% rownames(installed.packages()) == F){install.packages("tibble")}
library(tibble)
if("dplyr" %in% rownames(installed.packages()) == F){install.packages("dlpyr")}
library(dplyr)
if("rgdal" %in% rownames(installed.packages()) == F){install.packages("rgdal")}
library(rgdal)
if("tmap" %in% rownames(installed.packages()) == F){install.packages("tmap")}
library(tmap)
if("rgeos" %in% rownames(installed.packages()) == F){install.packages("rgeos")}
library(rgeos)
#------------------------
# Prepare Grids
#------------------------
dirOutputs=paste(getwd(),"/outputs",sep="")
demeterFolder=paste(getwd(),"/dataFiles/grids/demeter/",sep="")
demeterScenario="Eg1"
demeterUnits="Landuse (Fraction)"
demeterTimesteps<-seq(from=2005,to=2020,by=5)
tethysFolder=paste(getwd(),"/dataFiles/grids/tethys/",sep="")
tethysScenario="Eg1"
tethysFiles=c("wddom","wdelec","wdirr","wdliv","wdmfg","wdmin","wdnonag","wdtotal")
tethysUnits="Water Withdrawals (mm)"
xanthosFolder=paste(getwd(),"/dataFiles/grids/xanthos/",sep="")
xanthosScenarioAssign="Eg1"
xanthosFiles=c("q_mmperyear_Reference")
xanthosCoordinatesPath=paste(getwd(),"/dataFiles/grids/xanthosReference/coordinates.csv",sep="")
xanthosGridAreaHecsPath=paste(getwd(),"/dataFiles/grids/xanthosReference/Grid_Areas_ID.csv",sep="")
biaFolder=paste(getwd(),"/dataFiles/grids/bia/",sep="")
biaScenarioAssign="Eg1"
biaFiles=c("global_power_plant_database_MW")
#biaUnits="Capacity (MW)"   #andym   ?Should we have biaUnits?
spanLowess=0.25
popFolder<-paste(getwd(),"/dataFiles/grids/griddedIDsPop/",sep="")
popFiles<-"grid_pop_map"
popUnits<-"person"
gridMetisData=paste(dirOutputs, "/Grids/gridMetisXanthos.RData", sep = "")
#sqliteUSE = T andym
sqliteUSE = F #andym
sqliteDBNamePath =paste(getwd(),"/outputs/Grids/gridMetis.sqlite", sep = "")
xanthosUnits="Runoff (mm)"  #andym  I thought that xanthosUnits was supposed to be taken out of prepGrid entirely, but it seems to be needed
reReadData=T  #andym
scarcityXanthosRollMeanWindow=10   #andym
library(ggplot2)
for(biaFile_i in biaFiles){
if(!grepl(".csv",biaFile_i)){biaFile_i=paste(biaFile_i,".csv",sep="")}
print(paste("Reading bia data file: ",biaFile_i,"...",sep=""))
gridaP<-data.table::fread(paste(biaFolder,"/",biaFile_i,sep=""), header=T,stringsAsFactors = F)%>%
tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
print(paste("Bia data file: ",biaFile_i," read.",sep=""))
if(grepl("GW",biaFile_i)){
print(paste("Based on bia file name: ", biaFile_i," has GW capacity data. Converting to MW...", sep=""))
gridaP<-gridaP%>%dplyr::mutate(capacity_gw = capacity_gw*1000)%>%
dplyr::rename(capacity_mw=capacity_gw)
print(paste("GW data converted to MW", sep=""))
}else{
print(paste("Based on bia filename: ", biaFile_i," has MW data. Using MW.", sep=""))
}
biaScenario<-biaScenarioAssign       #andym take this out if use the code above. And should this be biaScenarios instead?
biaGCM=NA;biaRCP=NA
aggType="vol"
gridaP<-gridaP%>%dplyr::mutate(lat=latitude,
lon=longitude,
scenario=biaScenario,
scenarioGCM=biaGCM,
scenarioRCP=biaRCP,
scenarioSSP=NA,
scenarioPolicy=NA,
param="biaElecGen",
units= "Capacity (MW)",
aggType=aggType,
classPalette="pal_elec_subsec",
class=fuel1,
value=capacity_mw,
x=NA,
BackCalcCapFactor=estimated_generation_gwh/capacity_mw*(1000/(365*24)),
BCCF_gen2015=generation_gwh_2015/capacity_mw*(1000/(365*24)),
BCCF_gen2016=(1000/(365*24))*generation_gwh_2016/capacity_mw,
est_gen_gwh=estimated_generation_gwh,
gen_gwh_2013=generation_gwh_2013,
gen_gwh_2014=generation_gwh_2014,
gen_gwh_2015=generation_gwh_2015,
gen_gwh_2016=generation_gwh_2016)%>%
tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
tibble::as_tibble()
print(paste("Data for bia file gathered into columns.", sep=""))
gridaP$x<-as.numeric(gridaP$x)
ggplot(data = gridaP, aes(class, BackCalcCapFactor))+geom_boxplot()+coord_cartesian(ylim = c(0, 7))
#print(mean(gridaP$BackCalcCapFactor~gridaP$class))
} #andym Close biaFile_i for loop
mns<-with(gridaP, tapply(BackCalcCapFactor, class, mean, na.rm = TRUE))
mns
mdns<-with(gridaP, tapply(BackCalcCapFactor, class, median, na.rm = TRUE))
mdns
mns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, mean, na.rm = TRUE))
mns_gen2015
mdns_gen2015<-with(gridaP, tapply(BCCF_gen2015, class, median, na.rm = TRUE))
mdns_gen2015
mns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, mean, na.rm = TRUE))
mns_gen2016
mdns_gen2016<-with(gridaP, tapply(BCCF_gen2016, class, median, na.rm = TRUE))
mdns_gen2016
##Do THIS FOR MEDIAN AS WELL (without disregarding the NAs)
#dlply(gridaP, .(class), summarize, mean=mean(gridaP$BackCalcCapFactor))
#meansaP<-ddply(gridaP$BackCalcCapFactor, .(gridaP$class), summarize, mean=mean(value))
#meansaP
length(gridaP$BCCF_gen2015[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2015[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2015) & gridaP$BCCF_gen2015!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Biomass" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Coal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Cogeneration" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Gas" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Geothermal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Hydro" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Nuclear" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Oil" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Other" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Petcoke" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Solar" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Storage" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Waste" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wave and Tidal" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
length(gridaP$BCCF_gen2016[gridaP$class=="Wind" & is.finite(gridaP$BCCF_gen2016) & gridaP$BCCF_gen2016!=0])
gridbP<-data.table::fread(paste(biaFolder,"/capacity_factor_gcam_called_A23_globaltech.csv",sep=""), header=T,stringsAsFactors = F)    #%>%
#    tibble::as_tibble()%>%dplyr::select(-name,-country_long,-gppd_idnr,-fuel2,-fuel3,-fuel4,-owner,-source,-url,-geolocation_source)   #andym could take out country instead of country_long
gridbP<-gridbP%>%dplyr::mutate(class=subsector,
gcamCapFactor=cf_2100)
#wriCapFactor=mns)         #%>%
#tibble::as_tibble()%>%dplyr::select(-latitude,-longitude,-fuel1,-capacity_mw,-generation_gwh_2013,-generation_gwh_2014,-generation_gwh_2015,-generation_gwh_2016,-estimated_generation_gwh)%>%
#gridaP<-gridaP%>%data.table
griddP <- data.table::data.table(gridaP)
grideP <- griddP[,.(BCCFmean=mean(BackCalcCapFactor,na.rm=TRUE)),by=class]
gridfP <- merge(grideP,griddP[,.(BCCFmedian=median(BackCalcCapFactor,na.rm=TRUE)),by=class])
gridgP <- merge(gridfP,griddP[,.(BCCF_gen2015mean=mean(BCCF_gen2015,na.rm=TRUE)),by=class])
gridhP <- merge(gridgP,griddP[,.(BCCF_gen2015median=median(BCCF_gen2015,na.rm=TRUE)),by=class])
gridjP <- merge(gridhP,griddP[,.(BCCF_gen2016mean=mean(BCCF_gen2016,na.rm=TRUE)),by=class])
gridkP <- merge(gridjP,griddP[,.(BCCF_gen2016median=median(BCCF_gen2016,na.rm=TRUE)),by=class])%>%
dplyr::mutate(class=toupper(class))
#gridbP[,class]=gridbP[,gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(class), perl=TRUE)]
gridbP<-gridbP%>%dplyr::mutate(class=toupper(class))
gridbP[gridbP=="REFINED LIQUIDS"]<-"OIL"
gridiP <- merge(gridkP,gridbP)
chrt <- ggplot(data = gridiP, aes(class, gcamCapFactor))+geom_point()+coord_cartesian(ylim = c(0, 1))
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmean), color="green", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCFmedian), color="green", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015mean), color="yellow", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2015median), color="yellow", shape=1)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016mean), color="blue", shape=6)
chrt<-chrt+geom_point(data = gridiP, aes(class, BCCF_gen2016median), color="blue", shape=1)
chrt
View(gridaP)
View(griddP)
View(gridaP)
View(gridaP)
gridARGCOL <- gridaP%>%
dplyr::group_by(value, country, class)  #%>%
View(gridARGCOL)
gridARGCOL <- gridaP%>%
dplyr::group_by(value, country, class)%>%
dplyr::summarise(total_capacity=sum(value))
View(gridARGCOL)
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
